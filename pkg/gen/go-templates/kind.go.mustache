// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package {{Version}}

import (
	{{#IsPropertyType}}
	"context"
	"reflect"

	{{/IsPropertyType}}
	{{#NeedsErrors}}
	"github.com/pkg/errors"
	{{/NeedsErrors}}
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	{{#GoImports}}
	{{{GoImport}}}
	{{/GoImports}}
)

// {{{Comment}}}{{{PulumiComment}}}
type {{Kind}} struct {
	pulumi.CustomResourceState

	{{#Properties}}
	{{{Comment}}}
	{{LanguageName}} {{{ProviderType}}} `pulumi:"{{Name}}"`

	{{/Properties}}
}

// {{Kind}}Args is the set of arguments needed to create a {{Kind}} resource.
type {{Kind}}Args struct {
	{{#RequiredInputProperties}}
	{{{Comment}}}
	{{LanguageName}} {{{InputsAPIType}}} `pulumi:"{{Name}}"`

	{{/RequiredInputProperties}}
	{{#OptionalInputProperties}}
	{{{Comment}}}
	{{LanguageName}} {{{InputsAPIType}}} `pulumi:"{{Name}}"`

	{{/OptionalInputProperties}}
}

// New{{Kind}} creates a {{Kind}} resource with the given unique name, arguments, and options.
func New{{Kind}}(ctx *pulumi.Context, name string, args *{{Kind}}Args, opts ...pulumi.ResourceOption) (*{{Kind}}, error) {
	inputs := map[string]pulumi.Input{}
	{{#RequiredInputProperties}}
	if args == nil || args.{{LanguageName}} == nil {
		return nil, errors.New("missing required argument '{{LanguageName}}'")
	}
	{{/RequiredInputProperties}}
	if args != nil {
		args.ApiVersion = pulumi.String("{{RawAPIVersion}}")
		args.Kind = pulumi.String("{{Kind}}")
		{{#RequiredInputProperties}}
		inputs["{{Name}}"] = args.{{LanguageName}}{{GoOutputMethodName}}
		{{/RequiredInputProperties}}
		{{#OptionalInputProperties}}
		if i := args.{{LanguageName}}; i != nil {
			inputs["{{Name}}"] = i{{GoOutputMethodName}}
		}
		{{/OptionalInputProperties}}
	}
	var resource {{Kind}}
	err := ctx.RegisterResource("kubernetes:{{URNAPIVersion}}:{{Kind}}", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Get{{Kind}} gets an existing {{Kind}} resource's state with the given name and ID.
func Get{{Kind}}(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*{{Kind}}, error) {
	var resource {{Kind}}
	err := ctx.ReadResource("kubernetes:{{URNAPIVersion}}:{{Kind}}", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

{{#IsPropertyType}}
{{> nestedDefs.go}}
{{/IsPropertyType}}
