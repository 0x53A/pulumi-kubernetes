// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package version

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Info contains versioning information. how we'll want to distribute that information.
type Info struct {
	
	BuildDate string `pulumi:"buildDate"`

	
	Compiler string `pulumi:"compiler"`

	
	GitCommit string `pulumi:"gitCommit"`

	
	GitTreeState string `pulumi:"gitTreeState"`

	
	GitVersion string `pulumi:"gitVersion"`

	
	GoVersion string `pulumi:"goVersion"`

	
	Major string `pulumi:"major"`

	
	Minor string `pulumi:"minor"`

	
	Platform string `pulumi:"platform"`

}

var _InfoType = reflect.TypeOf((*Info)(nil)).Elem()

// InfoInput represents an input type that resolves to a Info.
type InfoInput interface {
	ElementType() reflect.Type

	ToInfoOutput() InfoOutput
	ToInfoOutputWithContext(ctx context.Context) InfoOutput
}

// InfoArgs is a InfoInput whose fields are all Input types.
type InfoArgs struct {
	
	BuildDate pulumi.StringInput `pulumi:"buildDate"`

	
	Compiler pulumi.StringInput `pulumi:"compiler"`

	
	GitCommit pulumi.StringInput `pulumi:"gitCommit"`

	
	GitTreeState pulumi.StringInput `pulumi:"gitTreeState"`

	
	GitVersion pulumi.StringInput `pulumi:"gitVersion"`

	
	GoVersion pulumi.StringInput `pulumi:"goVersion"`

	
	Major pulumi.StringInput `pulumi:"major"`

	
	Minor pulumi.StringInput `pulumi:"minor"`

	
	Platform pulumi.StringInput `pulumi:"platform"`

}

func (a InfoArgs) ElementType() reflect.Type {
	return _InfoType
}

func (a InfoArgs) ToInfoOutput() InfoOutput {
	return pulumi.ToOutput(a).(InfoOutput)
}

func (a InfoArgs) ToInfoOutputWithContext(ctx context.Context) InfoOutput {
	return pulumi.ToOutputWithContext(ctx, a).(InfoOutput)
}

// InfoOutput is an output type that resolves to a Input.
type InfoOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(InfoOutput{}) }

func (InfoOutput) ElementType() reflect.Type {
	return _InfoType
}

func (o InfoOutput) BuildDate() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.BuildDate
	}).(pulumi.StringOutput)
}

func (o InfoOutput) Compiler() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.Compiler
	}).(pulumi.StringOutput)
}

func (o InfoOutput) GitCommit() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.GitCommit
	}).(pulumi.StringOutput)
}

func (o InfoOutput) GitTreeState() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.GitTreeState
	}).(pulumi.StringOutput)
}

func (o InfoOutput) GitVersion() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.GitVersion
	}).(pulumi.StringOutput)
}

func (o InfoOutput) GoVersion() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.GoVersion
	}).(pulumi.StringOutput)
}

func (o InfoOutput) Major() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.Major
	}).(pulumi.StringOutput)
}

func (o InfoOutput) Minor() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.Minor
	}).(pulumi.StringOutput)
}

func (o InfoOutput) Platform() pulumi.StringOutput {
	return o.Apply(func(v Info) string {
		return v.Platform
	}).(pulumi.StringOutput)
}

