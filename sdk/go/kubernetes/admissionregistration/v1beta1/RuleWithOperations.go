// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that
// all the tuple expansions are valid.
type RuleWithOperations struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the
	// length of the slice must be one. Required.
	ApiGroups []string `pulumi:"apiGroups"`

	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present,
	// the length of the slice must be one. Required.
	ApiVersions []string `pulumi:"apiVersions"`

	// Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all
	// operations. If '*' is present, the length of the slice must be one. Required.
	Operations []string `pulumi:"operations"`

	// Resources is a list of resources this rule applies to.
	// 
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all
	// resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all
	// scale subresources. '*/*' means all resources and their subresources.
	// 
	// If wildcard is present, the validation rule will ensure resources do not overlap with each
	// other.
	// 
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources []string `pulumi:"resources"`

	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*"
	// "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects
	// are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*"
	// means that there are no scope restrictions. Subresources match the scope of their parent
	// resource. Default is "*".
	Scope *string `pulumi:"scope"`

}

var _RuleWithOperationsType = reflect.TypeOf((*RuleWithOperations)(nil)).Elem()

// RuleWithOperationsInput represents an input type that resolves to a RuleWithOperations.
type RuleWithOperationsInput interface {
	ElementType() reflect.Type

	ToRuleWithOperationsOutput() RuleWithOperationsOutput
	ToRuleWithOperationsOutputWithContext(ctx context.Context) RuleWithOperationsOutput
}

// RuleWithOperationsArgs is a RuleWithOperationsInput whose fields are all Input types.
type RuleWithOperationsArgs struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the
	// length of the slice must be one. Required.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`

	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present,
	// the length of the slice must be one. Required.
	ApiVersions pulumi.StringArrayInput `pulumi:"apiVersions"`

	// Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all
	// operations. If '*' is present, the length of the slice must be one. Required.
	Operations pulumi.StringArrayInput `pulumi:"operations"`

	// Resources is a list of resources this rule applies to.
	// 
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all
	// resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all
	// scale subresources. '*/*' means all resources and their subresources.
	// 
	// If wildcard is present, the validation rule will ensure resources do not overlap with each
	// other.
	// 
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources pulumi.StringArrayInput `pulumi:"resources"`

	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*"
	// "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects
	// are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*"
	// means that there are no scope restrictions. Subresources match the scope of their parent
	// resource. Default is "*".
	Scope pulumi.StringInput `pulumi:"scope"`

}

func (a RuleWithOperationsArgs) ElementType() reflect.Type {
	return _RuleWithOperationsType
}

func (a RuleWithOperationsArgs) ToRuleWithOperationsOutput() RuleWithOperationsOutput {
	return pulumi.ToOutput(a).(RuleWithOperationsOutput)
}

func (a RuleWithOperationsArgs) ToRuleWithOperationsOutputWithContext(ctx context.Context) RuleWithOperationsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RuleWithOperationsOutput)
}

// RuleWithOperationsOutput is an output type that resolves to a Input.
type RuleWithOperationsOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(RuleWithOperationsOutput{}) }

func (RuleWithOperationsOutput) ElementType() reflect.Type {
	return _RuleWithOperationsType
}

func (o RuleWithOperationsOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.Apply(func(v RuleWithOperations) []string {
		return v.ApiGroups
	}).(pulumi.StringArrayOutput)
}

func (o RuleWithOperationsOutput) ApiVersions() pulumi.StringArrayOutput {
	return o.Apply(func(v RuleWithOperations) []string {
		return v.ApiVersions
	}).(pulumi.StringArrayOutput)
}

func (o RuleWithOperationsOutput) Operations() pulumi.StringArrayOutput {
	return o.Apply(func(v RuleWithOperations) []string {
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

func (o RuleWithOperationsOutput) Resources() pulumi.StringArrayOutput {
	return o.Apply(func(v RuleWithOperations) []string {
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

func (o RuleWithOperationsOutput) Scope() pulumi.StringOutput {
	return o.Apply(func(v RuleWithOperations) *string {
		return v.Scope
	}).(pulumi.StringOutput)
}

var _RuleWithOperationsArrayType = reflect.TypeOf((*[]RuleWithOperations)(nil)).Elem()

type RuleWithOperationsArrayInput interface {
	ElementType() reflect.Type

	ToRuleWithOperationsArrayOutput() RuleWithOperationsArrayOutput
	ToRuleWithOperationsArrayOutputWithContext(ctx context.Context) RuleWithOperationsArrayOutput
}

type RuleWithOperationsArray []RuleWithOperationsInput

func (a RuleWithOperationsArray) ElementType() reflect.Type {
	return _RuleWithOperationsArrayType
}

func (a RuleWithOperationsArray) ToRuleWithOperationsArrayOutput() RuleWithOperationsArrayOutput {
	return pulumi.ToOutput(a).(RuleWithOperationsArrayOutput)
}

func (a RuleWithOperationsArray) ToRuleWithOperationsArrayOutputWithContext(ctx context.Context) RuleWithOperationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RuleWithOperationsArrayOutput)
}

type RuleWithOperationsArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(RuleWithOperationsArrayOutput{}) }

func (RuleWithOperationsArrayOutput) ElementType() reflect.Type {
	return _RuleWithOperationsArrayType
}

func (o RuleWithOperationsArrayOutput) Index(i pulumi.IntInput) RuleWithOperationsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) RuleWithOperations {
		return vs[0].([]RuleWithOperations)[vs[1].(int)]
	}).(RuleWithOperationsOutput)
}
