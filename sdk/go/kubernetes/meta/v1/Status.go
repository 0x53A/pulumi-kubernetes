// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Status is a return value for calls that don't return other objects.
type Status struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Suggested HTTP return code for this status, 0 if not set.
	Code pulumi.IntOutput `pulumi:"code"`

	// Extended data associated with the reason.  Each reason may define its own extended details. This
	// field is optional and the data returned is not guaranteed to conform to any schema except that
	// defined by the reason type.
	Details StatusDetailsOutput `pulumi:"details"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// A human-readable description of the status of this operation.
	Message pulumi.StringOutput `pulumi:"message"`

	// Standard list metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata ListMetaOutput `pulumi:"metadata"`

	// A machine-readable description of why this operation is in the "Failure" status. If this value
	// is empty there is no information available. A Reason clarifies an HTTP status code but does not
	// override it.
	Reason pulumi.StringOutput `pulumi:"reason"`

	// Status of the operation. One of: "Success" or "Failure". More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status pulumi.StringOutput `pulumi:"status"`

}

// StatusArgs is the set of arguments needed to create a Status resource.
type StatusArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Suggested HTTP return code for this status, 0 if not set.
	Code pulumi.IntInput `pulumi:"code"`

	// Extended data associated with the reason.  Each reason may define its own extended details. This
	// field is optional and the data returned is not guaranteed to conform to any schema except that
	// defined by the reason type.
	Details StatusDetailsInput `pulumi:"details"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// A human-readable description of the status of this operation.
	Message pulumi.StringInput `pulumi:"message"`

	// Standard list metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata ListMetaInput `pulumi:"metadata"`

	// A machine-readable description of why this operation is in the "Failure" status. If this value
	// is empty there is no information available. A Reason clarifies an HTTP status code but does not
	// override it.
	Reason pulumi.StringInput `pulumi:"reason"`

}

// NewStatus creates a Status resource with the given unique name, arguments, and options.
func NewStatus(ctx *pulumi.Context, name string, args *StatusArgs, opts ...pulumi.ResourceOption) (*Status, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("Status")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Code; i != nil {
			inputs["code"] = i.ToIntOutput()
		}
		if i := args.Details; i != nil {
			inputs["details"] = i.ToStatusDetailsOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Message; i != nil {
			inputs["message"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToListMetaOutput()
		}
		if i := args.Reason; i != nil {
			inputs["reason"] = i.ToStringOutput()
		}
	}
	var resource Status
	err := ctx.RegisterResource("kubernetes:core/v1:Status", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStatus gets an existing Status resource's state with the given name and ID.
func GetStatus(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Status, error) {
	var resource Status
	err := ctx.ReadResource("kubernetes:core/v1:Status", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

