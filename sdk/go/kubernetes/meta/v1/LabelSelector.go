// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null label selector
// matches no objects.
type LabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []LabelSelectorRequirement `pulumi:"matchExpressions"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In",
	// and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`

}

var _LabelSelectorType = reflect.TypeOf((*LabelSelector)(nil)).Elem()

// LabelSelectorInput represents an input type that resolves to a LabelSelector.
type LabelSelectorInput interface {
	ElementType() reflect.Type

	ToLabelSelectorOutput() LabelSelectorOutput
	ToLabelSelectorOutputWithContext(ctx context.Context) LabelSelectorOutput
}

// LabelSelectorArgs is a LabelSelectorInput whose fields are all Input types.
type LabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions LabelSelectorRequirementArrayInput `pulumi:"matchExpressions"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In",
	// and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`

}

func (a LabelSelectorArgs) ElementType() reflect.Type {
	return _LabelSelectorType
}

func (a LabelSelectorArgs) ToLabelSelectorOutput() LabelSelectorOutput {
	return pulumi.ToOutput(a).(LabelSelectorOutput)
}

func (a LabelSelectorArgs) ToLabelSelectorOutputWithContext(ctx context.Context) LabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LabelSelectorOutput)
}

// LabelSelectorOutput is an output type that resolves to a Input.
type LabelSelectorOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LabelSelectorOutput{}) }

func (LabelSelectorOutput) ElementType() reflect.Type {
	return _LabelSelectorType
}

func (o LabelSelectorOutput) MatchExpressions() LabelSelectorRequirementArrayOutput {
	return o.Apply(func(v LabelSelector) []LabelSelectorRequirement {
		return v.MatchExpressions
	}).(LabelSelectorRequirementArrayOutput)
}

func (o LabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.Apply(func(v LabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

var _LabelSelectorArrayType = reflect.TypeOf((*[]LabelSelector)(nil)).Elem()

type LabelSelectorArrayInput interface {
	ElementType() reflect.Type

	ToLabelSelectorArrayOutput() LabelSelectorArrayOutput
	ToLabelSelectorArrayOutputWithContext(ctx context.Context) LabelSelectorArrayOutput
}

type LabelSelectorArray []LabelSelectorInput

func (a LabelSelectorArray) ElementType() reflect.Type {
	return _LabelSelectorArrayType
}

func (a LabelSelectorArray) ToLabelSelectorArrayOutput() LabelSelectorArrayOutput {
	return pulumi.ToOutput(a).(LabelSelectorArrayOutput)
}

func (a LabelSelectorArray) ToLabelSelectorArrayOutputWithContext(ctx context.Context) LabelSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LabelSelectorArrayOutput)
}

type LabelSelectorArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LabelSelectorArrayOutput{}) }

func (LabelSelectorArrayOutput) ElementType() reflect.Type {
	return _LabelSelectorArrayType
}

func (o LabelSelectorArrayOutput) Index(i pulumi.IntInput) LabelSelectorOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) LabelSelector {
		return vs[0].([]LabelSelector)[vs[1].(int)]
	}).(LabelSelectorOutput)
}
