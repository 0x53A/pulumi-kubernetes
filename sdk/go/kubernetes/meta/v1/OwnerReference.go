// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// OwnerReference contains enough information to let you identify an owning object. An owning object
// must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace
// field.
type OwnerReference struct {
	// API version of the referent.
	ApiVersion string `pulumi:"apiVersion"`

	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be
	// deleted from the key-value store until this reference is removed. Defaults to false. To set this
	// field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will
	// be returned.
	BlockOwnerDeletion *bool `pulumi:"blockOwnerDeletion"`

	// If true, this reference points to the managing controller.
	Controller *bool `pulumi:"controller"`

	// Kind of the referent. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`

	// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name string `pulumi:"name"`

	// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid string `pulumi:"uid"`

}

var _OwnerReferenceType = reflect.TypeOf((*OwnerReference)(nil)).Elem()

// OwnerReferenceInput represents an input type that resolves to a OwnerReference.
type OwnerReferenceInput interface {
	ElementType() reflect.Type

	ToOwnerReferenceOutput() OwnerReferenceOutput
	ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput
}

// OwnerReferenceArgs is a OwnerReferenceInput whose fields are all Input types.
type OwnerReferenceArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind of the referent. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringInput `pulumi:"name"`

	// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid pulumi.StringInput `pulumi:"uid"`

	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be
	// deleted from the key-value store until this reference is removed. Defaults to false. To set this
	// field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will
	// be returned.
	BlockOwnerDeletion pulumi.BoolInput `pulumi:"blockOwnerDeletion"`

	// If true, this reference points to the managing controller.
	Controller pulumi.BoolInput `pulumi:"controller"`

}

func (a OwnerReferenceArgs) ElementType() reflect.Type {
	return _OwnerReferenceType
}

func (a OwnerReferenceArgs) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return pulumi.ToOutput(a).(OwnerReferenceOutput)
}

func (a OwnerReferenceArgs) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(OwnerReferenceOutput)
}

// OwnerReferenceOutput is an output type that resolves to a Input.
type OwnerReferenceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(OwnerReferenceOutput{}) }

func (OwnerReferenceOutput) ElementType() reflect.Type {
	return _OwnerReferenceType
}

func (o OwnerReferenceOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v OwnerReference) string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o OwnerReferenceOutput) BlockOwnerDeletion() pulumi.BoolOutput {
	return o.Apply(func(v OwnerReference) *bool {
		return v.BlockOwnerDeletion
	}).(pulumi.BoolOutput)
}

func (o OwnerReferenceOutput) Controller() pulumi.BoolOutput {
	return o.Apply(func(v OwnerReference) *bool {
		return v.Controller
	}).(pulumi.BoolOutput)
}

func (o OwnerReferenceOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v OwnerReference) string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o OwnerReferenceOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v OwnerReference) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o OwnerReferenceOutput) Uid() pulumi.StringOutput {
	return o.Apply(func(v OwnerReference) string {
		return v.Uid
	}).(pulumi.StringOutput)
}

var _OwnerReferenceArrayType = reflect.TypeOf((*[]OwnerReference)(nil)).Elem()

type OwnerReferenceArrayInput interface {
	ElementType() reflect.Type

	ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput
	ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput
}

type OwnerReferenceArray []OwnerReferenceInput

func (a OwnerReferenceArray) ElementType() reflect.Type {
	return _OwnerReferenceArrayType
}

func (a OwnerReferenceArray) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return pulumi.ToOutput(a).(OwnerReferenceArrayOutput)
}

func (a OwnerReferenceArray) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(OwnerReferenceArrayOutput)
}

type OwnerReferenceArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(OwnerReferenceArrayOutput{}) }

func (OwnerReferenceArrayOutput) ElementType() reflect.Type {
	return _OwnerReferenceArrayType
}

func (o OwnerReferenceArrayOutput) Index(i pulumi.IntInput) OwnerReferenceOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) OwnerReference {
		return vs[0].([]OwnerReference)[vs[1].(int)]
	}).(OwnerReferenceOutput)
}
