// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type LabelSelectorRequirement struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn,
	// Exists and DoesNotExist.
	Operator string `pulumi:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`

}

var _LabelSelectorRequirementType = reflect.TypeOf((*LabelSelectorRequirement)(nil)).Elem()

// LabelSelectorRequirementInput represents an input type that resolves to a LabelSelectorRequirement.
type LabelSelectorRequirementInput interface {
	ElementType() reflect.Type

	ToLabelSelectorRequirementOutput() LabelSelectorRequirementOutput
	ToLabelSelectorRequirementOutputWithContext(ctx context.Context) LabelSelectorRequirementOutput
}

// LabelSelectorRequirementArgs is a LabelSelectorRequirementInput whose fields are all Input types.
type LabelSelectorRequirementArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn,
	// Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`

}

func (a LabelSelectorRequirementArgs) ElementType() reflect.Type {
	return _LabelSelectorRequirementType
}

func (a LabelSelectorRequirementArgs) ToLabelSelectorRequirementOutput() LabelSelectorRequirementOutput {
	return pulumi.ToOutput(a).(LabelSelectorRequirementOutput)
}

func (a LabelSelectorRequirementArgs) ToLabelSelectorRequirementOutputWithContext(ctx context.Context) LabelSelectorRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LabelSelectorRequirementOutput)
}

// LabelSelectorRequirementOutput is an output type that resolves to a Input.
type LabelSelectorRequirementOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LabelSelectorRequirementOutput{}) }

func (LabelSelectorRequirementOutput) ElementType() reflect.Type {
	return _LabelSelectorRequirementType
}

func (o LabelSelectorRequirementOutput) Key() pulumi.StringOutput {
	return o.Apply(func(v LabelSelectorRequirement) string {
		return v.Key
	}).(pulumi.StringOutput)
}

func (o LabelSelectorRequirementOutput) Operator() pulumi.StringOutput {
	return o.Apply(func(v LabelSelectorRequirement) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

func (o LabelSelectorRequirementOutput) Values() pulumi.StringArrayOutput {
	return o.Apply(func(v LabelSelectorRequirement) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

var _LabelSelectorRequirementArrayType = reflect.TypeOf((*[]LabelSelectorRequirement)(nil)).Elem()

type LabelSelectorRequirementArrayInput interface {
	ElementType() reflect.Type

	ToLabelSelectorRequirementArrayOutput() LabelSelectorRequirementArrayOutput
	ToLabelSelectorRequirementArrayOutputWithContext(ctx context.Context) LabelSelectorRequirementArrayOutput
}

type LabelSelectorRequirementArray []LabelSelectorRequirementInput

func (a LabelSelectorRequirementArray) ElementType() reflect.Type {
	return _LabelSelectorRequirementArrayType
}

func (a LabelSelectorRequirementArray) ToLabelSelectorRequirementArrayOutput() LabelSelectorRequirementArrayOutput {
	return pulumi.ToOutput(a).(LabelSelectorRequirementArrayOutput)
}

func (a LabelSelectorRequirementArray) ToLabelSelectorRequirementArrayOutputWithContext(ctx context.Context) LabelSelectorRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LabelSelectorRequirementArrayOutput)
}

type LabelSelectorRequirementArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LabelSelectorRequirementArrayOutput{}) }

func (LabelSelectorRequirementArrayOutput) ElementType() reflect.Type {
	return _LabelSelectorRequirementArrayType
}

func (o LabelSelectorRequirementArrayOutput) Index(i pulumi.IntInput) LabelSelectorRequirementOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) LabelSelectorRequirement {
		return vs[0].([]LabelSelectorRequirement)[vs[1].(int)]
	}).(LabelSelectorRequirementOutput)
}
