// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Event represents a single event to a watched resource.
type WatchEvent struct {
	// Object is:
	//  * If Type is Added or Modified: the new state of the object.
	//  * If Type is Deleted: the state of the object immediately before deletion.
	//  * If Type is Error: *Status is recommended; other types may make sense
	//    depending on context.
	Object interface{} `pulumi:"object"`

	
	Type string `pulumi:"type"`

}

var _WatchEventType = reflect.TypeOf((*WatchEvent)(nil)).Elem()

// WatchEventInput represents an input type that resolves to a WatchEvent.
type WatchEventInput interface {
	ElementType() reflect.Type

	ToWatchEventOutput() WatchEventOutput
	ToWatchEventOutputWithContext(ctx context.Context) WatchEventOutput
}

// WatchEventArgs is a WatchEventInput whose fields are all Input types.
type WatchEventArgs struct {
	// Object is:
	//  * If Type is Added or Modified: the new state of the object.
	//  * If Type is Deleted: the state of the object immediately before deletion.
	//  * If Type is Error: *Status is recommended; other types may make sense
	//    depending on context.
	Object pulumi.Input `pulumi:"object"`

	
	Type pulumi.StringInput `pulumi:"type"`

}

func (a WatchEventArgs) ElementType() reflect.Type {
	return _WatchEventType
}

func (a WatchEventArgs) ToWatchEventOutput() WatchEventOutput {
	return pulumi.ToOutput(a).(WatchEventOutput)
}

func (a WatchEventArgs) ToWatchEventOutputWithContext(ctx context.Context) WatchEventOutput {
	return pulumi.ToOutputWithContext(ctx, a).(WatchEventOutput)
}

// WatchEventOutput is an output type that resolves to a Input.
type WatchEventOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(WatchEventOutput{}) }

func (WatchEventOutput) ElementType() reflect.Type {
	return _WatchEventType
}

func (o WatchEventOutput) Object() pulumi.AnyOutput {
	return o.Apply(func(v WatchEvent) interface{} {
		return v.Object
	}).(pulumi.AnyOutput)
}

func (o WatchEventOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v WatchEvent) string {
		return v.Type
	}).(pulumi.StringOutput)
}

