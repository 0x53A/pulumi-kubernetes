// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// APIResource specifies the name of a resource and whether it is namespaced.
type APIResource struct {
	// categories is a list of the grouped resources this resource belongs to (e.g. 'all')
	Categories []string `pulumi:"categories"`

	// group is the preferred group of the resource.  Empty implies the group of the containing
	// resource list. For subresources, this may have a different value, for example: Scale".
	Group *string `pulumi:"group"`

	// kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
	Kind string `pulumi:"kind"`

	// name is the plural name of the resource.
	Name string `pulumi:"name"`

	// namespaced indicates if a resource is namespaced or not.
	Namespaced bool `pulumi:"namespaced"`

	// shortNames is a list of suggested short names of the resource.
	ShortNames []string `pulumi:"shortNames"`

	// singularName is the singular name of the resource.  This allows clients to handle plural and
	// singular opaquely. The singularName is more correct for reporting status on a single item and
	// both singular and plural are allowed from the kubectl CLI interface.
	SingularName string `pulumi:"singularName"`

	// The hash value of the storage version, the version this resource is converted to when written to
	// the data store. Value must be treated as opaque by clients. Only equality comparison on the
	// value is valid. This is an alpha feature and may change or be removed in the future. The field
	// is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field
	// will remain optional even if it graduates.
	StorageVersionHash *string `pulumi:"storageVersionHash"`

	// verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch,
	// delete, deletecollection, and proxy)
	Verbs []string `pulumi:"verbs"`

	// version is the preferred version of the resource.  Empty implies the version of the containing
	// resource list For subresources, this may have a different value, for example: v1 (while inside a
	// v1beta1 version of the core resource's group)".
	Version *string `pulumi:"version"`

}

var _APIResourceType = reflect.TypeOf((*APIResource)(nil)).Elem()

// APIResourceInput represents an input type that resolves to a APIResource.
type APIResourceInput interface {
	ElementType() reflect.Type

	ToAPIResourceOutput() APIResourceOutput
	ToAPIResourceOutputWithContext(ctx context.Context) APIResourceOutput
}

// APIResourceArgs is a APIResourceInput whose fields are all Input types.
type APIResourceArgs struct {
	// kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
	Kind pulumi.StringInput `pulumi:"kind"`

	// name is the plural name of the resource.
	Name pulumi.StringInput `pulumi:"name"`

	// namespaced indicates if a resource is namespaced or not.
	Namespaced pulumi.BoolInput `pulumi:"namespaced"`

	// singularName is the singular name of the resource.  This allows clients to handle plural and
	// singular opaquely. The singularName is more correct for reporting status on a single item and
	// both singular and plural are allowed from the kubectl CLI interface.
	SingularName pulumi.StringInput `pulumi:"singularName"`

	// verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch,
	// delete, deletecollection, and proxy)
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`

	// categories is a list of the grouped resources this resource belongs to (e.g. 'all')
	Categories pulumi.StringArrayInput `pulumi:"categories"`

	// group is the preferred group of the resource.  Empty implies the group of the containing
	// resource list. For subresources, this may have a different value, for example: Scale".
	Group pulumi.StringInput `pulumi:"group"`

	// shortNames is a list of suggested short names of the resource.
	ShortNames pulumi.StringArrayInput `pulumi:"shortNames"`

	// The hash value of the storage version, the version this resource is converted to when written to
	// the data store. Value must be treated as opaque by clients. Only equality comparison on the
	// value is valid. This is an alpha feature and may change or be removed in the future. The field
	// is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field
	// will remain optional even if it graduates.
	StorageVersionHash pulumi.StringInput `pulumi:"storageVersionHash"`

	// version is the preferred version of the resource.  Empty implies the version of the containing
	// resource list For subresources, this may have a different value, for example: v1 (while inside a
	// v1beta1 version of the core resource's group)".
	Version pulumi.StringInput `pulumi:"version"`

}

func (a APIResourceArgs) ElementType() reflect.Type {
	return _APIResourceType
}

func (a APIResourceArgs) ToAPIResourceOutput() APIResourceOutput {
	return pulumi.ToOutput(a).(APIResourceOutput)
}

func (a APIResourceArgs) ToAPIResourceOutputWithContext(ctx context.Context) APIResourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(APIResourceOutput)
}

// APIResourceOutput is an output type that resolves to a Input.
type APIResourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(APIResourceOutput{}) }

func (APIResourceOutput) ElementType() reflect.Type {
	return _APIResourceType
}

func (o APIResourceOutput) Categories() pulumi.StringArrayOutput {
	return o.Apply(func(v APIResource) []string {
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

func (o APIResourceOutput) Group() pulumi.StringOutput {
	return o.Apply(func(v APIResource) *string {
		return v.Group
	}).(pulumi.StringOutput)
}

func (o APIResourceOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v APIResource) string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o APIResourceOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v APIResource) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o APIResourceOutput) Namespaced() pulumi.BoolOutput {
	return o.Apply(func(v APIResource) bool {
		return v.Namespaced
	}).(pulumi.BoolOutput)
}

func (o APIResourceOutput) ShortNames() pulumi.StringArrayOutput {
	return o.Apply(func(v APIResource) []string {
		return v.ShortNames
	}).(pulumi.StringArrayOutput)
}

func (o APIResourceOutput) SingularName() pulumi.StringOutput {
	return o.Apply(func(v APIResource) string {
		return v.SingularName
	}).(pulumi.StringOutput)
}

func (o APIResourceOutput) StorageVersionHash() pulumi.StringOutput {
	return o.Apply(func(v APIResource) *string {
		return v.StorageVersionHash
	}).(pulumi.StringOutput)
}

func (o APIResourceOutput) Verbs() pulumi.StringArrayOutput {
	return o.Apply(func(v APIResource) []string {
		return v.Verbs
	}).(pulumi.StringArrayOutput)
}

func (o APIResourceOutput) Version() pulumi.StringOutput {
	return o.Apply(func(v APIResource) *string {
		return v.Version
	}).(pulumi.StringOutput)
}

var _APIResourceArrayType = reflect.TypeOf((*[]APIResource)(nil)).Elem()

type APIResourceArrayInput interface {
	ElementType() reflect.Type

	ToAPIResourceArrayOutput() APIResourceArrayOutput
	ToAPIResourceArrayOutputWithContext(ctx context.Context) APIResourceArrayOutput
}

type APIResourceArray []APIResourceInput

func (a APIResourceArray) ElementType() reflect.Type {
	return _APIResourceArrayType
}

func (a APIResourceArray) ToAPIResourceArrayOutput() APIResourceArrayOutput {
	return pulumi.ToOutput(a).(APIResourceArrayOutput)
}

func (a APIResourceArray) ToAPIResourceArrayOutputWithContext(ctx context.Context) APIResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(APIResourceArrayOutput)
}

type APIResourceArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(APIResourceArrayOutput{}) }

func (APIResourceArrayOutput) ElementType() reflect.Type {
	return _APIResourceArrayType
}

func (o APIResourceArrayOutput) Index(i pulumi.IntInput) APIResourceOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) APIResource {
		return vs[0].([]APIResource)[vs[1].(int)]
	}).(APIResourceOutput)
}
