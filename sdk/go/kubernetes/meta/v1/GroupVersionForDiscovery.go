// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// GroupVersion contains the "group/version" and "version" string of a version. It is made a struct
// to keep extensibility.
type GroupVersionForDiscovery struct {
	// groupVersion specifies the API group and version in the form "group/version"
	GroupVersion string `pulumi:"groupVersion"`

	// version specifies the version in the form of "version". This is to save the clients the trouble
	// of splitting the GroupVersion.
	Version string `pulumi:"version"`

}

var _GroupVersionForDiscoveryType = reflect.TypeOf((*GroupVersionForDiscovery)(nil)).Elem()

// GroupVersionForDiscoveryInput represents an input type that resolves to a GroupVersionForDiscovery.
type GroupVersionForDiscoveryInput interface {
	ElementType() reflect.Type

	ToGroupVersionForDiscoveryOutput() GroupVersionForDiscoveryOutput
	ToGroupVersionForDiscoveryOutputWithContext(ctx context.Context) GroupVersionForDiscoveryOutput
}

// GroupVersionForDiscoveryArgs is a GroupVersionForDiscoveryInput whose fields are all Input types.
type GroupVersionForDiscoveryArgs struct {
	// groupVersion specifies the API group and version in the form "group/version"
	GroupVersion pulumi.StringInput `pulumi:"groupVersion"`

	// version specifies the version in the form of "version". This is to save the clients the trouble
	// of splitting the GroupVersion.
	Version pulumi.StringInput `pulumi:"version"`

}

func (a GroupVersionForDiscoveryArgs) ElementType() reflect.Type {
	return _GroupVersionForDiscoveryType
}

func (a GroupVersionForDiscoveryArgs) ToGroupVersionForDiscoveryOutput() GroupVersionForDiscoveryOutput {
	return pulumi.ToOutput(a).(GroupVersionForDiscoveryOutput)
}

func (a GroupVersionForDiscoveryArgs) ToGroupVersionForDiscoveryOutputWithContext(ctx context.Context) GroupVersionForDiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, a).(GroupVersionForDiscoveryOutput)
}

// GroupVersionForDiscoveryOutput is an output type that resolves to a Input.
type GroupVersionForDiscoveryOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(GroupVersionForDiscoveryOutput{}) }

func (GroupVersionForDiscoveryOutput) ElementType() reflect.Type {
	return _GroupVersionForDiscoveryType
}

func (o GroupVersionForDiscoveryOutput) GroupVersion() pulumi.StringOutput {
	return o.Apply(func(v GroupVersionForDiscovery) string {
		return v.GroupVersion
	}).(pulumi.StringOutput)
}

func (o GroupVersionForDiscoveryOutput) Version() pulumi.StringOutput {
	return o.Apply(func(v GroupVersionForDiscovery) string {
		return v.Version
	}).(pulumi.StringOutput)
}

var _GroupVersionForDiscoveryArrayType = reflect.TypeOf((*[]GroupVersionForDiscovery)(nil)).Elem()

type GroupVersionForDiscoveryArrayInput interface {
	ElementType() reflect.Type

	ToGroupVersionForDiscoveryArrayOutput() GroupVersionForDiscoveryArrayOutput
	ToGroupVersionForDiscoveryArrayOutputWithContext(ctx context.Context) GroupVersionForDiscoveryArrayOutput
}

type GroupVersionForDiscoveryArray []GroupVersionForDiscoveryInput

func (a GroupVersionForDiscoveryArray) ElementType() reflect.Type {
	return _GroupVersionForDiscoveryArrayType
}

func (a GroupVersionForDiscoveryArray) ToGroupVersionForDiscoveryArrayOutput() GroupVersionForDiscoveryArrayOutput {
	return pulumi.ToOutput(a).(GroupVersionForDiscoveryArrayOutput)
}

func (a GroupVersionForDiscoveryArray) ToGroupVersionForDiscoveryArrayOutputWithContext(ctx context.Context) GroupVersionForDiscoveryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(GroupVersionForDiscoveryArrayOutput)
}

type GroupVersionForDiscoveryArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(GroupVersionForDiscoveryArrayOutput{}) }

func (GroupVersionForDiscoveryArrayOutput) ElementType() reflect.Type {
	return _GroupVersionForDiscoveryArrayType
}

func (o GroupVersionForDiscoveryArrayOutput) Index(i pulumi.IntInput) GroupVersionForDiscoveryOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) GroupVersionForDiscovery {
		return vs[0].([]GroupVersionForDiscovery)[vs[1].(int)]
	}).(GroupVersionForDiscoveryOutput)
}
