// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// DEPRECATED 1.9 - This group version of NetworkPolicyPort is deprecated by
// networking/v1/NetworkPolicyPort.
type NetworkPolicyPort struct {
	// If specified, the port on the given protocol.  This can either be a numerical or named port on a
	// pod.  If this field is not provided, this matches all port names and numbers. If present, only
	// traffic on the specified protocol AND port will be matched.
	Port interface{} `pulumi:"port"`

	// Optional.  The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this
	// field defaults to TCP.
	Protocol *string `pulumi:"protocol"`

}

var _NetworkPolicyPortType = reflect.TypeOf((*NetworkPolicyPort)(nil)).Elem()

// NetworkPolicyPortInput represents an input type that resolves to a NetworkPolicyPort.
type NetworkPolicyPortInput interface {
	ElementType() reflect.Type

	ToNetworkPolicyPortOutput() NetworkPolicyPortOutput
	ToNetworkPolicyPortOutputWithContext(ctx context.Context) NetworkPolicyPortOutput
}

// NetworkPolicyPortArgs is a NetworkPolicyPortInput whose fields are all Input types.
type NetworkPolicyPortArgs struct {
	// If specified, the port on the given protocol.  This can either be a numerical or named port on a
	// pod.  If this field is not provided, this matches all port names and numbers. If present, only
	// traffic on the specified protocol AND port will be matched.
	Port pulumi.Input `pulumi:"port"`

	// Optional.  The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this
	// field defaults to TCP.
	Protocol pulumi.StringInput `pulumi:"protocol"`

}

func (a NetworkPolicyPortArgs) ElementType() reflect.Type {
	return _NetworkPolicyPortType
}

func (a NetworkPolicyPortArgs) ToNetworkPolicyPortOutput() NetworkPolicyPortOutput {
	return pulumi.ToOutput(a).(NetworkPolicyPortOutput)
}

func (a NetworkPolicyPortArgs) ToNetworkPolicyPortOutputWithContext(ctx context.Context) NetworkPolicyPortOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkPolicyPortOutput)
}

// NetworkPolicyPortOutput is an output type that resolves to a Input.
type NetworkPolicyPortOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NetworkPolicyPortOutput{}) }

func (NetworkPolicyPortOutput) ElementType() reflect.Type {
	return _NetworkPolicyPortType
}

func (o NetworkPolicyPortOutput) Port() pulumi.AnyOutput {
	return o.Apply(func(v NetworkPolicyPort) interface{} {
		return v.Port
	}).(pulumi.AnyOutput)
}

func (o NetworkPolicyPortOutput) Protocol() pulumi.StringOutput {
	return o.Apply(func(v NetworkPolicyPort) *string {
		return v.Protocol
	}).(pulumi.StringOutput)
}

var _NetworkPolicyPortArrayType = reflect.TypeOf((*[]NetworkPolicyPort)(nil)).Elem()

type NetworkPolicyPortArrayInput interface {
	ElementType() reflect.Type

	ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput
	ToNetworkPolicyPortArrayOutputWithContext(ctx context.Context) NetworkPolicyPortArrayOutput
}

type NetworkPolicyPortArray []NetworkPolicyPortInput

func (a NetworkPolicyPortArray) ElementType() reflect.Type {
	return _NetworkPolicyPortArrayType
}

func (a NetworkPolicyPortArray) ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput {
	return pulumi.ToOutput(a).(NetworkPolicyPortArrayOutput)
}

func (a NetworkPolicyPortArray) ToNetworkPolicyPortArrayOutputWithContext(ctx context.Context) NetworkPolicyPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkPolicyPortArrayOutput)
}

type NetworkPolicyPortArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NetworkPolicyPortArrayOutput{}) }

func (NetworkPolicyPortArrayOutput) ElementType() reflect.Type {
	return _NetworkPolicyPortArrayType
}

func (o NetworkPolicyPortArrayOutput) Index(i pulumi.IntInput) NetworkPolicyPortOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NetworkPolicyPort {
		return vs[0].([]NetworkPolicyPort)[vs[1].(int)]
	}).(NetworkPolicyPortOutput)
}
