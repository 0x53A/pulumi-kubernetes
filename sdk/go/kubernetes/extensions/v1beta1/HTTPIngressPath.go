// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are
// forwarded to the backend.
type HTTPIngressPath struct {
	// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
	Backend IngressBackend `pulumi:"backend"`

	// Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix
	// syntax, not the perl syntax) matched against the path of an incoming request. Currently it can
	// contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.
	// Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to
	// the backend.
	Path *string `pulumi:"path"`

}

var _HTTPIngressPathType = reflect.TypeOf((*HTTPIngressPath)(nil)).Elem()

// HTTPIngressPathInput represents an input type that resolves to a HTTPIngressPath.
type HTTPIngressPathInput interface {
	ElementType() reflect.Type

	ToHTTPIngressPathOutput() HTTPIngressPathOutput
	ToHTTPIngressPathOutputWithContext(ctx context.Context) HTTPIngressPathOutput
}

// HTTPIngressPathArgs is a HTTPIngressPathInput whose fields are all Input types.
type HTTPIngressPathArgs struct {
	// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
	Backend IngressBackendInput `pulumi:"backend"`

	// Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix
	// syntax, not the perl syntax) matched against the path of an incoming request. Currently it can
	// contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.
	// Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to
	// the backend.
	Path pulumi.StringInput `pulumi:"path"`

}

func (a HTTPIngressPathArgs) ElementType() reflect.Type {
	return _HTTPIngressPathType
}

func (a HTTPIngressPathArgs) ToHTTPIngressPathOutput() HTTPIngressPathOutput {
	return pulumi.ToOutput(a).(HTTPIngressPathOutput)
}

func (a HTTPIngressPathArgs) ToHTTPIngressPathOutputWithContext(ctx context.Context) HTTPIngressPathOutput {
	return pulumi.ToOutputWithContext(ctx, a).(HTTPIngressPathOutput)
}

// HTTPIngressPathOutput is an output type that resolves to a Input.
type HTTPIngressPathOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(HTTPIngressPathOutput{}) }

func (HTTPIngressPathOutput) ElementType() reflect.Type {
	return _HTTPIngressPathType
}

func (o HTTPIngressPathOutput) Backend() IngressBackendOutput {
	return o.Apply(func(v HTTPIngressPath) IngressBackend {
		return v.Backend
	}).(IngressBackendOutput)
}

func (o HTTPIngressPathOutput) Path() pulumi.StringOutput {
	return o.Apply(func(v HTTPIngressPath) *string {
		return v.Path
	}).(pulumi.StringOutput)
}

var _HTTPIngressPathArrayType = reflect.TypeOf((*[]HTTPIngressPath)(nil)).Elem()

type HTTPIngressPathArrayInput interface {
	ElementType() reflect.Type

	ToHTTPIngressPathArrayOutput() HTTPIngressPathArrayOutput
	ToHTTPIngressPathArrayOutputWithContext(ctx context.Context) HTTPIngressPathArrayOutput
}

type HTTPIngressPathArray []HTTPIngressPathInput

func (a HTTPIngressPathArray) ElementType() reflect.Type {
	return _HTTPIngressPathArrayType
}

func (a HTTPIngressPathArray) ToHTTPIngressPathArrayOutput() HTTPIngressPathArrayOutput {
	return pulumi.ToOutput(a).(HTTPIngressPathArrayOutput)
}

func (a HTTPIngressPathArray) ToHTTPIngressPathArrayOutputWithContext(ctx context.Context) HTTPIngressPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(HTTPIngressPathArrayOutput)
}

type HTTPIngressPathArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(HTTPIngressPathArrayOutput{}) }

func (HTTPIngressPathArrayOutput) ElementType() reflect.Type {
	return _HTTPIngressPathArrayType
}

func (o HTTPIngressPathArrayOutput) Index(i pulumi.IntInput) HTTPIngressPathOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) HTTPIngressPath {
		return vs[0].([]HTTPIngressPath)[vs[1].(int)]
	}).(HTTPIngressPathOutput)
}
