// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// IngressRule represents the rules mapping the paths under a specified host to the related backend
// services. Incoming requests are first evaluated for a host match, then routed to the backend
// associated with the matching IngressRuleValue.
type IngressRule struct {
	// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the
	// following deviations from the "host" part of the URI as defined in the RFC: 1. IPs are not
	// allowed. Currently an IngressRuleValue can only apply to the
	// 	  IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// 	  Currently the port of an Ingress is implicitly :80 for http and
	// 	  :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the
	// IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the
	// specified IngressRuleValue.
	Host *string `pulumi:"host"`

	
	Http *HTTPIngressRuleValue `pulumi:"http"`

}

var _IngressRuleType = reflect.TypeOf((*IngressRule)(nil)).Elem()

// IngressRuleInput represents an input type that resolves to a IngressRule.
type IngressRuleInput interface {
	ElementType() reflect.Type

	ToIngressRuleOutput() IngressRuleOutput
	ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput
}

// IngressRuleArgs is a IngressRuleInput whose fields are all Input types.
type IngressRuleArgs struct {
	// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the
	// following deviations from the "host" part of the URI as defined in the RFC: 1. IPs are not
	// allowed. Currently an IngressRuleValue can only apply to the
	// 	  IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// 	  Currently the port of an Ingress is implicitly :80 for http and
	// 	  :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the
	// IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the
	// specified IngressRuleValue.
	Host pulumi.StringInput `pulumi:"host"`

	
	Http HTTPIngressRuleValueInput `pulumi:"http"`

}

func (a IngressRuleArgs) ElementType() reflect.Type {
	return _IngressRuleType
}

func (a IngressRuleArgs) ToIngressRuleOutput() IngressRuleOutput {
	return pulumi.ToOutput(a).(IngressRuleOutput)
}

func (a IngressRuleArgs) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IngressRuleOutput)
}

// IngressRuleOutput is an output type that resolves to a Input.
type IngressRuleOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(IngressRuleOutput{}) }

func (IngressRuleOutput) ElementType() reflect.Type {
	return _IngressRuleType
}

func (o IngressRuleOutput) Host() pulumi.StringOutput {
	return o.Apply(func(v IngressRule) *string {
		return v.Host
	}).(pulumi.StringOutput)
}

func (o IngressRuleOutput) Http() HTTPIngressRuleValueOutput {
	return o.Apply(func(v IngressRule) *HTTPIngressRuleValue {
		return v.Http
	}).(HTTPIngressRuleValueOutput)
}

var _IngressRuleArrayType = reflect.TypeOf((*[]IngressRule)(nil)).Elem()

type IngressRuleArrayInput interface {
	ElementType() reflect.Type

	ToIngressRuleArrayOutput() IngressRuleArrayOutput
	ToIngressRuleArrayOutputWithContext(ctx context.Context) IngressRuleArrayOutput
}

type IngressRuleArray []IngressRuleInput

func (a IngressRuleArray) ElementType() reflect.Type {
	return _IngressRuleArrayType
}

func (a IngressRuleArray) ToIngressRuleArrayOutput() IngressRuleArrayOutput {
	return pulumi.ToOutput(a).(IngressRuleArrayOutput)
}

func (a IngressRuleArray) ToIngressRuleArrayOutputWithContext(ctx context.Context) IngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IngressRuleArrayOutput)
}

type IngressRuleArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(IngressRuleArrayOutput{}) }

func (IngressRuleArrayOutput) ElementType() reflect.Type {
	return _IngressRuleArrayType
}

func (o IngressRuleArrayOutput) Index(i pulumi.IntInput) IngressRuleOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) IngressRule {
		return vs[0].([]IngressRule)[vs[1].(int)]
	}).(IngressRuleOutput)
}
