// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required
// to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as
// any other components that need to understand how the pod will be run. The RuntimeClassSpec is
// immutable.
type RuntimeClassSpec struct {
	// Overhead represents the resource overhead associated with running a pod for a given
	// RuntimeClass. For more details, see
	// https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level
	// as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
	Overhead *Overhead `pulumi:"overhead"`

	// RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation
	// will use to handle pods of this class. The possible values are specific to the node & CRI
	// configuration.  It is assumed that all handlers are available on every node, and handlers of the
	// same name are equivalent on every node. For example, a handler called "runc" might specify that
	// the runc OCI runtime (using native Linux containers) will be used to run the containers in a
	// pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.
	RuntimeHandler string `pulumi:"runtimeHandler"`

	// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass
	// are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be
	// supported by all nodes.
	Scheduling *Scheduling `pulumi:"scheduling"`

}

var _RuntimeClassSpecType = reflect.TypeOf((*RuntimeClassSpec)(nil)).Elem()

// RuntimeClassSpecInput represents an input type that resolves to a RuntimeClassSpec.
type RuntimeClassSpecInput interface {
	ElementType() reflect.Type

	ToRuntimeClassSpecOutput() RuntimeClassSpecOutput
	ToRuntimeClassSpecOutputWithContext(ctx context.Context) RuntimeClassSpecOutput
}

// RuntimeClassSpecArgs is a RuntimeClassSpecInput whose fields are all Input types.
type RuntimeClassSpecArgs struct {
	// RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation
	// will use to handle pods of this class. The possible values are specific to the node & CRI
	// configuration.  It is assumed that all handlers are available on every node, and handlers of the
	// same name are equivalent on every node. For example, a handler called "runc" might specify that
	// the runc OCI runtime (using native Linux containers) will be used to run the containers in a
	// pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.
	RuntimeHandler pulumi.StringInput `pulumi:"runtimeHandler"`

	// Overhead represents the resource overhead associated with running a pod for a given
	// RuntimeClass. For more details, see
	// https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level
	// as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
	Overhead OverheadInput `pulumi:"overhead"`

	// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass
	// are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be
	// supported by all nodes.
	Scheduling SchedulingInput `pulumi:"scheduling"`

}

func (a RuntimeClassSpecArgs) ElementType() reflect.Type {
	return _RuntimeClassSpecType
}

func (a RuntimeClassSpecArgs) ToRuntimeClassSpecOutput() RuntimeClassSpecOutput {
	return pulumi.ToOutput(a).(RuntimeClassSpecOutput)
}

func (a RuntimeClassSpecArgs) ToRuntimeClassSpecOutputWithContext(ctx context.Context) RuntimeClassSpecOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RuntimeClassSpecOutput)
}

// RuntimeClassSpecOutput is an output type that resolves to a Input.
type RuntimeClassSpecOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(RuntimeClassSpecOutput{}) }

func (RuntimeClassSpecOutput) ElementType() reflect.Type {
	return _RuntimeClassSpecType
}

func (o RuntimeClassSpecOutput) Overhead() OverheadOutput {
	return o.Apply(func(v RuntimeClassSpec) *Overhead {
		return v.Overhead
	}).(OverheadOutput)
}

func (o RuntimeClassSpecOutput) RuntimeHandler() pulumi.StringOutput {
	return o.Apply(func(v RuntimeClassSpec) string {
		return v.RuntimeHandler
	}).(pulumi.StringOutput)
}

func (o RuntimeClassSpecOutput) Scheduling() SchedulingOutput {
	return o.Apply(func(v RuntimeClassSpec) *Scheduling {
		return v.Scheduling
	}).(SchedulingOutput)
}

