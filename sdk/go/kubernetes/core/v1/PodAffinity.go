// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Pod affinity is a group of inter pod affinity scheduling rules.
type PodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions
	// specified by this field, but it may choose a node that violates one or more of the expressions.
	// The node that is most preferred is the one with the greatest sum of weights, i.e. for each node
	// that meets all of the scheduling requirements (resource request, requiredDuringScheduling
	// affinity expressions, etc.), compute a sum by iterating through the elements of this field and
	// adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm;
	// the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []WeightedPodAffinityTerm `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`

	// If the affinity requirements specified by this field are not met at scheduling time, the pod
	// will not be scheduled onto the node. If the affinity requirements specified by this field cease
	// to be met at some point during pod execution (e.g. due to a pod label update), the system may or
	// may not try to eventually evict the pod from its node. When there are multiple elements, the
	// lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be
	// satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PodAffinityTerm `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`

}

var _PodAffinityType = reflect.TypeOf((*PodAffinity)(nil)).Elem()

// PodAffinityInput represents an input type that resolves to a PodAffinity.
type PodAffinityInput interface {
	ElementType() reflect.Type

	ToPodAffinityOutput() PodAffinityOutput
	ToPodAffinityOutputWithContext(ctx context.Context) PodAffinityOutput
}

// PodAffinityArgs is a PodAffinityInput whose fields are all Input types.
type PodAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions
	// specified by this field, but it may choose a node that violates one or more of the expressions.
	// The node that is most preferred is the one with the greatest sum of weights, i.e. for each node
	// that meets all of the scheduling requirements (resource request, requiredDuringScheduling
	// affinity expressions, etc.), compute a sum by iterating through the elements of this field and
	// adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm;
	// the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTermArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`

	// If the affinity requirements specified by this field are not met at scheduling time, the pod
	// will not be scheduled onto the node. If the affinity requirements specified by this field cease
	// to be met at some point during pod execution (e.g. due to a pod label update), the system may or
	// may not try to eventually evict the pod from its node. When there are multiple elements, the
	// lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be
	// satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PodAffinityTermArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`

}

func (a PodAffinityArgs) ElementType() reflect.Type {
	return _PodAffinityType
}

func (a PodAffinityArgs) ToPodAffinityOutput() PodAffinityOutput {
	return pulumi.ToOutput(a).(PodAffinityOutput)
}

func (a PodAffinityArgs) ToPodAffinityOutputWithContext(ctx context.Context) PodAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PodAffinityOutput)
}

// PodAffinityOutput is an output type that resolves to a Input.
type PodAffinityOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PodAffinityOutput{}) }

func (PodAffinityOutput) ElementType() reflect.Type {
	return _PodAffinityType
}

func (o PodAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermArrayOutput {
	return o.Apply(func(v PodAffinity) []WeightedPodAffinityTerm {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermArrayOutput)
}

func (o PodAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermArrayOutput {
	return o.Apply(func(v PodAffinity) []PodAffinityTerm {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PodAffinityTermArrayOutput)
}

