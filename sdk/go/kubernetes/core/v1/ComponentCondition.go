// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Information about the condition of a component.
type ComponentCondition struct {
	// Condition error code for a component. For example, a health check error code.
	Error *string `pulumi:"error"`

	// Message about the condition for a component. For example, information about a health check.
	Message *string `pulumi:"message"`

	// Status of the condition for a component. Valid values for "Healthy": "True", "False", or
	// "Unknown".
	Status string `pulumi:"status"`

	// Type of condition for a component. Valid value: "Healthy"
	Type string `pulumi:"type"`

}

var _ComponentConditionType = reflect.TypeOf((*ComponentCondition)(nil)).Elem()

// ComponentConditionInput represents an input type that resolves to a ComponentCondition.
type ComponentConditionInput interface {
	ElementType() reflect.Type

	ToComponentConditionOutput() ComponentConditionOutput
	ToComponentConditionOutputWithContext(ctx context.Context) ComponentConditionOutput
}

// ComponentConditionArgs is a ComponentConditionInput whose fields are all Input types.
type ComponentConditionArgs struct {
	// Status of the condition for a component. Valid values for "Healthy": "True", "False", or
	// "Unknown".
	Status pulumi.StringInput `pulumi:"status"`

	// Type of condition for a component. Valid value: "Healthy"
	Type pulumi.StringInput `pulumi:"type"`

	// Condition error code for a component. For example, a health check error code.
	Error pulumi.StringInput `pulumi:"error"`

	// Message about the condition for a component. For example, information about a health check.
	Message pulumi.StringInput `pulumi:"message"`

}

func (a ComponentConditionArgs) ElementType() reflect.Type {
	return _ComponentConditionType
}

func (a ComponentConditionArgs) ToComponentConditionOutput() ComponentConditionOutput {
	return pulumi.ToOutput(a).(ComponentConditionOutput)
}

func (a ComponentConditionArgs) ToComponentConditionOutputWithContext(ctx context.Context) ComponentConditionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ComponentConditionOutput)
}

// ComponentConditionOutput is an output type that resolves to a Input.
type ComponentConditionOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ComponentConditionOutput{}) }

func (ComponentConditionOutput) ElementType() reflect.Type {
	return _ComponentConditionType
}

func (o ComponentConditionOutput) Error() pulumi.StringOutput {
	return o.Apply(func(v ComponentCondition) *string {
		return v.Error
	}).(pulumi.StringOutput)
}

func (o ComponentConditionOutput) Message() pulumi.StringOutput {
	return o.Apply(func(v ComponentCondition) *string {
		return v.Message
	}).(pulumi.StringOutput)
}

func (o ComponentConditionOutput) Status() pulumi.StringOutput {
	return o.Apply(func(v ComponentCondition) string {
		return v.Status
	}).(pulumi.StringOutput)
}

func (o ComponentConditionOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v ComponentCondition) string {
		return v.Type
	}).(pulumi.StringOutput)
}

var _ComponentConditionArrayType = reflect.TypeOf((*[]ComponentCondition)(nil)).Elem()

type ComponentConditionArrayInput interface {
	ElementType() reflect.Type

	ToComponentConditionArrayOutput() ComponentConditionArrayOutput
	ToComponentConditionArrayOutputWithContext(ctx context.Context) ComponentConditionArrayOutput
}

type ComponentConditionArray []ComponentConditionInput

func (a ComponentConditionArray) ElementType() reflect.Type {
	return _ComponentConditionArrayType
}

func (a ComponentConditionArray) ToComponentConditionArrayOutput() ComponentConditionArrayOutput {
	return pulumi.ToOutput(a).(ComponentConditionArrayOutput)
}

func (a ComponentConditionArray) ToComponentConditionArrayOutputWithContext(ctx context.Context) ComponentConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ComponentConditionArrayOutput)
}

type ComponentConditionArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ComponentConditionArrayOutput{}) }

func (ComponentConditionArrayOutput) ElementType() reflect.Type {
	return _ComponentConditionArrayType
}

func (o ComponentConditionArrayOutput) Index(i pulumi.IntInput) ComponentConditionOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ComponentCondition {
		return vs[0].([]ComponentCondition)[vs[1].(int)]
	}).(ComponentConditionOutput)
}
