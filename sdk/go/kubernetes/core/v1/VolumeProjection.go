// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Projection that may be projected along with other supported volume types
type VolumeProjection struct {
	// information about the configMap data to project
	ConfigMap *ConfigMapProjection `pulumi:"configMap"`

	// information about the downwardAPI data to project
	DownwardAPI *DownwardAPIProjection `pulumi:"downwardAPI"`

	// information about the secret data to project
	Secret *SecretProjection `pulumi:"secret"`

	// information about the serviceAccountToken data to project
	ServiceAccountToken *ServiceAccountTokenProjection `pulumi:"serviceAccountToken"`

}

var _VolumeProjectionType = reflect.TypeOf((*VolumeProjection)(nil)).Elem()

// VolumeProjectionInput represents an input type that resolves to a VolumeProjection.
type VolumeProjectionInput interface {
	ElementType() reflect.Type

	ToVolumeProjectionOutput() VolumeProjectionOutput
	ToVolumeProjectionOutputWithContext(ctx context.Context) VolumeProjectionOutput
}

// VolumeProjectionArgs is a VolumeProjectionInput whose fields are all Input types.
type VolumeProjectionArgs struct {
	// information about the configMap data to project
	ConfigMap ConfigMapProjectionInput `pulumi:"configMap"`

	// information about the downwardAPI data to project
	DownwardAPI DownwardAPIProjectionInput `pulumi:"downwardAPI"`

	// information about the secret data to project
	Secret SecretProjectionInput `pulumi:"secret"`

	// information about the serviceAccountToken data to project
	ServiceAccountToken ServiceAccountTokenProjectionInput `pulumi:"serviceAccountToken"`

}

func (a VolumeProjectionArgs) ElementType() reflect.Type {
	return _VolumeProjectionType
}

func (a VolumeProjectionArgs) ToVolumeProjectionOutput() VolumeProjectionOutput {
	return pulumi.ToOutput(a).(VolumeProjectionOutput)
}

func (a VolumeProjectionArgs) ToVolumeProjectionOutputWithContext(ctx context.Context) VolumeProjectionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeProjectionOutput)
}

// VolumeProjectionOutput is an output type that resolves to a Input.
type VolumeProjectionOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeProjectionOutput{}) }

func (VolumeProjectionOutput) ElementType() reflect.Type {
	return _VolumeProjectionType
}

func (o VolumeProjectionOutput) ConfigMap() ConfigMapProjectionOutput {
	return o.Apply(func(v VolumeProjection) *ConfigMapProjection {
		return v.ConfigMap
	}).(ConfigMapProjectionOutput)
}

func (o VolumeProjectionOutput) DownwardAPI() DownwardAPIProjectionOutput {
	return o.Apply(func(v VolumeProjection) *DownwardAPIProjection {
		return v.DownwardAPI
	}).(DownwardAPIProjectionOutput)
}

func (o VolumeProjectionOutput) Secret() SecretProjectionOutput {
	return o.Apply(func(v VolumeProjection) *SecretProjection {
		return v.Secret
	}).(SecretProjectionOutput)
}

func (o VolumeProjectionOutput) ServiceAccountToken() ServiceAccountTokenProjectionOutput {
	return o.Apply(func(v VolumeProjection) *ServiceAccountTokenProjection {
		return v.ServiceAccountToken
	}).(ServiceAccountTokenProjectionOutput)
}

var _VolumeProjectionArrayType = reflect.TypeOf((*[]VolumeProjection)(nil)).Elem()

type VolumeProjectionArrayInput interface {
	ElementType() reflect.Type

	ToVolumeProjectionArrayOutput() VolumeProjectionArrayOutput
	ToVolumeProjectionArrayOutputWithContext(ctx context.Context) VolumeProjectionArrayOutput
}

type VolumeProjectionArray []VolumeProjectionInput

func (a VolumeProjectionArray) ElementType() reflect.Type {
	return _VolumeProjectionArrayType
}

func (a VolumeProjectionArray) ToVolumeProjectionArrayOutput() VolumeProjectionArrayOutput {
	return pulumi.ToOutput(a).(VolumeProjectionArrayOutput)
}

func (a VolumeProjectionArray) ToVolumeProjectionArrayOutputWithContext(ctx context.Context) VolumeProjectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeProjectionArrayOutput)
}

type VolumeProjectionArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeProjectionArrayOutput{}) }

func (VolumeProjectionArrayOutput) ElementType() reflect.Type {
	return _VolumeProjectionArrayType
}

func (o VolumeProjectionArrayOutput) Index(i pulumi.IntInput) VolumeProjectionOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) VolumeProjection {
		return vs[0].([]VolumeProjection)[vs[1].(int)]
	}).(VolumeProjectionOutput)
}
