// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// AttachedVolume describes a volume attached to a node
type AttachedVolume struct {
	// DevicePath represents the device path where the volume should be available
	DevicePath string `pulumi:"devicePath"`

	// Name of the attached volume
	Name string `pulumi:"name"`

}

var _AttachedVolumeType = reflect.TypeOf((*AttachedVolume)(nil)).Elem()

// AttachedVolumeInput represents an input type that resolves to a AttachedVolume.
type AttachedVolumeInput interface {
	ElementType() reflect.Type

	ToAttachedVolumeOutput() AttachedVolumeOutput
	ToAttachedVolumeOutputWithContext(ctx context.Context) AttachedVolumeOutput
}

// AttachedVolumeArgs is a AttachedVolumeInput whose fields are all Input types.
type AttachedVolumeArgs struct {
	// DevicePath represents the device path where the volume should be available
	DevicePath pulumi.StringInput `pulumi:"devicePath"`

	// Name of the attached volume
	Name pulumi.StringInput `pulumi:"name"`

}

func (a AttachedVolumeArgs) ElementType() reflect.Type {
	return _AttachedVolumeType
}

func (a AttachedVolumeArgs) ToAttachedVolumeOutput() AttachedVolumeOutput {
	return pulumi.ToOutput(a).(AttachedVolumeOutput)
}

func (a AttachedVolumeArgs) ToAttachedVolumeOutputWithContext(ctx context.Context) AttachedVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AttachedVolumeOutput)
}

// AttachedVolumeOutput is an output type that resolves to a Input.
type AttachedVolumeOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(AttachedVolumeOutput{}) }

func (AttachedVolumeOutput) ElementType() reflect.Type {
	return _AttachedVolumeType
}

func (o AttachedVolumeOutput) DevicePath() pulumi.StringOutput {
	return o.Apply(func(v AttachedVolume) string {
		return v.DevicePath
	}).(pulumi.StringOutput)
}

func (o AttachedVolumeOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v AttachedVolume) string {
		return v.Name
	}).(pulumi.StringOutput)
}

var _AttachedVolumeArrayType = reflect.TypeOf((*[]AttachedVolume)(nil)).Elem()

type AttachedVolumeArrayInput interface {
	ElementType() reflect.Type

	ToAttachedVolumeArrayOutput() AttachedVolumeArrayOutput
	ToAttachedVolumeArrayOutputWithContext(ctx context.Context) AttachedVolumeArrayOutput
}

type AttachedVolumeArray []AttachedVolumeInput

func (a AttachedVolumeArray) ElementType() reflect.Type {
	return _AttachedVolumeArrayType
}

func (a AttachedVolumeArray) ToAttachedVolumeArrayOutput() AttachedVolumeArrayOutput {
	return pulumi.ToOutput(a).(AttachedVolumeArrayOutput)
}

func (a AttachedVolumeArray) ToAttachedVolumeArrayOutputWithContext(ctx context.Context) AttachedVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AttachedVolumeArrayOutput)
}

type AttachedVolumeArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(AttachedVolumeArrayOutput{}) }

func (AttachedVolumeArrayOutput) ElementType() reflect.Type {
	return _AttachedVolumeArrayType
}

func (o AttachedVolumeArrayOutput) Index(i pulumi.IntInput) AttachedVolumeOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) AttachedVolume {
		return vs[0].([]AttachedVolume)[vs[1].(int)]
	}).(AttachedVolumeOutput)
}
