// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The pod this Toleration is attached to tolerates any taint that matches the triple
// <key,value,effect> using the matching operator <operator>.
type Toleration struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified,
	// allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`

	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the
	// key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`

	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal.
	// Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all
	// taints of a particular category.
	Operator *string `pulumi:"operator"`

	// TolerationSeconds represents the period of time the toleration (which must be of effect
	// NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set,
	// which means tolerate the taint forever (do not evict). Zero and negative values will be treated
	// as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`

	// Value is the taint value the toleration matches to. If the operator is Exists, the value should
	// be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`

}

var _TolerationType = reflect.TypeOf((*Toleration)(nil)).Elem()

// TolerationInput represents an input type that resolves to a Toleration.
type TolerationInput interface {
	ElementType() reflect.Type

	ToTolerationOutput() TolerationOutput
	ToTolerationOutputWithContext(ctx context.Context) TolerationOutput
}

// TolerationArgs is a TolerationInput whose fields are all Input types.
type TolerationArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified,
	// allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringInput `pulumi:"effect"`

	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the
	// key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringInput `pulumi:"key"`

	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal.
	// Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all
	// taints of a particular category.
	Operator pulumi.StringInput `pulumi:"operator"`

	// TolerationSeconds represents the period of time the toleration (which must be of effect
	// NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set,
	// which means tolerate the taint forever (do not evict). Zero and negative values will be treated
	// as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntInput `pulumi:"tolerationSeconds"`

	// Value is the taint value the toleration matches to. If the operator is Exists, the value should
	// be empty, otherwise just a regular string.
	Value pulumi.StringInput `pulumi:"value"`

}

func (a TolerationArgs) ElementType() reflect.Type {
	return _TolerationType
}

func (a TolerationArgs) ToTolerationOutput() TolerationOutput {
	return pulumi.ToOutput(a).(TolerationOutput)
}

func (a TolerationArgs) ToTolerationOutputWithContext(ctx context.Context) TolerationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(TolerationOutput)
}

// TolerationOutput is an output type that resolves to a Input.
type TolerationOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(TolerationOutput{}) }

func (TolerationOutput) ElementType() reflect.Type {
	return _TolerationType
}

func (o TolerationOutput) Effect() pulumi.StringOutput {
	return o.Apply(func(v Toleration) *string {
		return v.Effect
	}).(pulumi.StringOutput)
}

func (o TolerationOutput) Key() pulumi.StringOutput {
	return o.Apply(func(v Toleration) *string {
		return v.Key
	}).(pulumi.StringOutput)
}

func (o TolerationOutput) Operator() pulumi.StringOutput {
	return o.Apply(func(v Toleration) *string {
		return v.Operator
	}).(pulumi.StringOutput)
}

func (o TolerationOutput) TolerationSeconds() pulumi.IntOutput {
	return o.Apply(func(v Toleration) *int {
		return v.TolerationSeconds
	}).(pulumi.IntOutput)
}

func (o TolerationOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v Toleration) *string {
		return v.Value
	}).(pulumi.StringOutput)
}

var _TolerationArrayType = reflect.TypeOf((*[]Toleration)(nil)).Elem()

type TolerationArrayInput interface {
	ElementType() reflect.Type

	ToTolerationArrayOutput() TolerationArrayOutput
	ToTolerationArrayOutputWithContext(ctx context.Context) TolerationArrayOutput
}

type TolerationArray []TolerationInput

func (a TolerationArray) ElementType() reflect.Type {
	return _TolerationArrayType
}

func (a TolerationArray) ToTolerationArrayOutput() TolerationArrayOutput {
	return pulumi.ToOutput(a).(TolerationArrayOutput)
}

func (a TolerationArray) ToTolerationArrayOutputWithContext(ctx context.Context) TolerationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(TolerationArrayOutput)
}

type TolerationArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(TolerationArrayOutput{}) }

func (TolerationArrayOutput) ElementType() reflect.Type {
	return _TolerationArrayType
}

func (o TolerationArrayOutput) Index(i pulumi.IntInput) TolerationOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) Toleration {
		return vs[0].([]Toleration)[vs[1].(int)]
	}).(TolerationOutput)
}
