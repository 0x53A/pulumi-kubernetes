// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume
// finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is,
// essentially, a wrapper around another type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSource struct {
	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this
	// volume. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `pulumi:"claimName"`

	// Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `pulumi:"readOnly"`

}

var _PersistentVolumeClaimVolumeSourceType = reflect.TypeOf((*PersistentVolumeClaimVolumeSource)(nil)).Elem()

// PersistentVolumeClaimVolumeSourceInput represents an input type that resolves to a PersistentVolumeClaimVolumeSource.
type PersistentVolumeClaimVolumeSourceInput interface {
	ElementType() reflect.Type

	ToPersistentVolumeClaimVolumeSourceOutput() PersistentVolumeClaimVolumeSourceOutput
	ToPersistentVolumeClaimVolumeSourceOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourceOutput
}

// PersistentVolumeClaimVolumeSourceArgs is a PersistentVolumeClaimVolumeSourceInput whose fields are all Input types.
type PersistentVolumeClaimVolumeSourceArgs struct {
	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this
	// volume. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName pulumi.StringInput `pulumi:"claimName"`

	// Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

}

func (a PersistentVolumeClaimVolumeSourceArgs) ElementType() reflect.Type {
	return _PersistentVolumeClaimVolumeSourceType
}

func (a PersistentVolumeClaimVolumeSourceArgs) ToPersistentVolumeClaimVolumeSourceOutput() PersistentVolumeClaimVolumeSourceOutput {
	return pulumi.ToOutput(a).(PersistentVolumeClaimVolumeSourceOutput)
}

func (a PersistentVolumeClaimVolumeSourceArgs) ToPersistentVolumeClaimVolumeSourceOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PersistentVolumeClaimVolumeSourceOutput)
}

// PersistentVolumeClaimVolumeSourceOutput is an output type that resolves to a Input.
type PersistentVolumeClaimVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PersistentVolumeClaimVolumeSourceOutput{}) }

func (PersistentVolumeClaimVolumeSourceOutput) ElementType() reflect.Type {
	return _PersistentVolumeClaimVolumeSourceType
}

func (o PersistentVolumeClaimVolumeSourceOutput) ClaimName() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimVolumeSource) string {
		return v.ClaimName
	}).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v PersistentVolumeClaimVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

