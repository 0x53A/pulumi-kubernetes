// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type NodeDaemonEndpoints struct {
	// Endpoint on which Kubelet is listening.
	KubeletEndpoint *DaemonEndpoint `pulumi:"kubeletEndpoint"`

}

var _NodeDaemonEndpointsType = reflect.TypeOf((*NodeDaemonEndpoints)(nil)).Elem()

// NodeDaemonEndpointsInput represents an input type that resolves to a NodeDaemonEndpoints.
type NodeDaemonEndpointsInput interface {
	ElementType() reflect.Type

	ToNodeDaemonEndpointsOutput() NodeDaemonEndpointsOutput
	ToNodeDaemonEndpointsOutputWithContext(ctx context.Context) NodeDaemonEndpointsOutput
}

// NodeDaemonEndpointsArgs is a NodeDaemonEndpointsInput whose fields are all Input types.
type NodeDaemonEndpointsArgs struct {
	// Endpoint on which Kubelet is listening.
	KubeletEndpoint DaemonEndpointInput `pulumi:"kubeletEndpoint"`

}

func (a NodeDaemonEndpointsArgs) ElementType() reflect.Type {
	return _NodeDaemonEndpointsType
}

func (a NodeDaemonEndpointsArgs) ToNodeDaemonEndpointsOutput() NodeDaemonEndpointsOutput {
	return pulumi.ToOutput(a).(NodeDaemonEndpointsOutput)
}

func (a NodeDaemonEndpointsArgs) ToNodeDaemonEndpointsOutputWithContext(ctx context.Context) NodeDaemonEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodeDaemonEndpointsOutput)
}

// NodeDaemonEndpointsOutput is an output type that resolves to a Input.
type NodeDaemonEndpointsOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodeDaemonEndpointsOutput{}) }

func (NodeDaemonEndpointsOutput) ElementType() reflect.Type {
	return _NodeDaemonEndpointsType
}

func (o NodeDaemonEndpointsOutput) KubeletEndpoint() DaemonEndpointOutput {
	return o.Apply(func(v NodeDaemonEndpoints) *DaemonEndpoint {
		return v.KubeletEndpoint
	}).(DaemonEndpointOutput)
}

