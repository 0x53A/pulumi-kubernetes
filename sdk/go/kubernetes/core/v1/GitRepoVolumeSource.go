// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do
// not support ownership management. Git repo volumes support SELinux relabeling.
// 
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir
// into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's
// container.
type GitRepoVolumeSource struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume
	// directory will be the git repository.  Otherwise, if specified, the volume will contain the git
	// repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`

	// Repository URL
	Repository string `pulumi:"repository"`

	// Commit hash for the specified revision.
	Revision *string `pulumi:"revision"`

}

var _GitRepoVolumeSourceType = reflect.TypeOf((*GitRepoVolumeSource)(nil)).Elem()

// GitRepoVolumeSourceInput represents an input type that resolves to a GitRepoVolumeSource.
type GitRepoVolumeSourceInput interface {
	ElementType() reflect.Type

	ToGitRepoVolumeSourceOutput() GitRepoVolumeSourceOutput
	ToGitRepoVolumeSourceOutputWithContext(ctx context.Context) GitRepoVolumeSourceOutput
}

// GitRepoVolumeSourceArgs is a GitRepoVolumeSourceInput whose fields are all Input types.
type GitRepoVolumeSourceArgs struct {
	// Repository URL
	Repository pulumi.StringInput `pulumi:"repository"`

	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume
	// directory will be the git repository.  Otherwise, if specified, the volume will contain the git
	// repository in the subdirectory with the given name.
	Directory pulumi.StringInput `pulumi:"directory"`

	// Commit hash for the specified revision.
	Revision pulumi.StringInput `pulumi:"revision"`

}

func (a GitRepoVolumeSourceArgs) ElementType() reflect.Type {
	return _GitRepoVolumeSourceType
}

func (a GitRepoVolumeSourceArgs) ToGitRepoVolumeSourceOutput() GitRepoVolumeSourceOutput {
	return pulumi.ToOutput(a).(GitRepoVolumeSourceOutput)
}

func (a GitRepoVolumeSourceArgs) ToGitRepoVolumeSourceOutputWithContext(ctx context.Context) GitRepoVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(GitRepoVolumeSourceOutput)
}

// GitRepoVolumeSourceOutput is an output type that resolves to a Input.
type GitRepoVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(GitRepoVolumeSourceOutput{}) }

func (GitRepoVolumeSourceOutput) ElementType() reflect.Type {
	return _GitRepoVolumeSourceType
}

func (o GitRepoVolumeSourceOutput) Directory() pulumi.StringOutput {
	return o.Apply(func(v GitRepoVolumeSource) *string {
		return v.Directory
	}).(pulumi.StringOutput)
}

func (o GitRepoVolumeSourceOutput) Repository() pulumi.StringOutput {
	return o.Apply(func(v GitRepoVolumeSource) string {
		return v.Repository
	}).(pulumi.StringOutput)
}

func (o GitRepoVolumeSourceOutput) Revision() pulumi.StringOutput {
	return o.Apply(func(v GitRepoVolumeSource) *string {
		return v.Revision
	}).(pulumi.StringOutput)
}

