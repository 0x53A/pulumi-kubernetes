// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a
// container. The volume must also be in the same region as the kubelet. Cinder volumes support
// ownership management and SELinux relabeling.
type CinderPersistentVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
	// https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`

	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `pulumi:"readOnly"`

	// Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef *SecretReference `pulumi:"secretRef"`

	// volume id used to identify the volume in cinder. More info:
	// https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `pulumi:"volumeID"`

}

var _CinderPersistentVolumeSourceType = reflect.TypeOf((*CinderPersistentVolumeSource)(nil)).Elem()

// CinderPersistentVolumeSourceInput represents an input type that resolves to a CinderPersistentVolumeSource.
type CinderPersistentVolumeSourceInput interface {
	ElementType() reflect.Type

	ToCinderPersistentVolumeSourceOutput() CinderPersistentVolumeSourceOutput
	ToCinderPersistentVolumeSourceOutputWithContext(ctx context.Context) CinderPersistentVolumeSourceOutput
}

// CinderPersistentVolumeSourceArgs is a CinderPersistentVolumeSourceInput whose fields are all Input types.
type CinderPersistentVolumeSourceArgs struct {
	// volume id used to identify the volume in cinder. More info:
	// https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringInput `pulumi:"volumeID"`

	// Filesystem type to mount. Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
	// https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringInput `pulumi:"fsType"`

	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

	// Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef SecretReferenceInput `pulumi:"secretRef"`

}

func (a CinderPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return _CinderPersistentVolumeSourceType
}

func (a CinderPersistentVolumeSourceArgs) ToCinderPersistentVolumeSourceOutput() CinderPersistentVolumeSourceOutput {
	return pulumi.ToOutput(a).(CinderPersistentVolumeSourceOutput)
}

func (a CinderPersistentVolumeSourceArgs) ToCinderPersistentVolumeSourceOutputWithContext(ctx context.Context) CinderPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CinderPersistentVolumeSourceOutput)
}

// CinderPersistentVolumeSourceOutput is an output type that resolves to a Input.
type CinderPersistentVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CinderPersistentVolumeSourceOutput{}) }

func (CinderPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return _CinderPersistentVolumeSourceType
}

func (o CinderPersistentVolumeSourceOutput) FsType() pulumi.StringOutput {
	return o.Apply(func(v CinderPersistentVolumeSource) *string {
		return v.FsType
	}).(pulumi.StringOutput)
}

func (o CinderPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v CinderPersistentVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o CinderPersistentVolumeSourceOutput) SecretRef() SecretReferenceOutput {
	return o.Apply(func(v CinderPersistentVolumeSource) *SecretReference {
		return v.SecretRef
	}).(SecretReferenceOutput)
}

func (o CinderPersistentVolumeSourceOutput) VolumeID() pulumi.StringOutput {
	return o.Apply(func(v CinderPersistentVolumeSource) string {
		return v.VolumeID
	}).(pulumi.StringOutput)
}

