// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Service is a named abstraction of software service (for example, mysql) consisting of local port
// (for example 3306) that the proxy listens on, and the selector that determines which pods will
// answer requests sent through the proxy.
// 
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
// 
// 1. Service object exists.
// 2. Related Endpoint objects are created. Each time we get an update, wait 10 seconds
//    for any stragglers.
// 3. The endpoints objects target some number of living objects (unless the Service is
//    an "empty headless" Service [1] or a Service with '.spec.type: ExternalName').
// 4. External IP address is allocated (if Service has '.spec.type: LoadBalancer').
// 
// Known limitations: 
// Services targeting ReplicaSets (and, by extension, Deployments,
// StatefulSets, etc.) with '.spec.replicas' set to 0 are not handled, and will time
// out. To work around this limitation, set 'pulumi.com/skipAwait: "true"' on
// '.metadata.annotations' for the Service. Work to handle this case is in progress [2].
// 
// [1] https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
// [2] https://github.com/pulumi/pulumi-kubernetes/pull/703
// 
// If the Service has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type Service struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Spec defines the behavior of a service.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceSpecOutput `pulumi:"spec"`

	// Most recently observed status of the service. Populated by the system. Read-only. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ServiceStatusOutput `pulumi:"status"`

}

// ServiceArgs is the set of arguments needed to create a Service resource.
type ServiceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the behavior of a service.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceSpecInput `pulumi:"spec"`

}

// NewService creates a Service resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context, name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("Service")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToServiceSpecOutput()
		}
	}
	var resource Service
	err := ctx.RegisterResource("kubernetes:core/v1:Service", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name and ID.
func GetService(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("kubernetes:core/v1:Service", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port
// (for example 3306) that the proxy listens on, and the selector that determines which pods will
// answer requests sent through the proxy.
type ServiceProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Spec defines the behavior of a service.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ServiceSpec `pulumi:"spec"`

	// Most recently observed status of the service. Populated by the system. Read-only. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ServiceStatus `pulumi:"status"`

}

var _ServicePropertyType = reflect.TypeOf((*ServiceProperty)(nil)).Elem()

// ServicePropertyInput represents an input type that resolves to a ServiceProperty.
type ServicePropertyInput interface {
	ElementType() reflect.Type

	ToServicePropertyOutput() ServicePropertyOutput
	ToServicePropertyOutputWithContext(ctx context.Context) ServicePropertyOutput
}

// ServicePropertyArgs is a ServicePropertyInput whose fields are all Input types.
type ServicePropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the behavior of a service.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceSpecInput `pulumi:"spec"`

}

func (a ServicePropertyArgs) ElementType() reflect.Type {
	return _ServicePropertyType
}

func (a ServicePropertyArgs) ToServicePropertyOutput() ServicePropertyOutput {
	return pulumi.ToOutput(a).(ServicePropertyOutput)
}

func (a ServicePropertyArgs) ToServicePropertyOutputWithContext(ctx context.Context) ServicePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServicePropertyOutput)
}

// ServicePropertyOutput is an output type that resolves to a Input.
type ServicePropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ServicePropertyOutput{}) }

func (ServicePropertyOutput) ElementType() reflect.Type {
	return _ServicePropertyType
}

func (o ServicePropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v ServiceProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o ServicePropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v ServiceProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o ServicePropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v ServiceProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o ServicePropertyOutput) Spec() ServiceSpecOutput {
	return o.Apply(func(v ServiceProperty) *ServiceSpec {
		return v.Spec
	}).(ServiceSpecOutput)
}

func (o ServicePropertyOutput) Status() ServiceStatusOutput {
	return o.Apply(func(v ServiceProperty) ServiceStatus {
		return v.Status
	}).(ServiceStatusOutput)
}

var _ServicePropertyArrayType = reflect.TypeOf((*[]ServiceProperty)(nil)).Elem()

type ServicePropertyArrayInput interface {
	ElementType() reflect.Type

	ToServicePropertyArrayOutput() ServicePropertyArrayOutput
	ToServicePropertyArrayOutputWithContext(ctx context.Context) ServicePropertyArrayOutput
}

type ServicePropertyArray []ServicePropertyInput

func (a ServicePropertyArray) ElementType() reflect.Type {
	return _ServicePropertyArrayType
}

func (a ServicePropertyArray) ToServicePropertyArrayOutput() ServicePropertyArrayOutput {
	return pulumi.ToOutput(a).(ServicePropertyArrayOutput)
}

func (a ServicePropertyArray) ToServicePropertyArrayOutputWithContext(ctx context.Context) ServicePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServicePropertyArrayOutput)
}

type ServicePropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ServicePropertyArrayOutput{}) }

func (ServicePropertyArrayOutput) ElementType() reflect.Type {
	return _ServicePropertyArrayType
}

func (o ServicePropertyArrayOutput) Index(i pulumi.IntInput) ServicePropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ServiceProperty {
		return vs[0].([]ServiceProperty)[vs[1].(int)]
	}).(ServicePropertyOutput)
}
