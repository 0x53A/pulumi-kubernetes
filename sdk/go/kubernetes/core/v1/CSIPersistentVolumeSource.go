// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type CSIPersistentVolumeSource struct {
	// ControllerExpandSecretRef is a reference to the secret object containing sensitive information
	// to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha
	// field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be
	// empty if no secret is required. If the secret object contains more than one secret, all secrets
	// are passed.
	ControllerExpandSecretRef *SecretReference `pulumi:"controllerExpandSecretRef"`

	// ControllerPublishSecretRef is a reference to the secret object containing sensitive information
	// to pass to the CSI driver to complete the CSI ControllerPublishVolume and
	// ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is
	// required. If the secret object contains more than one secret, all secrets are passed.
	ControllerPublishSecretRef *SecretReference `pulumi:"controllerPublishSecretRef"`

	// Driver is the name of the driver to use for this volume. Required.
	Driver string `pulumi:"driver"`

	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs".
	FsType *string `pulumi:"fsType"`

	// NodePublishSecretRef is a reference to the secret object containing sensitive information to
	// pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This
	// field is optional, and may be empty if no secret is required. If the secret object contains more
	// than one secret, all secrets are passed.
	NodePublishSecretRef *SecretReference `pulumi:"nodePublishSecretRef"`

	// NodeStageSecretRef is a reference to the secret object containing sensitive information to pass
	// to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume
	// calls. This field is optional, and may be empty if no secret is required. If the secret object
	// contains more than one secret, all secrets are passed.
	NodeStageSecretRef *SecretReference `pulumi:"nodeStageSecretRef"`

	// Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`

	// Attributes of the volume to publish.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`

	// VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to
	// refer to the volume on all subsequent calls. Required.
	VolumeHandle string `pulumi:"volumeHandle"`

}

var _CSIPersistentVolumeSourceType = reflect.TypeOf((*CSIPersistentVolumeSource)(nil)).Elem()

// CSIPersistentVolumeSourceInput represents an input type that resolves to a CSIPersistentVolumeSource.
type CSIPersistentVolumeSourceInput interface {
	ElementType() reflect.Type

	ToCSIPersistentVolumeSourceOutput() CSIPersistentVolumeSourceOutput
	ToCSIPersistentVolumeSourceOutputWithContext(ctx context.Context) CSIPersistentVolumeSourceOutput
}

// CSIPersistentVolumeSourceArgs is a CSIPersistentVolumeSourceInput whose fields are all Input types.
type CSIPersistentVolumeSourceArgs struct {
	// Driver is the name of the driver to use for this volume. Required.
	Driver pulumi.StringInput `pulumi:"driver"`

	// VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to
	// refer to the volume on all subsequent calls. Required.
	VolumeHandle pulumi.StringInput `pulumi:"volumeHandle"`

	// ControllerExpandSecretRef is a reference to the secret object containing sensitive information
	// to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha
	// field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be
	// empty if no secret is required. If the secret object contains more than one secret, all secrets
	// are passed.
	ControllerExpandSecretRef SecretReferenceInput `pulumi:"controllerExpandSecretRef"`

	// ControllerPublishSecretRef is a reference to the secret object containing sensitive information
	// to pass to the CSI driver to complete the CSI ControllerPublishVolume and
	// ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is
	// required. If the secret object contains more than one secret, all secrets are passed.
	ControllerPublishSecretRef SecretReferenceInput `pulumi:"controllerPublishSecretRef"`

	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs".
	FsType pulumi.StringInput `pulumi:"fsType"`

	// NodePublishSecretRef is a reference to the secret object containing sensitive information to
	// pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This
	// field is optional, and may be empty if no secret is required. If the secret object contains more
	// than one secret, all secrets are passed.
	NodePublishSecretRef SecretReferenceInput `pulumi:"nodePublishSecretRef"`

	// NodeStageSecretRef is a reference to the secret object containing sensitive information to pass
	// to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume
	// calls. This field is optional, and may be empty if no secret is required. If the secret object
	// contains more than one secret, all secrets are passed.
	NodeStageSecretRef SecretReferenceInput `pulumi:"nodeStageSecretRef"`

	// Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

	// Attributes of the volume to publish.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`

}

func (a CSIPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return _CSIPersistentVolumeSourceType
}

func (a CSIPersistentVolumeSourceArgs) ToCSIPersistentVolumeSourceOutput() CSIPersistentVolumeSourceOutput {
	return pulumi.ToOutput(a).(CSIPersistentVolumeSourceOutput)
}

func (a CSIPersistentVolumeSourceArgs) ToCSIPersistentVolumeSourceOutputWithContext(ctx context.Context) CSIPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CSIPersistentVolumeSourceOutput)
}

// CSIPersistentVolumeSourceOutput is an output type that resolves to a Input.
type CSIPersistentVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CSIPersistentVolumeSourceOutput{}) }

func (CSIPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return _CSIPersistentVolumeSourceType
}

func (o CSIPersistentVolumeSourceOutput) ControllerExpandSecretRef() SecretReferenceOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) *SecretReference {
		return v.ControllerExpandSecretRef
	}).(SecretReferenceOutput)
}

func (o CSIPersistentVolumeSourceOutput) ControllerPublishSecretRef() SecretReferenceOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) *SecretReference {
		return v.ControllerPublishSecretRef
	}).(SecretReferenceOutput)
}

func (o CSIPersistentVolumeSourceOutput) Driver() pulumi.StringOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) string {
		return v.Driver
	}).(pulumi.StringOutput)
}

func (o CSIPersistentVolumeSourceOutput) FsType() pulumi.StringOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) *string {
		return v.FsType
	}).(pulumi.StringOutput)
}

func (o CSIPersistentVolumeSourceOutput) NodePublishSecretRef() SecretReferenceOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) *SecretReference {
		return v.NodePublishSecretRef
	}).(SecretReferenceOutput)
}

func (o CSIPersistentVolumeSourceOutput) NodeStageSecretRef() SecretReferenceOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) *SecretReference {
		return v.NodeStageSecretRef
	}).(SecretReferenceOutput)
}

func (o CSIPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o CSIPersistentVolumeSourceOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) map[string]string {
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

func (o CSIPersistentVolumeSourceOutput) VolumeHandle() pulumi.StringOutput {
	return o.Apply(func(v CSIPersistentVolumeSource) string {
		return v.VolumeHandle
	}).(pulumi.StringOutput)
}

