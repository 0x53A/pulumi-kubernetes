// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// PersistentVolumeClaimCondition contails details about state of pvc
type PersistentVolumeClaimCondition struct {
	// Last time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`

	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`

	// Human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`

	// Unique, this should be a short, machine understandable string that gives the reason for
	// condition's last transition. If it reports "ResizeStarted" that means the underlying persistent
	// volume is being resized.
	Reason *string `pulumi:"reason"`

	
	Status string `pulumi:"status"`

	
	Type string `pulumi:"type"`

}

var _PersistentVolumeClaimConditionType = reflect.TypeOf((*PersistentVolumeClaimCondition)(nil)).Elem()

// PersistentVolumeClaimConditionInput represents an input type that resolves to a PersistentVolumeClaimCondition.
type PersistentVolumeClaimConditionInput interface {
	ElementType() reflect.Type

	ToPersistentVolumeClaimConditionOutput() PersistentVolumeClaimConditionOutput
	ToPersistentVolumeClaimConditionOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionOutput
}

// PersistentVolumeClaimConditionArgs is a PersistentVolumeClaimConditionInput whose fields are all Input types.
type PersistentVolumeClaimConditionArgs struct {
	
	Status pulumi.StringInput `pulumi:"status"`

	
	Type pulumi.StringInput `pulumi:"type"`

	// Last time we probed the condition.
	LastProbeTime pulumi.StringInput `pulumi:"lastProbeTime"`

	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`

	// Human-readable message indicating details about last transition.
	Message pulumi.StringInput `pulumi:"message"`

	// Unique, this should be a short, machine understandable string that gives the reason for
	// condition's last transition. If it reports "ResizeStarted" that means the underlying persistent
	// volume is being resized.
	Reason pulumi.StringInput `pulumi:"reason"`

}

func (a PersistentVolumeClaimConditionArgs) ElementType() reflect.Type {
	return _PersistentVolumeClaimConditionType
}

func (a PersistentVolumeClaimConditionArgs) ToPersistentVolumeClaimConditionOutput() PersistentVolumeClaimConditionOutput {
	return pulumi.ToOutput(a).(PersistentVolumeClaimConditionOutput)
}

func (a PersistentVolumeClaimConditionArgs) ToPersistentVolumeClaimConditionOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PersistentVolumeClaimConditionOutput)
}

// PersistentVolumeClaimConditionOutput is an output type that resolves to a Input.
type PersistentVolumeClaimConditionOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PersistentVolumeClaimConditionOutput{}) }

func (PersistentVolumeClaimConditionOutput) ElementType() reflect.Type {
	return _PersistentVolumeClaimConditionType
}

func (o PersistentVolumeClaimConditionOutput) LastProbeTime() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimCondition) *string {
		return v.LastProbeTime
	}).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimConditionOutput) LastTransitionTime() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimCondition) *string {
		return v.LastTransitionTime
	}).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimConditionOutput) Message() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimCondition) *string {
		return v.Message
	}).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimConditionOutput) Reason() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimCondition) *string {
		return v.Reason
	}).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimConditionOutput) Status() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimCondition) string {
		return v.Status
	}).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimConditionOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimCondition) string {
		return v.Type
	}).(pulumi.StringOutput)
}

var _PersistentVolumeClaimConditionArrayType = reflect.TypeOf((*[]PersistentVolumeClaimCondition)(nil)).Elem()

type PersistentVolumeClaimConditionArrayInput interface {
	ElementType() reflect.Type

	ToPersistentVolumeClaimConditionArrayOutput() PersistentVolumeClaimConditionArrayOutput
	ToPersistentVolumeClaimConditionArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionArrayOutput
}

type PersistentVolumeClaimConditionArray []PersistentVolumeClaimConditionInput

func (a PersistentVolumeClaimConditionArray) ElementType() reflect.Type {
	return _PersistentVolumeClaimConditionArrayType
}

func (a PersistentVolumeClaimConditionArray) ToPersistentVolumeClaimConditionArrayOutput() PersistentVolumeClaimConditionArrayOutput {
	return pulumi.ToOutput(a).(PersistentVolumeClaimConditionArrayOutput)
}

func (a PersistentVolumeClaimConditionArray) ToPersistentVolumeClaimConditionArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PersistentVolumeClaimConditionArrayOutput)
}

type PersistentVolumeClaimConditionArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PersistentVolumeClaimConditionArrayOutput{}) }

func (PersistentVolumeClaimConditionArrayOutput) ElementType() reflect.Type {
	return _PersistentVolumeClaimConditionArrayType
}

func (o PersistentVolumeClaimConditionArrayOutput) Index(i pulumi.IntInput) PersistentVolumeClaimConditionOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) PersistentVolumeClaimCondition {
		return vs[0].([]PersistentVolumeClaimCondition)[vs[1].(int)]
	}).(PersistentVolumeClaimConditionOutput)
}
