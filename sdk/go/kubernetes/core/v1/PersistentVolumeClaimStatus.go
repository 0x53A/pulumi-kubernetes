// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type PersistentVolumeClaimStatus struct {
	// AccessModes contains the actual access modes the volume backing the PVC has. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`

	// Represents the actual resources of the underlying volume.
	Capacity map[string]string `pulumi:"capacity"`

	// Current Condition of persistent volume claim. If underlying persistent volume is being resized
	// then the Condition will be set to 'ResizeStarted'.
	Conditions []PersistentVolumeClaimCondition `pulumi:"conditions"`

	// Phase represents the current phase of PersistentVolumeClaim.
	Phase *string `pulumi:"phase"`

}

var _PersistentVolumeClaimStatusType = reflect.TypeOf((*PersistentVolumeClaimStatus)(nil)).Elem()

// PersistentVolumeClaimStatusInput represents an input type that resolves to a PersistentVolumeClaimStatus.
type PersistentVolumeClaimStatusInput interface {
	ElementType() reflect.Type

	ToPersistentVolumeClaimStatusOutput() PersistentVolumeClaimStatusOutput
	ToPersistentVolumeClaimStatusOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusOutput
}

// PersistentVolumeClaimStatusArgs is a PersistentVolumeClaimStatusInput whose fields are all Input types.
type PersistentVolumeClaimStatusArgs struct {
	// AccessModes contains the actual access modes the volume backing the PVC has. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`

	// Represents the actual resources of the underlying volume.
	Capacity pulumi.StringMapInput `pulumi:"capacity"`

	// Current Condition of persistent volume claim. If underlying persistent volume is being resized
	// then the Condition will be set to 'ResizeStarted'.
	Conditions PersistentVolumeClaimConditionArrayInput `pulumi:"conditions"`

	// Phase represents the current phase of PersistentVolumeClaim.
	Phase pulumi.StringInput `pulumi:"phase"`

}

func (a PersistentVolumeClaimStatusArgs) ElementType() reflect.Type {
	return _PersistentVolumeClaimStatusType
}

func (a PersistentVolumeClaimStatusArgs) ToPersistentVolumeClaimStatusOutput() PersistentVolumeClaimStatusOutput {
	return pulumi.ToOutput(a).(PersistentVolumeClaimStatusOutput)
}

func (a PersistentVolumeClaimStatusArgs) ToPersistentVolumeClaimStatusOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PersistentVolumeClaimStatusOutput)
}

// PersistentVolumeClaimStatusOutput is an output type that resolves to a Input.
type PersistentVolumeClaimStatusOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PersistentVolumeClaimStatusOutput{}) }

func (PersistentVolumeClaimStatusOutput) ElementType() reflect.Type {
	return _PersistentVolumeClaimStatusType
}

func (o PersistentVolumeClaimStatusOutput) AccessModes() pulumi.StringArrayOutput {
	return o.Apply(func(v PersistentVolumeClaimStatus) []string {
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o PersistentVolumeClaimStatusOutput) Capacity() pulumi.StringMapOutput {
	return o.Apply(func(v PersistentVolumeClaimStatus) map[string]string {
		return v.Capacity
	}).(pulumi.StringMapOutput)
}

func (o PersistentVolumeClaimStatusOutput) Conditions() PersistentVolumeClaimConditionArrayOutput {
	return o.Apply(func(v PersistentVolumeClaimStatus) []PersistentVolumeClaimCondition {
		return v.Conditions
	}).(PersistentVolumeClaimConditionArrayOutput)
}

func (o PersistentVolumeClaimStatusOutput) Phase() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimStatus) *string {
		return v.Phase
	}).(pulumi.StringOutput)
}

