// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must
// be less than MaxSecretSize bytes.
// 
// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
// fields, this encryption only applies to Pulumi's context, including the state file, 
// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
// and the contents are visible to users with access to the Secret in Kubernetes using
// tools like 'kubectl'.
// 
// For more information on securing Kubernetes Secrets, see the following links:
// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
// https://kubernetes.io/docs/concepts/configuration/secret/#risks
type Secret struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or
	// '.'. The serialized form of the secret data is a base64 encoded string, representing the
	// arbitrary (possibly non-string) data value here. Described in
	// https://tools.ietf.org/html/rfc4648#section-4
	Data pulumi.StringMapOutput `pulumi:"data"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// stringData allows specifying non-binary secret data in string form. It is provided as a
	// write-only convenience method. All keys and values are merged into the data field on write,
	// overwriting any existing values. It is never output when reading from the API.
	StringData pulumi.StringMapOutput `pulumi:"stringData"`

	// Used to facilitate programmatic handling of secret data.
	Type pulumi.StringOutput `pulumi:"type"`

}

// SecretArgs is the set of arguments needed to create a Secret resource.
type SecretArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or
	// '.'. The serialized form of the secret data is a base64 encoded string, representing the
	// arbitrary (possibly non-string) data value here. Described in
	// https://tools.ietf.org/html/rfc4648#section-4
	Data pulumi.StringMapInput `pulumi:"data"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// stringData allows specifying non-binary secret data in string form. It is provided as a
	// write-only convenience method. All keys and values are merged into the data field on write,
	// overwriting any existing values. It is never output when reading from the API.
	StringData pulumi.StringMapInput `pulumi:"stringData"`

	// Used to facilitate programmatic handling of secret data.
	Type pulumi.StringInput `pulumi:"type"`

}

// NewSecret creates a Secret resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context, name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("Secret")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Data; i != nil {
			inputs["data"] = i.ToStringMapOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.StringData; i != nil {
			inputs["stringData"] = i.ToStringMapOutput()
		}
		if i := args.Type; i != nil {
			inputs["type"] = i.ToStringOutput()
		}
	}
	var resource Secret
	err := ctx.RegisterResource("kubernetes:core/v1:Secret", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name and ID.
func GetSecret(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("kubernetes:core/v1:Secret", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must
// be less than MaxSecretSize bytes.
type SecretProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or
	// '.'. The serialized form of the secret data is a base64 encoded string, representing the
	// arbitrary (possibly non-string) data value here. Described in
	// https://tools.ietf.org/html/rfc4648#section-4
	Data map[string]string `pulumi:"data"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// stringData allows specifying non-binary secret data in string form. It is provided as a
	// write-only convenience method. All keys and values are merged into the data field on write,
	// overwriting any existing values. It is never output when reading from the API.
	StringData map[string]string `pulumi:"stringData"`

	// Used to facilitate programmatic handling of secret data.
	Type *string `pulumi:"type"`

}

var _SecretPropertyType = reflect.TypeOf((*SecretProperty)(nil)).Elem()

// SecretPropertyInput represents an input type that resolves to a SecretProperty.
type SecretPropertyInput interface {
	ElementType() reflect.Type

	ToSecretPropertyOutput() SecretPropertyOutput
	ToSecretPropertyOutputWithContext(ctx context.Context) SecretPropertyOutput
}

// SecretPropertyArgs is a SecretPropertyInput whose fields are all Input types.
type SecretPropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or
	// '.'. The serialized form of the secret data is a base64 encoded string, representing the
	// arbitrary (possibly non-string) data value here. Described in
	// https://tools.ietf.org/html/rfc4648#section-4
	Data pulumi.StringMapInput `pulumi:"data"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// stringData allows specifying non-binary secret data in string form. It is provided as a
	// write-only convenience method. All keys and values are merged into the data field on write,
	// overwriting any existing values. It is never output when reading from the API.
	StringData pulumi.StringMapInput `pulumi:"stringData"`

	// Used to facilitate programmatic handling of secret data.
	Type pulumi.StringInput `pulumi:"type"`

}

func (a SecretPropertyArgs) ElementType() reflect.Type {
	return _SecretPropertyType
}

func (a SecretPropertyArgs) ToSecretPropertyOutput() SecretPropertyOutput {
	return pulumi.ToOutput(a).(SecretPropertyOutput)
}

func (a SecretPropertyArgs) ToSecretPropertyOutputWithContext(ctx context.Context) SecretPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SecretPropertyOutput)
}

// SecretPropertyOutput is an output type that resolves to a Input.
type SecretPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(SecretPropertyOutput{}) }

func (SecretPropertyOutput) ElementType() reflect.Type {
	return _SecretPropertyType
}

func (o SecretPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v SecretProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o SecretPropertyOutput) Data() pulumi.StringMapOutput {
	return o.Apply(func(v SecretProperty) map[string]string {
		return v.Data
	}).(pulumi.StringMapOutput)
}

func (o SecretPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v SecretProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o SecretPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v SecretProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o SecretPropertyOutput) StringData() pulumi.StringMapOutput {
	return o.Apply(func(v SecretProperty) map[string]string {
		return v.StringData
	}).(pulumi.StringMapOutput)
}

func (o SecretPropertyOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v SecretProperty) *string {
		return v.Type
	}).(pulumi.StringOutput)
}

var _SecretPropertyArrayType = reflect.TypeOf((*[]SecretProperty)(nil)).Elem()

type SecretPropertyArrayInput interface {
	ElementType() reflect.Type

	ToSecretPropertyArrayOutput() SecretPropertyArrayOutput
	ToSecretPropertyArrayOutputWithContext(ctx context.Context) SecretPropertyArrayOutput
}

type SecretPropertyArray []SecretPropertyInput

func (a SecretPropertyArray) ElementType() reflect.Type {
	return _SecretPropertyArrayType
}

func (a SecretPropertyArray) ToSecretPropertyArrayOutput() SecretPropertyArrayOutput {
	return pulumi.ToOutput(a).(SecretPropertyArrayOutput)
}

func (a SecretPropertyArray) ToSecretPropertyArrayOutputWithContext(ctx context.Context) SecretPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SecretPropertyArrayOutput)
}

type SecretPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(SecretPropertyArrayOutput{}) }

func (SecretPropertyArrayOutput) ElementType() reflect.Type {
	return _SecretPropertyArrayType
}

func (o SecretPropertyArrayOutput) Index(i pulumi.IntInput) SecretPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) SecretProperty {
		return vs[0].([]SecretProperty)[vs[1].(int)]
	}).(SecretPropertyOutput)
}
