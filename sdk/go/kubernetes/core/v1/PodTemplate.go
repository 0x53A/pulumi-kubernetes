// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// PodTemplate describes a template for creating copies of a predefined pod.
type PodTemplate struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Template defines the pods that will be created from this pod template.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Template PodTemplateSpecOutput `pulumi:"template"`

}

// PodTemplateArgs is the set of arguments needed to create a PodTemplate resource.
type PodTemplateArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Template defines the pods that will be created from this pod template.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Template PodTemplateSpecInput `pulumi:"template"`

}

// NewPodTemplate creates a PodTemplate resource with the given unique name, arguments, and options.
func NewPodTemplate(ctx *pulumi.Context, name string, args *PodTemplateArgs, opts ...pulumi.ResourceOption) (*PodTemplate, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("PodTemplate")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Template; i != nil {
			inputs["template"] = i.ToPodTemplateSpecOutput()
		}
	}
	var resource PodTemplate
	err := ctx.RegisterResource("kubernetes:core/v1:PodTemplate", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPodTemplate gets an existing PodTemplate resource's state with the given name and ID.
func GetPodTemplate(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*PodTemplate, error) {
	var resource PodTemplate
	err := ctx.ReadResource("kubernetes:core/v1:PodTemplate", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// PodTemplate describes a template for creating copies of a predefined pod.
type PodTemplateProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Template defines the pods that will be created from this pod template.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Template *PodTemplateSpec `pulumi:"template"`

}

var _PodTemplatePropertyType = reflect.TypeOf((*PodTemplateProperty)(nil)).Elem()

// PodTemplatePropertyInput represents an input type that resolves to a PodTemplateProperty.
type PodTemplatePropertyInput interface {
	ElementType() reflect.Type

	ToPodTemplatePropertyOutput() PodTemplatePropertyOutput
	ToPodTemplatePropertyOutputWithContext(ctx context.Context) PodTemplatePropertyOutput
}

// PodTemplatePropertyArgs is a PodTemplatePropertyInput whose fields are all Input types.
type PodTemplatePropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Template defines the pods that will be created from this pod template.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Template PodTemplateSpecInput `pulumi:"template"`

}

func (a PodTemplatePropertyArgs) ElementType() reflect.Type {
	return _PodTemplatePropertyType
}

func (a PodTemplatePropertyArgs) ToPodTemplatePropertyOutput() PodTemplatePropertyOutput {
	return pulumi.ToOutput(a).(PodTemplatePropertyOutput)
}

func (a PodTemplatePropertyArgs) ToPodTemplatePropertyOutputWithContext(ctx context.Context) PodTemplatePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PodTemplatePropertyOutput)
}

// PodTemplatePropertyOutput is an output type that resolves to a Input.
type PodTemplatePropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PodTemplatePropertyOutput{}) }

func (PodTemplatePropertyOutput) ElementType() reflect.Type {
	return _PodTemplatePropertyType
}

func (o PodTemplatePropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v PodTemplateProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o PodTemplatePropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v PodTemplateProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o PodTemplatePropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v PodTemplateProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o PodTemplatePropertyOutput) Template() PodTemplateSpecOutput {
	return o.Apply(func(v PodTemplateProperty) *PodTemplateSpec {
		return v.Template
	}).(PodTemplateSpecOutput)
}

var _PodTemplatePropertyArrayType = reflect.TypeOf((*[]PodTemplateProperty)(nil)).Elem()

type PodTemplatePropertyArrayInput interface {
	ElementType() reflect.Type

	ToPodTemplatePropertyArrayOutput() PodTemplatePropertyArrayOutput
	ToPodTemplatePropertyArrayOutputWithContext(ctx context.Context) PodTemplatePropertyArrayOutput
}

type PodTemplatePropertyArray []PodTemplatePropertyInput

func (a PodTemplatePropertyArray) ElementType() reflect.Type {
	return _PodTemplatePropertyArrayType
}

func (a PodTemplatePropertyArray) ToPodTemplatePropertyArrayOutput() PodTemplatePropertyArrayOutput {
	return pulumi.ToOutput(a).(PodTemplatePropertyArrayOutput)
}

func (a PodTemplatePropertyArray) ToPodTemplatePropertyArrayOutputWithContext(ctx context.Context) PodTemplatePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PodTemplatePropertyArrayOutput)
}

type PodTemplatePropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PodTemplatePropertyArrayOutput{}) }

func (PodTemplatePropertyArrayOutput) ElementType() reflect.Type {
	return _PodTemplatePropertyArrayType
}

func (o PodTemplatePropertyArrayOutput) Index(i pulumi.IntInput) PodTemplatePropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) PodTemplateProperty {
		return vs[0].([]PodTemplateProperty)[vs[1].(int)]
	}).(PodTemplatePropertyOutput)
}
