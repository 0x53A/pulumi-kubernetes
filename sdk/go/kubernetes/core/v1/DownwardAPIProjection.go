// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents downward API info for projecting into a projected volume. Note that this is identical
// to a downwardAPI volume source without the default mode.
type DownwardAPIProjection struct {
	// Items is a list of DownwardAPIVolume file
	Items []DownwardAPIVolumeFile `pulumi:"items"`

}

var _DownwardAPIProjectionType = reflect.TypeOf((*DownwardAPIProjection)(nil)).Elem()

// DownwardAPIProjectionInput represents an input type that resolves to a DownwardAPIProjection.
type DownwardAPIProjectionInput interface {
	ElementType() reflect.Type

	ToDownwardAPIProjectionOutput() DownwardAPIProjectionOutput
	ToDownwardAPIProjectionOutputWithContext(ctx context.Context) DownwardAPIProjectionOutput
}

// DownwardAPIProjectionArgs is a DownwardAPIProjectionInput whose fields are all Input types.
type DownwardAPIProjectionArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items DownwardAPIVolumeFileArrayInput `pulumi:"items"`

}

func (a DownwardAPIProjectionArgs) ElementType() reflect.Type {
	return _DownwardAPIProjectionType
}

func (a DownwardAPIProjectionArgs) ToDownwardAPIProjectionOutput() DownwardAPIProjectionOutput {
	return pulumi.ToOutput(a).(DownwardAPIProjectionOutput)
}

func (a DownwardAPIProjectionArgs) ToDownwardAPIProjectionOutputWithContext(ctx context.Context) DownwardAPIProjectionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DownwardAPIProjectionOutput)
}

// DownwardAPIProjectionOutput is an output type that resolves to a Input.
type DownwardAPIProjectionOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(DownwardAPIProjectionOutput{}) }

func (DownwardAPIProjectionOutput) ElementType() reflect.Type {
	return _DownwardAPIProjectionType
}

func (o DownwardAPIProjectionOutput) Items() DownwardAPIVolumeFileArrayOutput {
	return o.Apply(func(v DownwardAPIProjection) []DownwardAPIVolumeFile {
		return v.Items
	}).(DownwardAPIVolumeFileArrayOutput)
}

