// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A single application container that you want to run within a pod.
type Container struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable
	// references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be
	// resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be
	// escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
	// regardless of whether the variable exists or not. Cannot be updated. More info:
	// https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is
	// not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If
	// a variable cannot be resolved, the reference in the input string will be unchanged. The
	// $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will
	// never be expanded, regardless of whether the variable exists or not. Cannot be updated. More
	// info:
	// https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`

	// List of environment variables to set in the container. Cannot be updated.
	Env []EnvVar `pulumi:"env"`

	// List of sources to populate environment variables in the container. The keys defined within a
	// source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container
	// is starting. When a key exists in multiple sources, the value associated with the last source
	// will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot
	// be updated.
	EnvFrom []EnvFromSource `pulumi:"envFrom"`

	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field
	// is optional to allow higher level config management to default or override container images in
	// workload controllers like Deployments and StatefulSets.
	Image *string `pulumi:"image"`

	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is
	// specified, or IfNotPresent otherwise. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`

	// Actions that the management system should take in response to container lifecycle events. Cannot
	// be updated.
	Lifecycle *Lifecycle `pulumi:"lifecycle"`

	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be
	// updated. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe *Probe `pulumi:"livenessProbe"`

	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name
	// (DNS_LABEL). Cannot be updated.
	Name string `pulumi:"name"`

	// List of ports to expose from the container. Exposing a port here gives the system additional
	// information about the network connections a container uses, but is primarily informational. Not
	// specifying a port here DOES NOT prevent that port from being exposed. Any port which is
	// listening on the default "0.0.0.0" address inside a container will be accessible from the
	// network. Cannot be updated.
	Ports []ContainerPort `pulumi:"ports"`

	// Periodic probe of container service readiness. Container will be removed from service endpoints
	// if the probe fails. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe *Probe `pulumi:"readinessProbe"`

	// Compute Resources required by this container. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Resources *ResourceRequirements `pulumi:"resources"`

	// Security options the pod should run with. More info:
	// https://kubernetes.io/docs/concepts/policy/security-context/ More info:
	// https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *SecurityContext `pulumi:"securityContext"`

	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes
	// are executed until this completes successfully. If this probe fails, the Pod will be restarted,
	// just as if the livenessProbe failed. This can be used to provide different probe parameters at
	// the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache,
	// than during steady-state operation. This cannot be updated. This is an alpha feature enabled by
	// the StartupProbe feature flag. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe *Probe `pulumi:"startupProbe"`

	// Whether this container should allocate a buffer for stdin in the container runtime. If this is
	// not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `pulumi:"stdin"`

	// Whether the container runtime should close the stdin channel after it has been opened by a
	// single attach. When stdin is true the stdin stream will remain open across multiple attach
	// sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
	// first client attaches to stdin, and then remains open and accepts data until the client
	// disconnects, at which time stdin is closed and remains closed until the container is restarted.
	// If this flag is false, a container processes that reads from stdin will never receive an EOF.
	// Default is false
	StdinOnce *bool `pulumi:"stdinOnce"`

	// Optional: Path at which the file to which the container's termination message will be written is
	// mounted into the container's filesystem. Message written is intended to be brief final status,
	// such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes.
	// The total message length across all containers will be limited to 12kb. Defaults to
	// /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`

	// Indicate how the termination message should be populated. File will use the contents of
	// terminationMessagePath to populate the container status message on both success and failure.
	// FallbackToLogsOnError will use the last chunk of container log output if the termination message
	// file is empty and the container exited with an error. The log output is limited to 2048 bytes or
	// 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`

	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
	// Default is false.
	Tty *bool `pulumi:"tty"`

	// volumeDevices is the list of block devices to be used by the container. This is a beta feature.
	VolumeDevices []VolumeDevice `pulumi:"volumeDevices"`

	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`

	// Container's working directory. If not specified, the container runtime's default will be used,
	// which might be configured in the container image. Cannot be updated.
	WorkingDir *string `pulumi:"workingDir"`

}

var _ContainerType = reflect.TypeOf((*Container)(nil)).Elem()

// ContainerInput represents an input type that resolves to a Container.
type ContainerInput interface {
	ElementType() reflect.Type

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(ctx context.Context) ContainerOutput
}

// ContainerArgs is a ContainerInput whose fields are all Input types.
type ContainerArgs struct {
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name
	// (DNS_LABEL). Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`

	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable
	// references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be
	// resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be
	// escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
	// regardless of whether the variable exists or not. Cannot be updated. More info:
	// https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is
	// not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If
	// a variable cannot be resolved, the reference in the input string will be unchanged. The
	// $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will
	// never be expanded, regardless of whether the variable exists or not. Cannot be updated. More
	// info:
	// https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`

	// List of environment variables to set in the container. Cannot be updated.
	Env EnvVarArrayInput `pulumi:"env"`

	// List of sources to populate environment variables in the container. The keys defined within a
	// source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container
	// is starting. When a key exists in multiple sources, the value associated with the last source
	// will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot
	// be updated.
	EnvFrom EnvFromSourceArrayInput `pulumi:"envFrom"`

	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field
	// is optional to allow higher level config management to default or override container images in
	// workload controllers like Deployments and StatefulSets.
	Image pulumi.StringInput `pulumi:"image"`

	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is
	// specified, or IfNotPresent otherwise. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringInput `pulumi:"imagePullPolicy"`

	// Actions that the management system should take in response to container lifecycle events. Cannot
	// be updated.
	Lifecycle LifecycleInput `pulumi:"lifecycle"`

	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be
	// updated. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe ProbeInput `pulumi:"livenessProbe"`

	// List of ports to expose from the container. Exposing a port here gives the system additional
	// information about the network connections a container uses, but is primarily informational. Not
	// specifying a port here DOES NOT prevent that port from being exposed. Any port which is
	// listening on the default "0.0.0.0" address inside a container will be accessible from the
	// network. Cannot be updated.
	Ports ContainerPortArrayInput `pulumi:"ports"`

	// Periodic probe of container service readiness. Container will be removed from service endpoints
	// if the probe fails. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe ProbeInput `pulumi:"readinessProbe"`

	// Compute Resources required by this container. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Resources ResourceRequirementsInput `pulumi:"resources"`

	// Security options the pod should run with. More info:
	// https://kubernetes.io/docs/concepts/policy/security-context/ More info:
	// https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext SecurityContextInput `pulumi:"securityContext"`

	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes
	// are executed until this completes successfully. If this probe fails, the Pod will be restarted,
	// just as if the livenessProbe failed. This can be used to provide different probe parameters at
	// the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache,
	// than during steady-state operation. This cannot be updated. This is an alpha feature enabled by
	// the StartupProbe feature flag. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe ProbeInput `pulumi:"startupProbe"`

	// Whether this container should allocate a buffer for stdin in the container runtime. If this is
	// not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin pulumi.BoolInput `pulumi:"stdin"`

	// Whether the container runtime should close the stdin channel after it has been opened by a
	// single attach. When stdin is true the stdin stream will remain open across multiple attach
	// sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
	// first client attaches to stdin, and then remains open and accepts data until the client
	// disconnects, at which time stdin is closed and remains closed until the container is restarted.
	// If this flag is false, a container processes that reads from stdin will never receive an EOF.
	// Default is false
	StdinOnce pulumi.BoolInput `pulumi:"stdinOnce"`

	// Optional: Path at which the file to which the container's termination message will be written is
	// mounted into the container's filesystem. Message written is intended to be brief final status,
	// such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes.
	// The total message length across all containers will be limited to 12kb. Defaults to
	// /dev/termination-log. Cannot be updated.
	TerminationMessagePath pulumi.StringInput `pulumi:"terminationMessagePath"`

	// Indicate how the termination message should be populated. File will use the contents of
	// terminationMessagePath to populate the container status message on both success and failure.
	// FallbackToLogsOnError will use the last chunk of container log output if the termination message
	// file is empty and the container exited with an error. The log output is limited to 2048 bytes or
	// 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringInput `pulumi:"terminationMessagePolicy"`

	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
	// Default is false.
	Tty pulumi.BoolInput `pulumi:"tty"`

	// volumeDevices is the list of block devices to be used by the container. This is a beta feature.
	VolumeDevices VolumeDeviceArrayInput `pulumi:"volumeDevices"`

	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`

	// Container's working directory. If not specified, the container runtime's default will be used,
	// which might be configured in the container image. Cannot be updated.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`

}

func (a ContainerArgs) ElementType() reflect.Type {
	return _ContainerType
}

func (a ContainerArgs) ToContainerOutput() ContainerOutput {
	return pulumi.ToOutput(a).(ContainerOutput)
}

func (a ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ContainerOutput)
}

// ContainerOutput is an output type that resolves to a Input.
type ContainerOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ContainerOutput{}) }

func (ContainerOutput) ElementType() reflect.Type {
	return _ContainerType
}

func (o ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.Apply(func(v Container) []string {
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.Apply(func(v Container) []string {
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o ContainerOutput) Env() EnvVarArrayOutput {
	return o.Apply(func(v Container) []EnvVar {
		return v.Env
	}).(EnvVarArrayOutput)
}

func (o ContainerOutput) EnvFrom() EnvFromSourceArrayOutput {
	return o.Apply(func(v Container) []EnvFromSource {
		return v.EnvFrom
	}).(EnvFromSourceArrayOutput)
}

func (o ContainerOutput) Image() pulumi.StringOutput {
	return o.Apply(func(v Container) *string {
		return v.Image
	}).(pulumi.StringOutput)
}

func (o ContainerOutput) ImagePullPolicy() pulumi.StringOutput {
	return o.Apply(func(v Container) *string {
		return v.ImagePullPolicy
	}).(pulumi.StringOutput)
}

func (o ContainerOutput) Lifecycle() LifecycleOutput {
	return o.Apply(func(v Container) *Lifecycle {
		return v.Lifecycle
	}).(LifecycleOutput)
}

func (o ContainerOutput) LivenessProbe() ProbeOutput {
	return o.Apply(func(v Container) *Probe {
		return v.LivenessProbe
	}).(ProbeOutput)
}

func (o ContainerOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v Container) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o ContainerOutput) Ports() ContainerPortArrayOutput {
	return o.Apply(func(v Container) []ContainerPort {
		return v.Ports
	}).(ContainerPortArrayOutput)
}

func (o ContainerOutput) ReadinessProbe() ProbeOutput {
	return o.Apply(func(v Container) *Probe {
		return v.ReadinessProbe
	}).(ProbeOutput)
}

func (o ContainerOutput) Resources() ResourceRequirementsOutput {
	return o.Apply(func(v Container) *ResourceRequirements {
		return v.Resources
	}).(ResourceRequirementsOutput)
}

func (o ContainerOutput) SecurityContext() SecurityContextOutput {
	return o.Apply(func(v Container) *SecurityContext {
		return v.SecurityContext
	}).(SecurityContextOutput)
}

func (o ContainerOutput) StartupProbe() ProbeOutput {
	return o.Apply(func(v Container) *Probe {
		return v.StartupProbe
	}).(ProbeOutput)
}

func (o ContainerOutput) Stdin() pulumi.BoolOutput {
	return o.Apply(func(v Container) *bool {
		return v.Stdin
	}).(pulumi.BoolOutput)
}

func (o ContainerOutput) StdinOnce() pulumi.BoolOutput {
	return o.Apply(func(v Container) *bool {
		return v.StdinOnce
	}).(pulumi.BoolOutput)
}

func (o ContainerOutput) TerminationMessagePath() pulumi.StringOutput {
	return o.Apply(func(v Container) *string {
		return v.TerminationMessagePath
	}).(pulumi.StringOutput)
}

func (o ContainerOutput) TerminationMessagePolicy() pulumi.StringOutput {
	return o.Apply(func(v Container) *string {
		return v.TerminationMessagePolicy
	}).(pulumi.StringOutput)
}

func (o ContainerOutput) Tty() pulumi.BoolOutput {
	return o.Apply(func(v Container) *bool {
		return v.Tty
	}).(pulumi.BoolOutput)
}

func (o ContainerOutput) VolumeDevices() VolumeDeviceArrayOutput {
	return o.Apply(func(v Container) []VolumeDevice {
		return v.VolumeDevices
	}).(VolumeDeviceArrayOutput)
}

func (o ContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.Apply(func(v Container) []VolumeMount {
		return v.VolumeMounts
	}).(VolumeMountArrayOutput)
}

func (o ContainerOutput) WorkingDir() pulumi.StringOutput {
	return o.Apply(func(v Container) *string {
		return v.WorkingDir
	}).(pulumi.StringOutput)
}

var _ContainerArrayType = reflect.TypeOf((*[]Container)(nil)).Elem()

type ContainerArrayInput interface {
	ElementType() reflect.Type

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (a ContainerArray) ElementType() reflect.Type {
	return _ContainerArrayType
}

func (a ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return pulumi.ToOutput(a).(ContainerArrayOutput)
}

func (a ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ContainerArrayOutput)
}

type ContainerArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ContainerArrayOutput{}) }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return _ContainerArrayType
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) Container {
		return vs[0].([]Container)[vs[1].(int)]
	}).(ContainerOutput)
}
