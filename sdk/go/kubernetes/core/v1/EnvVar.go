// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// EnvVar represents an environment variable present in a Container.
type EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`

	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in
	// the container and any service environment variables. If a variable cannot be resolved, the
	// reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
	// double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether
	// the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`

	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *EnvVarSource `pulumi:"valueFrom"`

}

var _EnvVarType = reflect.TypeOf((*EnvVar)(nil)).Elem()

// EnvVarInput represents an input type that resolves to a EnvVar.
type EnvVarInput interface {
	ElementType() reflect.Type

	ToEnvVarOutput() EnvVarOutput
	ToEnvVarOutputWithContext(ctx context.Context) EnvVarOutput
}

// EnvVarArgs is a EnvVarInput whose fields are all Input types.
type EnvVarArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`

	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in
	// the container and any service environment variables. If a variable cannot be resolved, the
	// reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
	// double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether
	// the variable exists or not. Defaults to "".
	Value pulumi.StringInput `pulumi:"value"`

	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom EnvVarSourceInput `pulumi:"valueFrom"`

}

func (a EnvVarArgs) ElementType() reflect.Type {
	return _EnvVarType
}

func (a EnvVarArgs) ToEnvVarOutput() EnvVarOutput {
	return pulumi.ToOutput(a).(EnvVarOutput)
}

func (a EnvVarArgs) ToEnvVarOutputWithContext(ctx context.Context) EnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EnvVarOutput)
}

// EnvVarOutput is an output type that resolves to a Input.
type EnvVarOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(EnvVarOutput{}) }

func (EnvVarOutput) ElementType() reflect.Type {
	return _EnvVarType
}

func (o EnvVarOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v EnvVar) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o EnvVarOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v EnvVar) *string {
		return v.Value
	}).(pulumi.StringOutput)
}

func (o EnvVarOutput) ValueFrom() EnvVarSourceOutput {
	return o.Apply(func(v EnvVar) *EnvVarSource {
		return v.ValueFrom
	}).(EnvVarSourceOutput)
}

var _EnvVarArrayType = reflect.TypeOf((*[]EnvVar)(nil)).Elem()

type EnvVarArrayInput interface {
	ElementType() reflect.Type

	ToEnvVarArrayOutput() EnvVarArrayOutput
	ToEnvVarArrayOutputWithContext(ctx context.Context) EnvVarArrayOutput
}

type EnvVarArray []EnvVarInput

func (a EnvVarArray) ElementType() reflect.Type {
	return _EnvVarArrayType
}

func (a EnvVarArray) ToEnvVarArrayOutput() EnvVarArrayOutput {
	return pulumi.ToOutput(a).(EnvVarArrayOutput)
}

func (a EnvVarArray) ToEnvVarArrayOutputWithContext(ctx context.Context) EnvVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EnvVarArrayOutput)
}

type EnvVarArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(EnvVarArrayOutput{}) }

func (EnvVarArrayOutput) ElementType() reflect.Type {
	return _EnvVarArrayType
}

func (o EnvVarArrayOutput) Index(i pulumi.IntInput) EnvVarOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) EnvVar {
		return vs[0].([]EnvVar)[vs[1].(int)]
	}).(EnvVarOutput)
}
