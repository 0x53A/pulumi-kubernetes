// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ObjectReference contains enough information to let you inspect or modify the referred object.
type ObjectReference struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`

	// If referring to a piece of an object instead of an entire object, this string should contain a
	// valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example,
	// if the object reference is to a container within a pod, this would take on a value like:
	// "spec.containers{name}" (where "name" refers to the name of the container that triggered the
	// event) or if no container name is specified "spec.containers[2]" (container with index 2 in this
	// pod). This syntax is chosen only to have some well-defined way of referencing a part of an
	// object.
	FieldPath *string `pulumi:"fieldPath"`

	// Kind of the referent. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`

	// Namespace of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`

	// Specific resourceVersion to which this reference is made, if any. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`

	// UID of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`

}

var _ObjectReferenceType = reflect.TypeOf((*ObjectReference)(nil)).Elem()

// ObjectReferenceInput represents an input type that resolves to a ObjectReference.
type ObjectReferenceInput interface {
	ElementType() reflect.Type

	ToObjectReferenceOutput() ObjectReferenceOutput
	ToObjectReferenceOutputWithContext(ctx context.Context) ObjectReferenceOutput
}

// ObjectReferenceArgs is a ObjectReferenceInput whose fields are all Input types.
type ObjectReferenceArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// If referring to a piece of an object instead of an entire object, this string should contain a
	// valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example,
	// if the object reference is to a container within a pod, this would take on a value like:
	// "spec.containers{name}" (where "name" refers to the name of the container that triggered the
	// event) or if no container name is specified "spec.containers[2]" (container with index 2 in this
	// pod). This syntax is chosen only to have some well-defined way of referencing a part of an
	// object.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`

	// Kind of the referent. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`

	// Namespace of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringInput `pulumi:"namespace"`

	// Specific resourceVersion to which this reference is made, if any. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringInput `pulumi:"resourceVersion"`

	// UID of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringInput `pulumi:"uid"`

}

func (a ObjectReferenceArgs) ElementType() reflect.Type {
	return _ObjectReferenceType
}

func (a ObjectReferenceArgs) ToObjectReferenceOutput() ObjectReferenceOutput {
	return pulumi.ToOutput(a).(ObjectReferenceOutput)
}

func (a ObjectReferenceArgs) ToObjectReferenceOutputWithContext(ctx context.Context) ObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ObjectReferenceOutput)
}

// ObjectReferenceOutput is an output type that resolves to a Input.
type ObjectReferenceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ObjectReferenceOutput{}) }

func (ObjectReferenceOutput) ElementType() reflect.Type {
	return _ObjectReferenceType
}

func (o ObjectReferenceOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v ObjectReference) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o ObjectReferenceOutput) FieldPath() pulumi.StringOutput {
	return o.Apply(func(v ObjectReference) *string {
		return v.FieldPath
	}).(pulumi.StringOutput)
}

func (o ObjectReferenceOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v ObjectReference) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o ObjectReferenceOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v ObjectReference) *string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o ObjectReferenceOutput) Namespace() pulumi.StringOutput {
	return o.Apply(func(v ObjectReference) *string {
		return v.Namespace
	}).(pulumi.StringOutput)
}

func (o ObjectReferenceOutput) ResourceVersion() pulumi.StringOutput {
	return o.Apply(func(v ObjectReference) *string {
		return v.ResourceVersion
	}).(pulumi.StringOutput)
}

func (o ObjectReferenceOutput) Uid() pulumi.StringOutput {
	return o.Apply(func(v ObjectReference) *string {
		return v.Uid
	}).(pulumi.StringOutput)
}

var _ObjectReferenceArrayType = reflect.TypeOf((*[]ObjectReference)(nil)).Elem()

type ObjectReferenceArrayInput interface {
	ElementType() reflect.Type

	ToObjectReferenceArrayOutput() ObjectReferenceArrayOutput
	ToObjectReferenceArrayOutputWithContext(ctx context.Context) ObjectReferenceArrayOutput
}

type ObjectReferenceArray []ObjectReferenceInput

func (a ObjectReferenceArray) ElementType() reflect.Type {
	return _ObjectReferenceArrayType
}

func (a ObjectReferenceArray) ToObjectReferenceArrayOutput() ObjectReferenceArrayOutput {
	return pulumi.ToOutput(a).(ObjectReferenceArrayOutput)
}

func (a ObjectReferenceArray) ToObjectReferenceArrayOutputWithContext(ctx context.Context) ObjectReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ObjectReferenceArrayOutput)
}

type ObjectReferenceArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ObjectReferenceArrayOutput{}) }

func (ObjectReferenceArrayOutput) ElementType() reflect.Type {
	return _ObjectReferenceArrayType
}

func (o ObjectReferenceArrayOutput) Index(i pulumi.IntInput) ObjectReferenceOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ObjectReference {
		return vs[0].([]ObjectReference)[vs[1].(int)]
	}).(ObjectReferenceOutput)
}
