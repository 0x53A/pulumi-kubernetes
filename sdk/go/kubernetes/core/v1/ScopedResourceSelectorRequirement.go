// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an
// operator that relates the scope name and values.
type ScopedResourceSelectorRequirement struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist.
	Operator string `pulumi:"operator"`

	// The name of the scope that the selector applies to.
	ScopeName string `pulumi:"scopeName"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty.
	// If the operator is Exists or DoesNotExist, the values array must be empty. This array is
	// replaced during a strategic merge patch.
	Values []string `pulumi:"values"`

}

var _ScopedResourceSelectorRequirementType = reflect.TypeOf((*ScopedResourceSelectorRequirement)(nil)).Elem()

// ScopedResourceSelectorRequirementInput represents an input type that resolves to a ScopedResourceSelectorRequirement.
type ScopedResourceSelectorRequirementInput interface {
	ElementType() reflect.Type

	ToScopedResourceSelectorRequirementOutput() ScopedResourceSelectorRequirementOutput
	ToScopedResourceSelectorRequirementOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementOutput
}

// ScopedResourceSelectorRequirementArgs is a ScopedResourceSelectorRequirementInput whose fields are all Input types.
type ScopedResourceSelectorRequirementArgs struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`

	// The name of the scope that the selector applies to.
	ScopeName pulumi.StringInput `pulumi:"scopeName"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty.
	// If the operator is Exists or DoesNotExist, the values array must be empty. This array is
	// replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`

}

func (a ScopedResourceSelectorRequirementArgs) ElementType() reflect.Type {
	return _ScopedResourceSelectorRequirementType
}

func (a ScopedResourceSelectorRequirementArgs) ToScopedResourceSelectorRequirementOutput() ScopedResourceSelectorRequirementOutput {
	return pulumi.ToOutput(a).(ScopedResourceSelectorRequirementOutput)
}

func (a ScopedResourceSelectorRequirementArgs) ToScopedResourceSelectorRequirementOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ScopedResourceSelectorRequirementOutput)
}

// ScopedResourceSelectorRequirementOutput is an output type that resolves to a Input.
type ScopedResourceSelectorRequirementOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ScopedResourceSelectorRequirementOutput{}) }

func (ScopedResourceSelectorRequirementOutput) ElementType() reflect.Type {
	return _ScopedResourceSelectorRequirementType
}

func (o ScopedResourceSelectorRequirementOutput) Operator() pulumi.StringOutput {
	return o.Apply(func(v ScopedResourceSelectorRequirement) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

func (o ScopedResourceSelectorRequirementOutput) ScopeName() pulumi.StringOutput {
	return o.Apply(func(v ScopedResourceSelectorRequirement) string {
		return v.ScopeName
	}).(pulumi.StringOutput)
}

func (o ScopedResourceSelectorRequirementOutput) Values() pulumi.StringArrayOutput {
	return o.Apply(func(v ScopedResourceSelectorRequirement) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

var _ScopedResourceSelectorRequirementArrayType = reflect.TypeOf((*[]ScopedResourceSelectorRequirement)(nil)).Elem()

type ScopedResourceSelectorRequirementArrayInput interface {
	ElementType() reflect.Type

	ToScopedResourceSelectorRequirementArrayOutput() ScopedResourceSelectorRequirementArrayOutput
	ToScopedResourceSelectorRequirementArrayOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementArrayOutput
}

type ScopedResourceSelectorRequirementArray []ScopedResourceSelectorRequirementInput

func (a ScopedResourceSelectorRequirementArray) ElementType() reflect.Type {
	return _ScopedResourceSelectorRequirementArrayType
}

func (a ScopedResourceSelectorRequirementArray) ToScopedResourceSelectorRequirementArrayOutput() ScopedResourceSelectorRequirementArrayOutput {
	return pulumi.ToOutput(a).(ScopedResourceSelectorRequirementArrayOutput)
}

func (a ScopedResourceSelectorRequirementArray) ToScopedResourceSelectorRequirementArrayOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ScopedResourceSelectorRequirementArrayOutput)
}

type ScopedResourceSelectorRequirementArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ScopedResourceSelectorRequirementArrayOutput{}) }

func (ScopedResourceSelectorRequirementArrayOutput) ElementType() reflect.Type {
	return _ScopedResourceSelectorRequirementArrayType
}

func (o ScopedResourceSelectorRequirementArrayOutput) Index(i pulumi.IntInput) ScopedResourceSelectorRequirementOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ScopedResourceSelectorRequirement {
		return vs[0].([]ScopedResourceSelectorRequirement)[vs[1].(int)]
	}).(ScopedResourceSelectorRequirementOutput)
}
