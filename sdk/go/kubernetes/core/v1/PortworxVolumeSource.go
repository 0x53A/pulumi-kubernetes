// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// PortworxVolumeSource represents a Portworx volume resource.
type PortworxVolumeSource struct {
	// FSType represents the filesystem type to mount Must be a filesystem type supported by the host
	// operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`

	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`

	// VolumeID uniquely identifies a Portworx volume
	VolumeID string `pulumi:"volumeID"`

}

var _PortworxVolumeSourceType = reflect.TypeOf((*PortworxVolumeSource)(nil)).Elem()

// PortworxVolumeSourceInput represents an input type that resolves to a PortworxVolumeSource.
type PortworxVolumeSourceInput interface {
	ElementType() reflect.Type

	ToPortworxVolumeSourceOutput() PortworxVolumeSourceOutput
	ToPortworxVolumeSourceOutputWithContext(ctx context.Context) PortworxVolumeSourceOutput
}

// PortworxVolumeSourceArgs is a PortworxVolumeSourceInput whose fields are all Input types.
type PortworxVolumeSourceArgs struct {
	// VolumeID uniquely identifies a Portworx volume
	VolumeID pulumi.StringInput `pulumi:"volumeID"`

	// FSType represents the filesystem type to mount Must be a filesystem type supported by the host
	// operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringInput `pulumi:"fsType"`

	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

}

func (a PortworxVolumeSourceArgs) ElementType() reflect.Type {
	return _PortworxVolumeSourceType
}

func (a PortworxVolumeSourceArgs) ToPortworxVolumeSourceOutput() PortworxVolumeSourceOutput {
	return pulumi.ToOutput(a).(PortworxVolumeSourceOutput)
}

func (a PortworxVolumeSourceArgs) ToPortworxVolumeSourceOutputWithContext(ctx context.Context) PortworxVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PortworxVolumeSourceOutput)
}

// PortworxVolumeSourceOutput is an output type that resolves to a Input.
type PortworxVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PortworxVolumeSourceOutput{}) }

func (PortworxVolumeSourceOutput) ElementType() reflect.Type {
	return _PortworxVolumeSourceType
}

func (o PortworxVolumeSourceOutput) FsType() pulumi.StringOutput {
	return o.Apply(func(v PortworxVolumeSource) *string {
		return v.FsType
	}).(pulumi.StringOutput)
}

func (o PortworxVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v PortworxVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o PortworxVolumeSourceOutput) VolumeID() pulumi.StringOutput {
	return o.Apply(func(v PortworxVolumeSource) string {
		return v.VolumeID
	}).(pulumi.StringOutput)
}

