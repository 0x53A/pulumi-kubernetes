// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A node selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type NodeSelectorRequirement struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty.
	// If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt
	// or Lt, the values array must have a single element, which will be interpreted as an integer.
	// This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`

}

var _NodeSelectorRequirementType = reflect.TypeOf((*NodeSelectorRequirement)(nil)).Elem()

// NodeSelectorRequirementInput represents an input type that resolves to a NodeSelectorRequirement.
type NodeSelectorRequirementInput interface {
	ElementType() reflect.Type

	ToNodeSelectorRequirementOutput() NodeSelectorRequirementOutput
	ToNodeSelectorRequirementOutputWithContext(ctx context.Context) NodeSelectorRequirementOutput
}

// NodeSelectorRequirementArgs is a NodeSelectorRequirementInput whose fields are all Input types.
type NodeSelectorRequirementArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty.
	// If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt
	// or Lt, the values array must have a single element, which will be interpreted as an integer.
	// This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`

}

func (a NodeSelectorRequirementArgs) ElementType() reflect.Type {
	return _NodeSelectorRequirementType
}

func (a NodeSelectorRequirementArgs) ToNodeSelectorRequirementOutput() NodeSelectorRequirementOutput {
	return pulumi.ToOutput(a).(NodeSelectorRequirementOutput)
}

func (a NodeSelectorRequirementArgs) ToNodeSelectorRequirementOutputWithContext(ctx context.Context) NodeSelectorRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodeSelectorRequirementOutput)
}

// NodeSelectorRequirementOutput is an output type that resolves to a Input.
type NodeSelectorRequirementOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodeSelectorRequirementOutput{}) }

func (NodeSelectorRequirementOutput) ElementType() reflect.Type {
	return _NodeSelectorRequirementType
}

func (o NodeSelectorRequirementOutput) Key() pulumi.StringOutput {
	return o.Apply(func(v NodeSelectorRequirement) string {
		return v.Key
	}).(pulumi.StringOutput)
}

func (o NodeSelectorRequirementOutput) Operator() pulumi.StringOutput {
	return o.Apply(func(v NodeSelectorRequirement) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

func (o NodeSelectorRequirementOutput) Values() pulumi.StringArrayOutput {
	return o.Apply(func(v NodeSelectorRequirement) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

var _NodeSelectorRequirementArrayType = reflect.TypeOf((*[]NodeSelectorRequirement)(nil)).Elem()

type NodeSelectorRequirementArrayInput interface {
	ElementType() reflect.Type

	ToNodeSelectorRequirementArrayOutput() NodeSelectorRequirementArrayOutput
	ToNodeSelectorRequirementArrayOutputWithContext(ctx context.Context) NodeSelectorRequirementArrayOutput
}

type NodeSelectorRequirementArray []NodeSelectorRequirementInput

func (a NodeSelectorRequirementArray) ElementType() reflect.Type {
	return _NodeSelectorRequirementArrayType
}

func (a NodeSelectorRequirementArray) ToNodeSelectorRequirementArrayOutput() NodeSelectorRequirementArrayOutput {
	return pulumi.ToOutput(a).(NodeSelectorRequirementArrayOutput)
}

func (a NodeSelectorRequirementArray) ToNodeSelectorRequirementArrayOutputWithContext(ctx context.Context) NodeSelectorRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodeSelectorRequirementArrayOutput)
}

type NodeSelectorRequirementArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodeSelectorRequirementArrayOutput{}) }

func (NodeSelectorRequirementArrayOutput) ElementType() reflect.Type {
	return _NodeSelectorRequirementArrayType
}

func (o NodeSelectorRequirementArrayOutput) Index(i pulumi.IntInput) NodeSelectorRequirementOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NodeSelectorRequirement {
		return vs[0].([]NodeSelectorRequirement)[vs[1].(int)]
	}).(NodeSelectorRequirementOutput)
}
