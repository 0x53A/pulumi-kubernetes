// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a
// no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PreferredSchedulingTerm struct {
	// A node selector term, associated with the corresponding weight.
	Preference NodeSelectorTerm `pulumi:"preference"`

	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int `pulumi:"weight"`

}

var _PreferredSchedulingTermType = reflect.TypeOf((*PreferredSchedulingTerm)(nil)).Elem()

// PreferredSchedulingTermInput represents an input type that resolves to a PreferredSchedulingTerm.
type PreferredSchedulingTermInput interface {
	ElementType() reflect.Type

	ToPreferredSchedulingTermOutput() PreferredSchedulingTermOutput
	ToPreferredSchedulingTermOutputWithContext(ctx context.Context) PreferredSchedulingTermOutput
}

// PreferredSchedulingTermArgs is a PreferredSchedulingTermInput whose fields are all Input types.
type PreferredSchedulingTermArgs struct {
	// A node selector term, associated with the corresponding weight.
	Preference NodeSelectorTermInput `pulumi:"preference"`

	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`

}

func (a PreferredSchedulingTermArgs) ElementType() reflect.Type {
	return _PreferredSchedulingTermType
}

func (a PreferredSchedulingTermArgs) ToPreferredSchedulingTermOutput() PreferredSchedulingTermOutput {
	return pulumi.ToOutput(a).(PreferredSchedulingTermOutput)
}

func (a PreferredSchedulingTermArgs) ToPreferredSchedulingTermOutputWithContext(ctx context.Context) PreferredSchedulingTermOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PreferredSchedulingTermOutput)
}

// PreferredSchedulingTermOutput is an output type that resolves to a Input.
type PreferredSchedulingTermOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PreferredSchedulingTermOutput{}) }

func (PreferredSchedulingTermOutput) ElementType() reflect.Type {
	return _PreferredSchedulingTermType
}

func (o PreferredSchedulingTermOutput) Preference() NodeSelectorTermOutput {
	return o.Apply(func(v PreferredSchedulingTerm) NodeSelectorTerm {
		return v.Preference
	}).(NodeSelectorTermOutput)
}

func (o PreferredSchedulingTermOutput) Weight() pulumi.IntOutput {
	return o.Apply(func(v PreferredSchedulingTerm) int {
		return v.Weight
	}).(pulumi.IntOutput)
}

var _PreferredSchedulingTermArrayType = reflect.TypeOf((*[]PreferredSchedulingTerm)(nil)).Elem()

type PreferredSchedulingTermArrayInput interface {
	ElementType() reflect.Type

	ToPreferredSchedulingTermArrayOutput() PreferredSchedulingTermArrayOutput
	ToPreferredSchedulingTermArrayOutputWithContext(ctx context.Context) PreferredSchedulingTermArrayOutput
}

type PreferredSchedulingTermArray []PreferredSchedulingTermInput

func (a PreferredSchedulingTermArray) ElementType() reflect.Type {
	return _PreferredSchedulingTermArrayType
}

func (a PreferredSchedulingTermArray) ToPreferredSchedulingTermArrayOutput() PreferredSchedulingTermArrayOutput {
	return pulumi.ToOutput(a).(PreferredSchedulingTermArrayOutput)
}

func (a PreferredSchedulingTermArray) ToPreferredSchedulingTermArrayOutputWithContext(ctx context.Context) PreferredSchedulingTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PreferredSchedulingTermArrayOutput)
}

type PreferredSchedulingTermArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PreferredSchedulingTermArrayOutput{}) }

func (PreferredSchedulingTermArrayOutput) ElementType() reflect.Type {
	return _PreferredSchedulingTermArrayType
}

func (o PreferredSchedulingTermArrayOutput) Index(i pulumi.IntInput) PreferredSchedulingTermOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) PreferredSchedulingTerm {
		return vs[0].([]PreferredSchedulingTerm)[vs[1].(int)]
	}).(PreferredSchedulingTermOutput)
}
