// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type ResourceQuotaSpec struct {
	// hard is the set of desired hard limits for each named resource. More info:
	// https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard map[string]string `pulumi:"hard"`

	// scopeSelector is also a collection of filters like scopes that must match each object tracked by
	// a quota but expressed using ScopeSelectorOperator in combination with possible values. For a
	// resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
	ScopeSelector *ScopeSelector `pulumi:"scopeSelector"`

	// A collection of filters that must match each object tracked by a quota. If not specified, the
	// quota matches all objects.
	Scopes []string `pulumi:"scopes"`

}

var _ResourceQuotaSpecType = reflect.TypeOf((*ResourceQuotaSpec)(nil)).Elem()

// ResourceQuotaSpecInput represents an input type that resolves to a ResourceQuotaSpec.
type ResourceQuotaSpecInput interface {
	ElementType() reflect.Type

	ToResourceQuotaSpecOutput() ResourceQuotaSpecOutput
	ToResourceQuotaSpecOutputWithContext(ctx context.Context) ResourceQuotaSpecOutput
}

// ResourceQuotaSpecArgs is a ResourceQuotaSpecInput whose fields are all Input types.
type ResourceQuotaSpecArgs struct {
	// hard is the set of desired hard limits for each named resource. More info:
	// https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard pulumi.StringMapInput `pulumi:"hard"`

	// scopeSelector is also a collection of filters like scopes that must match each object tracked by
	// a quota but expressed using ScopeSelectorOperator in combination with possible values. For a
	// resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
	ScopeSelector ScopeSelectorInput `pulumi:"scopeSelector"`

	// A collection of filters that must match each object tracked by a quota. If not specified, the
	// quota matches all objects.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`

}

func (a ResourceQuotaSpecArgs) ElementType() reflect.Type {
	return _ResourceQuotaSpecType
}

func (a ResourceQuotaSpecArgs) ToResourceQuotaSpecOutput() ResourceQuotaSpecOutput {
	return pulumi.ToOutput(a).(ResourceQuotaSpecOutput)
}

func (a ResourceQuotaSpecArgs) ToResourceQuotaSpecOutputWithContext(ctx context.Context) ResourceQuotaSpecOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ResourceQuotaSpecOutput)
}

// ResourceQuotaSpecOutput is an output type that resolves to a Input.
type ResourceQuotaSpecOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ResourceQuotaSpecOutput{}) }

func (ResourceQuotaSpecOutput) ElementType() reflect.Type {
	return _ResourceQuotaSpecType
}

func (o ResourceQuotaSpecOutput) Hard() pulumi.StringMapOutput {
	return o.Apply(func(v ResourceQuotaSpec) map[string]string {
		return v.Hard
	}).(pulumi.StringMapOutput)
}

func (o ResourceQuotaSpecOutput) ScopeSelector() ScopeSelectorOutput {
	return o.Apply(func(v ResourceQuotaSpec) *ScopeSelector {
		return v.ScopeSelector
	}).(ScopeSelectorOutput)
}

func (o ResourceQuotaSpecOutput) Scopes() pulumi.StringArrayOutput {
	return o.Apply(func(v ResourceQuotaSpec) []string {
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

