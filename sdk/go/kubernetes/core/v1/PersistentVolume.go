// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a
// node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolume struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an
	// administrator. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Spec PersistentVolumeSpecOutput `pulumi:"spec"`

	// Status represents the current information/status for the persistent volume. Populated by the
	// system. Read-only. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Status PersistentVolumeStatusOutput `pulumi:"status"`

}

// PersistentVolumeArgs is the set of arguments needed to create a PersistentVolume resource.
type PersistentVolumeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an
	// administrator. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Spec PersistentVolumeSpecInput `pulumi:"spec"`

}

// NewPersistentVolume creates a PersistentVolume resource with the given unique name, arguments, and options.
func NewPersistentVolume(ctx *pulumi.Context, name string, args *PersistentVolumeArgs, opts ...pulumi.ResourceOption) (*PersistentVolume, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("PersistentVolume")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToPersistentVolumeSpecOutput()
		}
	}
	var resource PersistentVolume
	err := ctx.RegisterResource("kubernetes:core/v1:PersistentVolume", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPersistentVolume gets an existing PersistentVolume resource's state with the given name and ID.
func GetPersistentVolume(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*PersistentVolume, error) {
	var resource PersistentVolume
	err := ctx.ReadResource("kubernetes:core/v1:PersistentVolume", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a
// node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolumeProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an
	// administrator. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Spec *PersistentVolumeSpec `pulumi:"spec"`

	// Status represents the current information/status for the persistent volume. Populated by the
	// system. Read-only. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Status PersistentVolumeStatus `pulumi:"status"`

}

var _PersistentVolumePropertyType = reflect.TypeOf((*PersistentVolumeProperty)(nil)).Elem()

// PersistentVolumePropertyInput represents an input type that resolves to a PersistentVolumeProperty.
type PersistentVolumePropertyInput interface {
	ElementType() reflect.Type

	ToPersistentVolumePropertyOutput() PersistentVolumePropertyOutput
	ToPersistentVolumePropertyOutputWithContext(ctx context.Context) PersistentVolumePropertyOutput
}

// PersistentVolumePropertyArgs is a PersistentVolumePropertyInput whose fields are all Input types.
type PersistentVolumePropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an
	// administrator. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Spec PersistentVolumeSpecInput `pulumi:"spec"`

}

func (a PersistentVolumePropertyArgs) ElementType() reflect.Type {
	return _PersistentVolumePropertyType
}

func (a PersistentVolumePropertyArgs) ToPersistentVolumePropertyOutput() PersistentVolumePropertyOutput {
	return pulumi.ToOutput(a).(PersistentVolumePropertyOutput)
}

func (a PersistentVolumePropertyArgs) ToPersistentVolumePropertyOutputWithContext(ctx context.Context) PersistentVolumePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PersistentVolumePropertyOutput)
}

// PersistentVolumePropertyOutput is an output type that resolves to a Input.
type PersistentVolumePropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PersistentVolumePropertyOutput{}) }

func (PersistentVolumePropertyOutput) ElementType() reflect.Type {
	return _PersistentVolumePropertyType
}

func (o PersistentVolumePropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o PersistentVolumePropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o PersistentVolumePropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v PersistentVolumeProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o PersistentVolumePropertyOutput) Spec() PersistentVolumeSpecOutput {
	return o.Apply(func(v PersistentVolumeProperty) *PersistentVolumeSpec {
		return v.Spec
	}).(PersistentVolumeSpecOutput)
}

func (o PersistentVolumePropertyOutput) Status() PersistentVolumeStatusOutput {
	return o.Apply(func(v PersistentVolumeProperty) PersistentVolumeStatus {
		return v.Status
	}).(PersistentVolumeStatusOutput)
}

var _PersistentVolumePropertyArrayType = reflect.TypeOf((*[]PersistentVolumeProperty)(nil)).Elem()

type PersistentVolumePropertyArrayInput interface {
	ElementType() reflect.Type

	ToPersistentVolumePropertyArrayOutput() PersistentVolumePropertyArrayOutput
	ToPersistentVolumePropertyArrayOutputWithContext(ctx context.Context) PersistentVolumePropertyArrayOutput
}

type PersistentVolumePropertyArray []PersistentVolumePropertyInput

func (a PersistentVolumePropertyArray) ElementType() reflect.Type {
	return _PersistentVolumePropertyArrayType
}

func (a PersistentVolumePropertyArray) ToPersistentVolumePropertyArrayOutput() PersistentVolumePropertyArrayOutput {
	return pulumi.ToOutput(a).(PersistentVolumePropertyArrayOutput)
}

func (a PersistentVolumePropertyArray) ToPersistentVolumePropertyArrayOutputWithContext(ctx context.Context) PersistentVolumePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PersistentVolumePropertyArrayOutput)
}

type PersistentVolumePropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PersistentVolumePropertyArrayOutput{}) }

func (PersistentVolumePropertyArrayOutput) ElementType() reflect.Type {
	return _PersistentVolumePropertyArrayType
}

func (o PersistentVolumePropertyArrayOutput) Index(i pulumi.IntInput) PersistentVolumePropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) PersistentVolumeProperty {
		return vs[0].([]PersistentVolumeProperty)[vs[1].(int)]
	}).(PersistentVolumePropertyOutput)
}
