// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ServicePort contains information on service's port.
type ServicePort struct {
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a
	// ServiceSpec must have unique names. When considering the endpoints for a Service, this must
	// match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this
	// service.
	Name *string `pulumi:"name"`

	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer.
	// Usually assigned by the system. If specified, it will be allocated to the service if unused or
	// else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of
	// this Service requires one. More info:
	// https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`

	// The port that will be exposed by this service.
	Port int `pulumi:"port"`

	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `pulumi:"protocol"`

	// Number or name of the port to access on the pods targeted by the service. Number must be in the
	// range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a
	// named port in the target Pod's container ports. If this is not specified, the value of the
	// 'port' field is used (an identity map). This field is ignored for services with clusterIP=None,
	// and should be omitted or set equal to the 'port' field. More info:
	// https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`

}

var _ServicePortType = reflect.TypeOf((*ServicePort)(nil)).Elem()

// ServicePortInput represents an input type that resolves to a ServicePort.
type ServicePortInput interface {
	ElementType() reflect.Type

	ToServicePortOutput() ServicePortOutput
	ToServicePortOutputWithContext(ctx context.Context) ServicePortOutput
}

// ServicePortArgs is a ServicePortInput whose fields are all Input types.
type ServicePortArgs struct {
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`

	// The name of this port within the service. This must be a DNS_LABEL. All ports within a
	// ServiceSpec must have unique names. When considering the endpoints for a Service, this must
	// match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this
	// service.
	Name pulumi.StringInput `pulumi:"name"`

	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer.
	// Usually assigned by the system. If specified, it will be allocated to the service if unused or
	// else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of
	// this Service requires one. More info:
	// https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntInput `pulumi:"nodePort"`

	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol pulumi.StringInput `pulumi:"protocol"`

	// Number or name of the port to access on the pods targeted by the service. Number must be in the
	// range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a
	// named port in the target Pod's container ports. If this is not specified, the value of the
	// 'port' field is used (an identity map). This field is ignored for services with clusterIP=None,
	// and should be omitted or set equal to the 'port' field. More info:
	// https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`

}

func (a ServicePortArgs) ElementType() reflect.Type {
	return _ServicePortType
}

func (a ServicePortArgs) ToServicePortOutput() ServicePortOutput {
	return pulumi.ToOutput(a).(ServicePortOutput)
}

func (a ServicePortArgs) ToServicePortOutputWithContext(ctx context.Context) ServicePortOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServicePortOutput)
}

// ServicePortOutput is an output type that resolves to a Input.
type ServicePortOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ServicePortOutput{}) }

func (ServicePortOutput) ElementType() reflect.Type {
	return _ServicePortType
}

func (o ServicePortOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v ServicePort) *string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o ServicePortOutput) NodePort() pulumi.IntOutput {
	return o.Apply(func(v ServicePort) *int {
		return v.NodePort
	}).(pulumi.IntOutput)
}

func (o ServicePortOutput) Port() pulumi.IntOutput {
	return o.Apply(func(v ServicePort) int {
		return v.Port
	}).(pulumi.IntOutput)
}

func (o ServicePortOutput) Protocol() pulumi.StringOutput {
	return o.Apply(func(v ServicePort) *string {
		return v.Protocol
	}).(pulumi.StringOutput)
}

func (o ServicePortOutput) TargetPort() pulumi.AnyOutput {
	return o.Apply(func(v ServicePort) interface{} {
		return v.TargetPort
	}).(pulumi.AnyOutput)
}

var _ServicePortArrayType = reflect.TypeOf((*[]ServicePort)(nil)).Elem()

type ServicePortArrayInput interface {
	ElementType() reflect.Type

	ToServicePortArrayOutput() ServicePortArrayOutput
	ToServicePortArrayOutputWithContext(ctx context.Context) ServicePortArrayOutput
}

type ServicePortArray []ServicePortInput

func (a ServicePortArray) ElementType() reflect.Type {
	return _ServicePortArrayType
}

func (a ServicePortArray) ToServicePortArrayOutput() ServicePortArrayOutput {
	return pulumi.ToOutput(a).(ServicePortArrayOutput)
}

func (a ServicePortArray) ToServicePortArrayOutputWithContext(ctx context.Context) ServicePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServicePortArrayOutput)
}

type ServicePortArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ServicePortArrayOutput{}) }

func (ServicePortArrayOutput) ElementType() reflect.Type {
	return _ServicePortArrayType
}

func (o ServicePortArrayOutput) Index(i pulumi.IntInput) ServicePortOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ServicePort {
		return vs[0].([]ServicePort)[vs[1].(int)]
	}).(ServicePortOutput)
}
