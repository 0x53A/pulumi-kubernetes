// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents a Photon Controller persistent disk resource.
type PhotonPersistentDiskVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`

	// ID that identifies Photon Controller persistent disk
	PdID string `pulumi:"pdID"`

}

var _PhotonPersistentDiskVolumeSourceType = reflect.TypeOf((*PhotonPersistentDiskVolumeSource)(nil)).Elem()

// PhotonPersistentDiskVolumeSourceInput represents an input type that resolves to a PhotonPersistentDiskVolumeSource.
type PhotonPersistentDiskVolumeSourceInput interface {
	ElementType() reflect.Type

	ToPhotonPersistentDiskVolumeSourceOutput() PhotonPersistentDiskVolumeSourceOutput
	ToPhotonPersistentDiskVolumeSourceOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourceOutput
}

// PhotonPersistentDiskVolumeSourceArgs is a PhotonPersistentDiskVolumeSourceInput whose fields are all Input types.
type PhotonPersistentDiskVolumeSourceArgs struct {
	// ID that identifies Photon Controller persistent disk
	PdID pulumi.StringInput `pulumi:"pdID"`

	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringInput `pulumi:"fsType"`

}

func (a PhotonPersistentDiskVolumeSourceArgs) ElementType() reflect.Type {
	return _PhotonPersistentDiskVolumeSourceType
}

func (a PhotonPersistentDiskVolumeSourceArgs) ToPhotonPersistentDiskVolumeSourceOutput() PhotonPersistentDiskVolumeSourceOutput {
	return pulumi.ToOutput(a).(PhotonPersistentDiskVolumeSourceOutput)
}

func (a PhotonPersistentDiskVolumeSourceArgs) ToPhotonPersistentDiskVolumeSourceOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PhotonPersistentDiskVolumeSourceOutput)
}

// PhotonPersistentDiskVolumeSourceOutput is an output type that resolves to a Input.
type PhotonPersistentDiskVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PhotonPersistentDiskVolumeSourceOutput{}) }

func (PhotonPersistentDiskVolumeSourceOutput) ElementType() reflect.Type {
	return _PhotonPersistentDiskVolumeSourceType
}

func (o PhotonPersistentDiskVolumeSourceOutput) FsType() pulumi.StringOutput {
	return o.Apply(func(v PhotonPersistentDiskVolumeSource) *string {
		return v.FsType
	}).(pulumi.StringOutput)
}

func (o PhotonPersistentDiskVolumeSourceOutput) PdID() pulumi.StringOutput {
	return o.Apply(func(v PhotonPersistentDiskVolumeSource) string {
		return v.PdID
	}).(pulumi.StringOutput)
}

