// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ContainerStatus contains details for the current status of this container.
type ContainerStatus struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID *string `pulumi:"containerID"`

	// The image the container is running. More info:
	// https://kubernetes.io/docs/concepts/containers/images
	Image string `pulumi:"image"`

	// ImageID of the container's image.
	ImageID string `pulumi:"imageID"`

	// Details about the container's last termination condition.
	LastState *ContainerState `pulumi:"lastState"`

	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name string `pulumi:"name"`

	// Specifies whether the container has passed its readiness probe.
	Ready bool `pulumi:"ready"`

	// The number of times the container has been restarted, currently based on the number of dead
	// containers that have not yet been removed. Note that this is calculated from dead containers.
	// But those containers are subject to garbage collection. This value will get capped at 5 by GC.
	RestartCount int `pulumi:"restartCount"`

	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true
	// after startupProbe is considered successful. Resets to false when the container is restarted, or
	// if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started *bool `pulumi:"started"`

	// Details about the container's current condition.
	State *ContainerState `pulumi:"state"`

}

var _ContainerStatusType = reflect.TypeOf((*ContainerStatus)(nil)).Elem()

// ContainerStatusInput represents an input type that resolves to a ContainerStatus.
type ContainerStatusInput interface {
	ElementType() reflect.Type

	ToContainerStatusOutput() ContainerStatusOutput
	ToContainerStatusOutputWithContext(ctx context.Context) ContainerStatusOutput
}

// ContainerStatusArgs is a ContainerStatusInput whose fields are all Input types.
type ContainerStatusArgs struct {
	// The image the container is running. More info:
	// https://kubernetes.io/docs/concepts/containers/images
	Image pulumi.StringInput `pulumi:"image"`

	// ImageID of the container's image.
	ImageID pulumi.StringInput `pulumi:"imageID"`

	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`

	// Specifies whether the container has passed its readiness probe.
	Ready pulumi.BoolInput `pulumi:"ready"`

	// The number of times the container has been restarted, currently based on the number of dead
	// containers that have not yet been removed. Note that this is calculated from dead containers.
	// But those containers are subject to garbage collection. This value will get capped at 5 by GC.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`

	// Container's ID in the format 'docker://<container_id>'.
	ContainerID pulumi.StringInput `pulumi:"containerID"`

	// Details about the container's last termination condition.
	LastState ContainerStateInput `pulumi:"lastState"`

	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true
	// after startupProbe is considered successful. Resets to false when the container is restarted, or
	// if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started pulumi.BoolInput `pulumi:"started"`

	// Details about the container's current condition.
	State ContainerStateInput `pulumi:"state"`

}

func (a ContainerStatusArgs) ElementType() reflect.Type {
	return _ContainerStatusType
}

func (a ContainerStatusArgs) ToContainerStatusOutput() ContainerStatusOutput {
	return pulumi.ToOutput(a).(ContainerStatusOutput)
}

func (a ContainerStatusArgs) ToContainerStatusOutputWithContext(ctx context.Context) ContainerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ContainerStatusOutput)
}

// ContainerStatusOutput is an output type that resolves to a Input.
type ContainerStatusOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ContainerStatusOutput{}) }

func (ContainerStatusOutput) ElementType() reflect.Type {
	return _ContainerStatusType
}

func (o ContainerStatusOutput) ContainerID() pulumi.StringOutput {
	return o.Apply(func(v ContainerStatus) *string {
		return v.ContainerID
	}).(pulumi.StringOutput)
}

func (o ContainerStatusOutput) Image() pulumi.StringOutput {
	return o.Apply(func(v ContainerStatus) string {
		return v.Image
	}).(pulumi.StringOutput)
}

func (o ContainerStatusOutput) ImageID() pulumi.StringOutput {
	return o.Apply(func(v ContainerStatus) string {
		return v.ImageID
	}).(pulumi.StringOutput)
}

func (o ContainerStatusOutput) LastState() ContainerStateOutput {
	return o.Apply(func(v ContainerStatus) *ContainerState {
		return v.LastState
	}).(ContainerStateOutput)
}

func (o ContainerStatusOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v ContainerStatus) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o ContainerStatusOutput) Ready() pulumi.BoolOutput {
	return o.Apply(func(v ContainerStatus) bool {
		return v.Ready
	}).(pulumi.BoolOutput)
}

func (o ContainerStatusOutput) RestartCount() pulumi.IntOutput {
	return o.Apply(func(v ContainerStatus) int {
		return v.RestartCount
	}).(pulumi.IntOutput)
}

func (o ContainerStatusOutput) Started() pulumi.BoolOutput {
	return o.Apply(func(v ContainerStatus) *bool {
		return v.Started
	}).(pulumi.BoolOutput)
}

func (o ContainerStatusOutput) State() ContainerStateOutput {
	return o.Apply(func(v ContainerStatus) *ContainerState {
		return v.State
	}).(ContainerStateOutput)
}

var _ContainerStatusArrayType = reflect.TypeOf((*[]ContainerStatus)(nil)).Elem()

type ContainerStatusArrayInput interface {
	ElementType() reflect.Type

	ToContainerStatusArrayOutput() ContainerStatusArrayOutput
	ToContainerStatusArrayOutputWithContext(ctx context.Context) ContainerStatusArrayOutput
}

type ContainerStatusArray []ContainerStatusInput

func (a ContainerStatusArray) ElementType() reflect.Type {
	return _ContainerStatusArrayType
}

func (a ContainerStatusArray) ToContainerStatusArrayOutput() ContainerStatusArrayOutput {
	return pulumi.ToOutput(a).(ContainerStatusArrayOutput)
}

func (a ContainerStatusArray) ToContainerStatusArrayOutputWithContext(ctx context.Context) ContainerStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ContainerStatusArrayOutput)
}

type ContainerStatusArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ContainerStatusArrayOutput{}) }

func (ContainerStatusArrayOutput) ElementType() reflect.Type {
	return _ContainerStatusArrayType
}

func (o ContainerStatusArrayOutput) Index(i pulumi.IntInput) ContainerStatusOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ContainerStatus {
		return vs[0].([]ContainerStatus)[vs[1].(int)]
	}).(ContainerStatusOutput)
}
