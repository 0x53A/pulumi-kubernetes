// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Endpoints is a collection of endpoints that implement the actual service. Example:
//   Name: "mysvc",
//   Subsets: [
//     {
//       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//     },
//     {
//       Addresses: [{"ip": "10.10.3.3"}],
//       Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//     },
//  ]
type Endpoints struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets
	// according to the IPs they share. A single address with multiple ports, some of which are ready
	// and some of which are not (because they come from different containers) will result in the
	// address being displayed in different subsets for the different ports. No address will appear in
	// both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that
	// comprise a service.
	Subsets EndpointSubsetArrayOutput `pulumi:"subsets"`

}

// EndpointsArgs is the set of arguments needed to create a Endpoints resource.
type EndpointsArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets
	// according to the IPs they share. A single address with multiple ports, some of which are ready
	// and some of which are not (because they come from different containers) will result in the
	// address being displayed in different subsets for the different ports. No address will appear in
	// both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that
	// comprise a service.
	Subsets EndpointSubsetArrayInput `pulumi:"subsets"`

}

// NewEndpoints creates a Endpoints resource with the given unique name, arguments, and options.
func NewEndpoints(ctx *pulumi.Context, name string, args *EndpointsArgs, opts ...pulumi.ResourceOption) (*Endpoints, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("Endpoints")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Subsets; i != nil {
			inputs["subsets"] = i.ToEndpointSubsetArrayOutput()
		}
	}
	var resource Endpoints
	err := ctx.RegisterResource("kubernetes:core/v1:Endpoints", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoints gets an existing Endpoints resource's state with the given name and ID.
func GetEndpoints(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Endpoints, error) {
	var resource Endpoints
	err := ctx.ReadResource("kubernetes:core/v1:Endpoints", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//   Name: "mysvc",
//   Subsets: [
//     {
//       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//     },
//     {
//       Addresses: [{"ip": "10.10.3.3"}],
//       Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//     },
//  ]
type EndpointsProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets
	// according to the IPs they share. A single address with multiple ports, some of which are ready
	// and some of which are not (because they come from different containers) will result in the
	// address being displayed in different subsets for the different ports. No address will appear in
	// both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that
	// comprise a service.
	Subsets []EndpointSubset `pulumi:"subsets"`

}

var _EndpointsPropertyType = reflect.TypeOf((*EndpointsProperty)(nil)).Elem()

// EndpointsPropertyInput represents an input type that resolves to a EndpointsProperty.
type EndpointsPropertyInput interface {
	ElementType() reflect.Type

	ToEndpointsPropertyOutput() EndpointsPropertyOutput
	ToEndpointsPropertyOutputWithContext(ctx context.Context) EndpointsPropertyOutput
}

// EndpointsPropertyArgs is a EndpointsPropertyInput whose fields are all Input types.
type EndpointsPropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets
	// according to the IPs they share. A single address with multiple ports, some of which are ready
	// and some of which are not (because they come from different containers) will result in the
	// address being displayed in different subsets for the different ports. No address will appear in
	// both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that
	// comprise a service.
	Subsets EndpointSubsetArrayInput `pulumi:"subsets"`

}

func (a EndpointsPropertyArgs) ElementType() reflect.Type {
	return _EndpointsPropertyType
}

func (a EndpointsPropertyArgs) ToEndpointsPropertyOutput() EndpointsPropertyOutput {
	return pulumi.ToOutput(a).(EndpointsPropertyOutput)
}

func (a EndpointsPropertyArgs) ToEndpointsPropertyOutputWithContext(ctx context.Context) EndpointsPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EndpointsPropertyOutput)
}

// EndpointsPropertyOutput is an output type that resolves to a Input.
type EndpointsPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(EndpointsPropertyOutput{}) }

func (EndpointsPropertyOutput) ElementType() reflect.Type {
	return _EndpointsPropertyType
}

func (o EndpointsPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v EndpointsProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o EndpointsPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v EndpointsProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o EndpointsPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v EndpointsProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o EndpointsPropertyOutput) Subsets() EndpointSubsetArrayOutput {
	return o.Apply(func(v EndpointsProperty) []EndpointSubset {
		return v.Subsets
	}).(EndpointSubsetArrayOutput)
}

var _EndpointsPropertyArrayType = reflect.TypeOf((*[]EndpointsProperty)(nil)).Elem()

type EndpointsPropertyArrayInput interface {
	ElementType() reflect.Type

	ToEndpointsPropertyArrayOutput() EndpointsPropertyArrayOutput
	ToEndpointsPropertyArrayOutputWithContext(ctx context.Context) EndpointsPropertyArrayOutput
}

type EndpointsPropertyArray []EndpointsPropertyInput

func (a EndpointsPropertyArray) ElementType() reflect.Type {
	return _EndpointsPropertyArrayType
}

func (a EndpointsPropertyArray) ToEndpointsPropertyArrayOutput() EndpointsPropertyArrayOutput {
	return pulumi.ToOutput(a).(EndpointsPropertyArrayOutput)
}

func (a EndpointsPropertyArray) ToEndpointsPropertyArrayOutputWithContext(ctx context.Context) EndpointsPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EndpointsPropertyArrayOutput)
}

type EndpointsPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(EndpointsPropertyArrayOutput{}) }

func (EndpointsPropertyArrayOutput) ElementType() reflect.Type {
	return _EndpointsPropertyArrayType
}

func (o EndpointsPropertyArrayOutput) Index(i pulumi.IntInput) EndpointsPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) EndpointsProperty {
		return vs[0].([]EndpointsProperty)[vs[1].(int)]
	}).(EndpointsPropertyOutput)
}
