// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ContainerState holds a possible state of container. Only one of its members may be specified. If
// none of them is specified, the default one is ContainerStateWaiting.
type ContainerState struct {
	// Details about a running container
	Running *ContainerStateRunning `pulumi:"running"`

	// Details about a terminated container
	Terminated *ContainerStateTerminated `pulumi:"terminated"`

	// Details about a waiting container
	Waiting *ContainerStateWaiting `pulumi:"waiting"`

}

var _ContainerStateType = reflect.TypeOf((*ContainerState)(nil)).Elem()

// ContainerStateInput represents an input type that resolves to a ContainerState.
type ContainerStateInput interface {
	ElementType() reflect.Type

	ToContainerStateOutput() ContainerStateOutput
	ToContainerStateOutputWithContext(ctx context.Context) ContainerStateOutput
}

// ContainerStateArgs is a ContainerStateInput whose fields are all Input types.
type ContainerStateArgs struct {
	// Details about a running container
	Running ContainerStateRunningInput `pulumi:"running"`

	// Details about a terminated container
	Terminated ContainerStateTerminatedInput `pulumi:"terminated"`

	// Details about a waiting container
	Waiting ContainerStateWaitingInput `pulumi:"waiting"`

}

func (a ContainerStateArgs) ElementType() reflect.Type {
	return _ContainerStateType
}

func (a ContainerStateArgs) ToContainerStateOutput() ContainerStateOutput {
	return pulumi.ToOutput(a).(ContainerStateOutput)
}

func (a ContainerStateArgs) ToContainerStateOutputWithContext(ctx context.Context) ContainerStateOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ContainerStateOutput)
}

// ContainerStateOutput is an output type that resolves to a Input.
type ContainerStateOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ContainerStateOutput{}) }

func (ContainerStateOutput) ElementType() reflect.Type {
	return _ContainerStateType
}

func (o ContainerStateOutput) Running() ContainerStateRunningOutput {
	return o.Apply(func(v ContainerState) *ContainerStateRunning {
		return v.Running
	}).(ContainerStateRunningOutput)
}

func (o ContainerStateOutput) Terminated() ContainerStateTerminatedOutput {
	return o.Apply(func(v ContainerState) *ContainerStateTerminated {
		return v.Terminated
	}).(ContainerStateTerminatedOutput)
}

func (o ContainerStateOutput) Waiting() ContainerStateWaitingOutput {
	return o.Apply(func(v ContainerState) *ContainerStateWaiting {
		return v.Waiting
	}).(ContainerStateWaitingOutput)
}

