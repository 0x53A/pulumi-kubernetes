// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The
// TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTerm struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []NodeSelectorRequirement `pulumi:"matchExpressions"`

	// A list of node selector requirements by node's fields.
	MatchFields []NodeSelectorRequirement `pulumi:"matchFields"`

}

var _NodeSelectorTermType = reflect.TypeOf((*NodeSelectorTerm)(nil)).Elem()

// NodeSelectorTermInput represents an input type that resolves to a NodeSelectorTerm.
type NodeSelectorTermInput interface {
	ElementType() reflect.Type

	ToNodeSelectorTermOutput() NodeSelectorTermOutput
	ToNodeSelectorTermOutputWithContext(ctx context.Context) NodeSelectorTermOutput
}

// NodeSelectorTermArgs is a NodeSelectorTermInput whose fields are all Input types.
type NodeSelectorTermArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions NodeSelectorRequirementArrayInput `pulumi:"matchExpressions"`

	// A list of node selector requirements by node's fields.
	MatchFields NodeSelectorRequirementArrayInput `pulumi:"matchFields"`

}

func (a NodeSelectorTermArgs) ElementType() reflect.Type {
	return _NodeSelectorTermType
}

func (a NodeSelectorTermArgs) ToNodeSelectorTermOutput() NodeSelectorTermOutput {
	return pulumi.ToOutput(a).(NodeSelectorTermOutput)
}

func (a NodeSelectorTermArgs) ToNodeSelectorTermOutputWithContext(ctx context.Context) NodeSelectorTermOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodeSelectorTermOutput)
}

// NodeSelectorTermOutput is an output type that resolves to a Input.
type NodeSelectorTermOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodeSelectorTermOutput{}) }

func (NodeSelectorTermOutput) ElementType() reflect.Type {
	return _NodeSelectorTermType
}

func (o NodeSelectorTermOutput) MatchExpressions() NodeSelectorRequirementArrayOutput {
	return o.Apply(func(v NodeSelectorTerm) []NodeSelectorRequirement {
		return v.MatchExpressions
	}).(NodeSelectorRequirementArrayOutput)
}

func (o NodeSelectorTermOutput) MatchFields() NodeSelectorRequirementArrayOutput {
	return o.Apply(func(v NodeSelectorTerm) []NodeSelectorRequirement {
		return v.MatchFields
	}).(NodeSelectorRequirementArrayOutput)
}

var _NodeSelectorTermArrayType = reflect.TypeOf((*[]NodeSelectorTerm)(nil)).Elem()

type NodeSelectorTermArrayInput interface {
	ElementType() reflect.Type

	ToNodeSelectorTermArrayOutput() NodeSelectorTermArrayOutput
	ToNodeSelectorTermArrayOutputWithContext(ctx context.Context) NodeSelectorTermArrayOutput
}

type NodeSelectorTermArray []NodeSelectorTermInput

func (a NodeSelectorTermArray) ElementType() reflect.Type {
	return _NodeSelectorTermArrayType
}

func (a NodeSelectorTermArray) ToNodeSelectorTermArrayOutput() NodeSelectorTermArrayOutput {
	return pulumi.ToOutput(a).(NodeSelectorTermArrayOutput)
}

func (a NodeSelectorTermArray) ToNodeSelectorTermArrayOutputWithContext(ctx context.Context) NodeSelectorTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodeSelectorTermArrayOutput)
}

type NodeSelectorTermArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodeSelectorTermArrayOutput{}) }

func (NodeSelectorTermArrayOutput) ElementType() reflect.Type {
	return _NodeSelectorTermArrayType
}

func (o NodeSelectorTermArrayOutput) Index(i pulumi.IntInput) NodeSelectorTermOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NodeSelectorTerm {
		return vs[0].([]NodeSelectorTerm)[vs[1].(int)]
	}).(NodeSelectorTermOutput)
}
