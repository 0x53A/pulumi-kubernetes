// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// ReplicationController represents the configuration of a replication controller.
type ReplicationController struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the
	// Pod(s) that the replication controller manages. Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Spec defines the specification of the desired behavior of the replication controller. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicationControllerSpecOutput `pulumi:"spec"`

	// Status is the most recently observed status of the replication controller. This data may be out
	// of date by some window of time. Populated by the system. Read-only. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ReplicationControllerStatusOutput `pulumi:"status"`

}

// ReplicationControllerArgs is the set of arguments needed to create a ReplicationController resource.
type ReplicationControllerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the
	// Pod(s) that the replication controller manages. Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the specification of the desired behavior of the replication controller. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicationControllerSpecInput `pulumi:"spec"`

}

// NewReplicationController creates a ReplicationController resource with the given unique name, arguments, and options.
func NewReplicationController(ctx *pulumi.Context, name string, args *ReplicationControllerArgs, opts ...pulumi.ResourceOption) (*ReplicationController, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("ReplicationController")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToReplicationControllerSpecOutput()
		}
	}
	var resource ReplicationController
	err := ctx.RegisterResource("kubernetes:core/v1:ReplicationController", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationController gets an existing ReplicationController resource's state with the given name and ID.
func GetReplicationController(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*ReplicationController, error) {
	var resource ReplicationController
	err := ctx.ReadResource("kubernetes:core/v1:ReplicationController", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// ReplicationController represents the configuration of a replication controller.
type ReplicationControllerProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the
	// Pod(s) that the replication controller manages. Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Spec defines the specification of the desired behavior of the replication controller. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ReplicationControllerSpec `pulumi:"spec"`

	// Status is the most recently observed status of the replication controller. This data may be out
	// of date by some window of time. Populated by the system. Read-only. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ReplicationControllerStatus `pulumi:"status"`

}

var _ReplicationControllerPropertyType = reflect.TypeOf((*ReplicationControllerProperty)(nil)).Elem()

// ReplicationControllerPropertyInput represents an input type that resolves to a ReplicationControllerProperty.
type ReplicationControllerPropertyInput interface {
	ElementType() reflect.Type

	ToReplicationControllerPropertyOutput() ReplicationControllerPropertyOutput
	ToReplicationControllerPropertyOutputWithContext(ctx context.Context) ReplicationControllerPropertyOutput
}

// ReplicationControllerPropertyArgs is a ReplicationControllerPropertyInput whose fields are all Input types.
type ReplicationControllerPropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the
	// Pod(s) that the replication controller manages. Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the specification of the desired behavior of the replication controller. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicationControllerSpecInput `pulumi:"spec"`

}

func (a ReplicationControllerPropertyArgs) ElementType() reflect.Type {
	return _ReplicationControllerPropertyType
}

func (a ReplicationControllerPropertyArgs) ToReplicationControllerPropertyOutput() ReplicationControllerPropertyOutput {
	return pulumi.ToOutput(a).(ReplicationControllerPropertyOutput)
}

func (a ReplicationControllerPropertyArgs) ToReplicationControllerPropertyOutputWithContext(ctx context.Context) ReplicationControllerPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ReplicationControllerPropertyOutput)
}

// ReplicationControllerPropertyOutput is an output type that resolves to a Input.
type ReplicationControllerPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ReplicationControllerPropertyOutput{}) }

func (ReplicationControllerPropertyOutput) ElementType() reflect.Type {
	return _ReplicationControllerPropertyType
}

func (o ReplicationControllerPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v ReplicationControllerProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o ReplicationControllerPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v ReplicationControllerProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o ReplicationControllerPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v ReplicationControllerProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o ReplicationControllerPropertyOutput) Spec() ReplicationControllerSpecOutput {
	return o.Apply(func(v ReplicationControllerProperty) *ReplicationControllerSpec {
		return v.Spec
	}).(ReplicationControllerSpecOutput)
}

func (o ReplicationControllerPropertyOutput) Status() ReplicationControllerStatusOutput {
	return o.Apply(func(v ReplicationControllerProperty) ReplicationControllerStatus {
		return v.Status
	}).(ReplicationControllerStatusOutput)
}

var _ReplicationControllerPropertyArrayType = reflect.TypeOf((*[]ReplicationControllerProperty)(nil)).Elem()

type ReplicationControllerPropertyArrayInput interface {
	ElementType() reflect.Type

	ToReplicationControllerPropertyArrayOutput() ReplicationControllerPropertyArrayOutput
	ToReplicationControllerPropertyArrayOutputWithContext(ctx context.Context) ReplicationControllerPropertyArrayOutput
}

type ReplicationControllerPropertyArray []ReplicationControllerPropertyInput

func (a ReplicationControllerPropertyArray) ElementType() reflect.Type {
	return _ReplicationControllerPropertyArrayType
}

func (a ReplicationControllerPropertyArray) ToReplicationControllerPropertyArrayOutput() ReplicationControllerPropertyArrayOutput {
	return pulumi.ToOutput(a).(ReplicationControllerPropertyArrayOutput)
}

func (a ReplicationControllerPropertyArray) ToReplicationControllerPropertyArrayOutputWithContext(ctx context.Context) ReplicationControllerPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ReplicationControllerPropertyArrayOutput)
}

type ReplicationControllerPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ReplicationControllerPropertyArrayOutput{}) }

func (ReplicationControllerPropertyArrayOutput) ElementType() reflect.Type {
	return _ReplicationControllerPropertyArrayType
}

func (o ReplicationControllerPropertyArrayOutput) Index(i pulumi.IntInput) ReplicationControllerPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ReplicationControllerProperty {
		return vs[0].([]ReplicationControllerProperty)[vs[1].(int)]
	}).(ReplicationControllerPropertyOutput)
}
