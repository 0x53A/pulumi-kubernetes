// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// NodeCondition contains condition information for a node.
type NodeCondition struct {
	// Last time we got an update on a given condition.
	LastHeartbeatTime *string `pulumi:"lastHeartbeatTime"`

	// Last time the condition transit from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`

	// Human readable message indicating details about last transition.
	Message *string `pulumi:"message"`

	// (brief) reason for the condition's last transition.
	Reason *string `pulumi:"reason"`

	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`

	// Type of node condition.
	Type string `pulumi:"type"`

}

var _NodeConditionType = reflect.TypeOf((*NodeCondition)(nil)).Elem()

// NodeConditionInput represents an input type that resolves to a NodeCondition.
type NodeConditionInput interface {
	ElementType() reflect.Type

	ToNodeConditionOutput() NodeConditionOutput
	ToNodeConditionOutputWithContext(ctx context.Context) NodeConditionOutput
}

// NodeConditionArgs is a NodeConditionInput whose fields are all Input types.
type NodeConditionArgs struct {
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`

	// Type of node condition.
	Type pulumi.StringInput `pulumi:"type"`

	// Last time we got an update on a given condition.
	LastHeartbeatTime pulumi.StringInput `pulumi:"lastHeartbeatTime"`

	// Last time the condition transit from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`

	// Human readable message indicating details about last transition.
	Message pulumi.StringInput `pulumi:"message"`

	// (brief) reason for the condition's last transition.
	Reason pulumi.StringInput `pulumi:"reason"`

}

func (a NodeConditionArgs) ElementType() reflect.Type {
	return _NodeConditionType
}

func (a NodeConditionArgs) ToNodeConditionOutput() NodeConditionOutput {
	return pulumi.ToOutput(a).(NodeConditionOutput)
}

func (a NodeConditionArgs) ToNodeConditionOutputWithContext(ctx context.Context) NodeConditionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodeConditionOutput)
}

// NodeConditionOutput is an output type that resolves to a Input.
type NodeConditionOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodeConditionOutput{}) }

func (NodeConditionOutput) ElementType() reflect.Type {
	return _NodeConditionType
}

func (o NodeConditionOutput) LastHeartbeatTime() pulumi.StringOutput {
	return o.Apply(func(v NodeCondition) *string {
		return v.LastHeartbeatTime
	}).(pulumi.StringOutput)
}

func (o NodeConditionOutput) LastTransitionTime() pulumi.StringOutput {
	return o.Apply(func(v NodeCondition) *string {
		return v.LastTransitionTime
	}).(pulumi.StringOutput)
}

func (o NodeConditionOutput) Message() pulumi.StringOutput {
	return o.Apply(func(v NodeCondition) *string {
		return v.Message
	}).(pulumi.StringOutput)
}

func (o NodeConditionOutput) Reason() pulumi.StringOutput {
	return o.Apply(func(v NodeCondition) *string {
		return v.Reason
	}).(pulumi.StringOutput)
}

func (o NodeConditionOutput) Status() pulumi.StringOutput {
	return o.Apply(func(v NodeCondition) string {
		return v.Status
	}).(pulumi.StringOutput)
}

func (o NodeConditionOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v NodeCondition) string {
		return v.Type
	}).(pulumi.StringOutput)
}

var _NodeConditionArrayType = reflect.TypeOf((*[]NodeCondition)(nil)).Elem()

type NodeConditionArrayInput interface {
	ElementType() reflect.Type

	ToNodeConditionArrayOutput() NodeConditionArrayOutput
	ToNodeConditionArrayOutputWithContext(ctx context.Context) NodeConditionArrayOutput
}

type NodeConditionArray []NodeConditionInput

func (a NodeConditionArray) ElementType() reflect.Type {
	return _NodeConditionArrayType
}

func (a NodeConditionArray) ToNodeConditionArrayOutput() NodeConditionArrayOutput {
	return pulumi.ToOutput(a).(NodeConditionArrayOutput)
}

func (a NodeConditionArray) ToNodeConditionArrayOutputWithContext(ctx context.Context) NodeConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodeConditionArrayOutput)
}

type NodeConditionArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodeConditionArrayOutput{}) }

func (NodeConditionArrayOutput) ElementType() reflect.Type {
	return _NodeConditionArrayType
}

func (o NodeConditionArrayOutput) Index(i pulumi.IntInput) NodeConditionOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NodeCondition {
		return vs[0].([]NodeCondition)[vs[1].(int)]
	}).(NodeConditionOutput)
}
