// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source
// for provider-specific attributes
type PersistentVolumeClaimSpec struct {
	// AccessModes contains the desired access modes the volume should have. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`

	// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently
	// VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot
	// data source, it will create a new volume and data will be restored to the volume at the same
	// time. If the provisioner does not support VolumeSnapshot data source, volume will not be created
	// and the failure will be reported as an event. In the future, we plan to support more data source
	// types and the behavior of the provisioner may change.
	DataSource *TypedLocalObjectReference `pulumi:"dataSource"`

	// Resources represents the minimum resources the volume should have. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *ResourceRequirements `pulumi:"resources"`

	// A label query over volumes to consider for binding.
	Selector *metaV1.LabelSelector `pulumi:"selector"`

	// Name of the StorageClass required by the claim. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`

	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied
	// when not included in claim spec. This is a beta feature.
	VolumeMode *string `pulumi:"volumeMode"`

	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`

}

var _PersistentVolumeClaimSpecType = reflect.TypeOf((*PersistentVolumeClaimSpec)(nil)).Elem()

// PersistentVolumeClaimSpecInput represents an input type that resolves to a PersistentVolumeClaimSpec.
type PersistentVolumeClaimSpecInput interface {
	ElementType() reflect.Type

	ToPersistentVolumeClaimSpecOutput() PersistentVolumeClaimSpecOutput
	ToPersistentVolumeClaimSpecOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecOutput
}

// PersistentVolumeClaimSpecArgs is a PersistentVolumeClaimSpecInput whose fields are all Input types.
type PersistentVolumeClaimSpecArgs struct {
	// AccessModes contains the desired access modes the volume should have. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`

	// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently
	// VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot
	// data source, it will create a new volume and data will be restored to the volume at the same
	// time. If the provisioner does not support VolumeSnapshot data source, volume will not be created
	// and the failure will be reported as an event. In the future, we plan to support more data source
	// types and the behavior of the provisioner may change.
	DataSource TypedLocalObjectReferenceInput `pulumi:"dataSource"`

	// Resources represents the minimum resources the volume should have. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources ResourceRequirementsInput `pulumi:"resources"`

	// A label query over volumes to consider for binding.
	Selector metaV1.LabelSelectorInput `pulumi:"selector"`

	// Name of the StorageClass required by the claim. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringInput `pulumi:"storageClassName"`

	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied
	// when not included in claim spec. This is a beta feature.
	VolumeMode pulumi.StringInput `pulumi:"volumeMode"`

	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringInput `pulumi:"volumeName"`

}

func (a PersistentVolumeClaimSpecArgs) ElementType() reflect.Type {
	return _PersistentVolumeClaimSpecType
}

func (a PersistentVolumeClaimSpecArgs) ToPersistentVolumeClaimSpecOutput() PersistentVolumeClaimSpecOutput {
	return pulumi.ToOutput(a).(PersistentVolumeClaimSpecOutput)
}

func (a PersistentVolumeClaimSpecArgs) ToPersistentVolumeClaimSpecOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PersistentVolumeClaimSpecOutput)
}

// PersistentVolumeClaimSpecOutput is an output type that resolves to a Input.
type PersistentVolumeClaimSpecOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PersistentVolumeClaimSpecOutput{}) }

func (PersistentVolumeClaimSpecOutput) ElementType() reflect.Type {
	return _PersistentVolumeClaimSpecType
}

func (o PersistentVolumeClaimSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.Apply(func(v PersistentVolumeClaimSpec) []string {
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o PersistentVolumeClaimSpecOutput) DataSource() TypedLocalObjectReferenceOutput {
	return o.Apply(func(v PersistentVolumeClaimSpec) *TypedLocalObjectReference {
		return v.DataSource
	}).(TypedLocalObjectReferenceOutput)
}

func (o PersistentVolumeClaimSpecOutput) Resources() ResourceRequirementsOutput {
	return o.Apply(func(v PersistentVolumeClaimSpec) *ResourceRequirements {
		return v.Resources
	}).(ResourceRequirementsOutput)
}

func (o PersistentVolumeClaimSpecOutput) Selector() metaV1.LabelSelectorOutput {
	return o.Apply(func(v PersistentVolumeClaimSpec) *metaV1.LabelSelector {
		return v.Selector
	}).(metaV1.LabelSelectorOutput)
}

func (o PersistentVolumeClaimSpecOutput) StorageClassName() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimSpec) *string {
		return v.StorageClassName
	}).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimSpecOutput) VolumeMode() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimSpec) *string {
		return v.VolumeMode
	}).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimSpecOutput) VolumeName() pulumi.StringOutput {
	return o.Apply(func(v PersistentVolumeClaimSpec) *string {
		return v.VolumeName
	}).(pulumi.StringOutput)
}

