// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields
// are also present in container.securityContext.  Field values of container.securityContext take
// precedence over field values of PodSecurityContext.
type PodSecurityContext struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow
	// the Kubelet to change the ownership of that volume to be owned by the pod:
	// 
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume
	// will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	// 
	// If unset, the Kubelet will not modify the ownership and permissions of any volume.
	FsGroup *int `pulumi:"fsGroup"`

	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also
	// be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence for that container.
	RunAsGroup *int `pulumi:"runAsGroup"`

	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container
	// if it does. If unset or false, no such validation will be performed. May also be set in
	// SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in
	// SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`

	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsUser *int `pulumi:"runAsUser"`

	// The SELinux context to be applied to all containers. If unspecified, the container runtime will
	// allocate a random SELinux context for each container.  May also be set in SecurityContext.  If
	// set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
	// precedence for that container.
	SeLinuxOptions *SELinuxOptions `pulumi:"seLinuxOptions"`

	// A list of groups applied to the first process run in each container, in addition to the
	// container's primary GID.  If unspecified, no groups will be added to any container.
	SupplementalGroups []int `pulumi:"supplementalGroups"`

	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by
	// the container runtime) might fail to launch.
	Sysctls []Sysctl `pulumi:"sysctls"`

	// The Windows specific settings applied to all containers. If unspecified, the options within a
	// container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext,
	// the value specified in SecurityContext takes precedence.
	WindowsOptions *WindowsSecurityContextOptions `pulumi:"windowsOptions"`

}

var _PodSecurityContextType = reflect.TypeOf((*PodSecurityContext)(nil)).Elem()

// PodSecurityContextInput represents an input type that resolves to a PodSecurityContext.
type PodSecurityContextInput interface {
	ElementType() reflect.Type

	ToPodSecurityContextOutput() PodSecurityContextOutput
	ToPodSecurityContextOutputWithContext(ctx context.Context) PodSecurityContextOutput
}

// PodSecurityContextArgs is a PodSecurityContextInput whose fields are all Input types.
type PodSecurityContextArgs struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow
	// the Kubelet to change the ownership of that volume to be owned by the pod:
	// 
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume
	// will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	// 
	// If unset, the Kubelet will not modify the ownership and permissions of any volume.
	FsGroup pulumi.IntInput `pulumi:"fsGroup"`

	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also
	// be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence for that container.
	RunAsGroup pulumi.IntInput `pulumi:"runAsGroup"`

	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container
	// if it does. If unset or false, no such validation will be performed. May also be set in
	// SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in
	// SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolInput `pulumi:"runAsNonRoot"`

	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsUser pulumi.IntInput `pulumi:"runAsUser"`

	// The SELinux context to be applied to all containers. If unspecified, the container runtime will
	// allocate a random SELinux context for each container.  May also be set in SecurityContext.  If
	// set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
	// precedence for that container.
	SeLinuxOptions SELinuxOptionsInput `pulumi:"seLinuxOptions"`

	// A list of groups applied to the first process run in each container, in addition to the
	// container's primary GID.  If unspecified, no groups will be added to any container.
	SupplementalGroups pulumi.IntArrayInput `pulumi:"supplementalGroups"`

	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by
	// the container runtime) might fail to launch.
	Sysctls SysctlArrayInput `pulumi:"sysctls"`

	// The Windows specific settings applied to all containers. If unspecified, the options within a
	// container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext,
	// the value specified in SecurityContext takes precedence.
	WindowsOptions WindowsSecurityContextOptionsInput `pulumi:"windowsOptions"`

}

func (a PodSecurityContextArgs) ElementType() reflect.Type {
	return _PodSecurityContextType
}

func (a PodSecurityContextArgs) ToPodSecurityContextOutput() PodSecurityContextOutput {
	return pulumi.ToOutput(a).(PodSecurityContextOutput)
}

func (a PodSecurityContextArgs) ToPodSecurityContextOutputWithContext(ctx context.Context) PodSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PodSecurityContextOutput)
}

// PodSecurityContextOutput is an output type that resolves to a Input.
type PodSecurityContextOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PodSecurityContextOutput{}) }

func (PodSecurityContextOutput) ElementType() reflect.Type {
	return _PodSecurityContextType
}

func (o PodSecurityContextOutput) FsGroup() pulumi.IntOutput {
	return o.Apply(func(v PodSecurityContext) *int {
		return v.FsGroup
	}).(pulumi.IntOutput)
}

func (o PodSecurityContextOutput) RunAsGroup() pulumi.IntOutput {
	return o.Apply(func(v PodSecurityContext) *int {
		return v.RunAsGroup
	}).(pulumi.IntOutput)
}

func (o PodSecurityContextOutput) RunAsNonRoot() pulumi.BoolOutput {
	return o.Apply(func(v PodSecurityContext) *bool {
		return v.RunAsNonRoot
	}).(pulumi.BoolOutput)
}

func (o PodSecurityContextOutput) RunAsUser() pulumi.IntOutput {
	return o.Apply(func(v PodSecurityContext) *int {
		return v.RunAsUser
	}).(pulumi.IntOutput)
}

func (o PodSecurityContextOutput) SeLinuxOptions() SELinuxOptionsOutput {
	return o.Apply(func(v PodSecurityContext) *SELinuxOptions {
		return v.SeLinuxOptions
	}).(SELinuxOptionsOutput)
}

func (o PodSecurityContextOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.Apply(func(v PodSecurityContext) []int {
		return v.SupplementalGroups
	}).(pulumi.IntArrayOutput)
}

func (o PodSecurityContextOutput) Sysctls() SysctlArrayOutput {
	return o.Apply(func(v PodSecurityContext) []Sysctl {
		return v.Sysctls
	}).(SysctlArrayOutput)
}

func (o PodSecurityContextOutput) WindowsOptions() WindowsSecurityContextOptionsOutput {
	return o.Apply(func(v PodSecurityContext) *WindowsSecurityContextOptions {
		return v.WindowsOptions
	}).(WindowsSecurityContextOptionsOutput)
}

