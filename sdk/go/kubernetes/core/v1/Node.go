// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e.
// in etcd).
type Node struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Spec defines the behavior of a node.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec NodeSpecOutput `pulumi:"spec"`

	// Most recently observed status of the node. Populated by the system. Read-only. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status NodeStatusOutput `pulumi:"status"`

}

// NodeArgs is the set of arguments needed to create a Node resource.
type NodeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the behavior of a node.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec NodeSpecInput `pulumi:"spec"`

}

// NewNode creates a Node resource with the given unique name, arguments, and options.
func NewNode(ctx *pulumi.Context, name string, args *NodeArgs, opts ...pulumi.ResourceOption) (*Node, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("Node")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToNodeSpecOutput()
		}
	}
	var resource Node
	err := ctx.RegisterResource("kubernetes:core/v1:Node", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNode gets an existing Node resource's state with the given name and ID.
func GetNode(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Node, error) {
	var resource Node
	err := ctx.ReadResource("kubernetes:core/v1:Node", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e.
// in etcd).
type NodeProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Spec defines the behavior of a node.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *NodeSpec `pulumi:"spec"`

	// Most recently observed status of the node. Populated by the system. Read-only. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status NodeStatus `pulumi:"status"`

}

var _NodePropertyType = reflect.TypeOf((*NodeProperty)(nil)).Elem()

// NodePropertyInput represents an input type that resolves to a NodeProperty.
type NodePropertyInput interface {
	ElementType() reflect.Type

	ToNodePropertyOutput() NodePropertyOutput
	ToNodePropertyOutputWithContext(ctx context.Context) NodePropertyOutput
}

// NodePropertyArgs is a NodePropertyInput whose fields are all Input types.
type NodePropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the behavior of a node.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec NodeSpecInput `pulumi:"spec"`

}

func (a NodePropertyArgs) ElementType() reflect.Type {
	return _NodePropertyType
}

func (a NodePropertyArgs) ToNodePropertyOutput() NodePropertyOutput {
	return pulumi.ToOutput(a).(NodePropertyOutput)
}

func (a NodePropertyArgs) ToNodePropertyOutputWithContext(ctx context.Context) NodePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodePropertyOutput)
}

// NodePropertyOutput is an output type that resolves to a Input.
type NodePropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodePropertyOutput{}) }

func (NodePropertyOutput) ElementType() reflect.Type {
	return _NodePropertyType
}

func (o NodePropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v NodeProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o NodePropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v NodeProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o NodePropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v NodeProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o NodePropertyOutput) Spec() NodeSpecOutput {
	return o.Apply(func(v NodeProperty) *NodeSpec {
		return v.Spec
	}).(NodeSpecOutput)
}

func (o NodePropertyOutput) Status() NodeStatusOutput {
	return o.Apply(func(v NodeProperty) NodeStatus {
		return v.Status
	}).(NodeStatusOutput)
}

var _NodePropertyArrayType = reflect.TypeOf((*[]NodeProperty)(nil)).Elem()

type NodePropertyArrayInput interface {
	ElementType() reflect.Type

	ToNodePropertyArrayOutput() NodePropertyArrayOutput
	ToNodePropertyArrayOutputWithContext(ctx context.Context) NodePropertyArrayOutput
}

type NodePropertyArray []NodePropertyInput

func (a NodePropertyArray) ElementType() reflect.Type {
	return _NodePropertyArrayType
}

func (a NodePropertyArray) ToNodePropertyArrayOutput() NodePropertyArrayOutput {
	return pulumi.ToOutput(a).(NodePropertyArrayOutput)
}

func (a NodePropertyArray) ToNodePropertyArrayOutputWithContext(ctx context.Context) NodePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodePropertyArrayOutput)
}

type NodePropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodePropertyArrayOutput{}) }

func (NodePropertyArrayOutput) ElementType() reflect.Type {
	return _NodePropertyArrayType
}

func (o NodePropertyArrayOutput) Index(i pulumi.IntInput) NodePropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NodeProperty {
		return vs[0].([]NodeProperty)[vs[1].(int)]
	}).(NodePropertyOutput)
}
