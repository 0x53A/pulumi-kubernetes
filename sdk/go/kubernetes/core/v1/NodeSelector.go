// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A node selector represents the union of the results of one or more label queries over a set of
// nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelector struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []NodeSelectorTerm `pulumi:"nodeSelectorTerms"`

}

var _NodeSelectorType = reflect.TypeOf((*NodeSelector)(nil)).Elem()

// NodeSelectorInput represents an input type that resolves to a NodeSelector.
type NodeSelectorInput interface {
	ElementType() reflect.Type

	ToNodeSelectorOutput() NodeSelectorOutput
	ToNodeSelectorOutputWithContext(ctx context.Context) NodeSelectorOutput
}

// NodeSelectorArgs is a NodeSelectorInput whose fields are all Input types.
type NodeSelectorArgs struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms NodeSelectorTermArrayInput `pulumi:"nodeSelectorTerms"`

}

func (a NodeSelectorArgs) ElementType() reflect.Type {
	return _NodeSelectorType
}

func (a NodeSelectorArgs) ToNodeSelectorOutput() NodeSelectorOutput {
	return pulumi.ToOutput(a).(NodeSelectorOutput)
}

func (a NodeSelectorArgs) ToNodeSelectorOutputWithContext(ctx context.Context) NodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NodeSelectorOutput)
}

// NodeSelectorOutput is an output type that resolves to a Input.
type NodeSelectorOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NodeSelectorOutput{}) }

func (NodeSelectorOutput) ElementType() reflect.Type {
	return _NodeSelectorType
}

func (o NodeSelectorOutput) NodeSelectorTerms() NodeSelectorTermArrayOutput {
	return o.Apply(func(v NodeSelector) []NodeSelectorTerm {
		return v.NodeSelectorTerms
	}).(NodeSelectorTermArrayOutput)
}

