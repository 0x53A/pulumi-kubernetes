// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support
// ownership management or SELinux relabeling.
type CephFSVolumeSource struct {
	// Required: Monitors is a collection of Ceph monitors More info:
	// https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`

	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`

	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`

	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More
	// info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `pulumi:"secretFile"`

	// Optional: SecretRef is reference to the authentication secret for User, default is empty. More
	// info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef *LocalObjectReference `pulumi:"secretRef"`

	// Optional: User is the rados user name, default is admin More info:
	// https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`

}

var _CephFSVolumeSourceType = reflect.TypeOf((*CephFSVolumeSource)(nil)).Elem()

// CephFSVolumeSourceInput represents an input type that resolves to a CephFSVolumeSource.
type CephFSVolumeSourceInput interface {
	ElementType() reflect.Type

	ToCephFSVolumeSourceOutput() CephFSVolumeSourceOutput
	ToCephFSVolumeSourceOutputWithContext(ctx context.Context) CephFSVolumeSourceOutput
}

// CephFSVolumeSourceArgs is a CephFSVolumeSourceInput whose fields are all Input types.
type CephFSVolumeSourceArgs struct {
	// Required: Monitors is a collection of Ceph monitors More info:
	// https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`

	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringInput `pulumi:"path"`

	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More
	// info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringInput `pulumi:"secretFile"`

	// Optional: SecretRef is reference to the authentication secret for User, default is empty. More
	// info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef LocalObjectReferenceInput `pulumi:"secretRef"`

	// Optional: User is the rados user name, default is admin More info:
	// https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringInput `pulumi:"user"`

}

func (a CephFSVolumeSourceArgs) ElementType() reflect.Type {
	return _CephFSVolumeSourceType
}

func (a CephFSVolumeSourceArgs) ToCephFSVolumeSourceOutput() CephFSVolumeSourceOutput {
	return pulumi.ToOutput(a).(CephFSVolumeSourceOutput)
}

func (a CephFSVolumeSourceArgs) ToCephFSVolumeSourceOutputWithContext(ctx context.Context) CephFSVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CephFSVolumeSourceOutput)
}

// CephFSVolumeSourceOutput is an output type that resolves to a Input.
type CephFSVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CephFSVolumeSourceOutput{}) }

func (CephFSVolumeSourceOutput) ElementType() reflect.Type {
	return _CephFSVolumeSourceType
}

func (o CephFSVolumeSourceOutput) Monitors() pulumi.StringArrayOutput {
	return o.Apply(func(v CephFSVolumeSource) []string {
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

func (o CephFSVolumeSourceOutput) Path() pulumi.StringOutput {
	return o.Apply(func(v CephFSVolumeSource) *string {
		return v.Path
	}).(pulumi.StringOutput)
}

func (o CephFSVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v CephFSVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o CephFSVolumeSourceOutput) SecretFile() pulumi.StringOutput {
	return o.Apply(func(v CephFSVolumeSource) *string {
		return v.SecretFile
	}).(pulumi.StringOutput)
}

func (o CephFSVolumeSourceOutput) SecretRef() LocalObjectReferenceOutput {
	return o.Apply(func(v CephFSVolumeSource) *LocalObjectReference {
		return v.SecretRef
	}).(LocalObjectReferenceOutput)
}

func (o CephFSVolumeSourceOutput) User() pulumi.StringOutput {
	return o.Apply(func(v CephFSVolumeSource) *string {
		return v.User
	}).(pulumi.StringOutput)
}

