// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type Volume struct {
	// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host
	// machine and then exposed to the pod. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore *AWSElasticBlockStoreVolumeSource `pulumi:"awsElasticBlockStore"`

	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *AzureDiskVolumeSource `pulumi:"azureDisk"`

	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *AzureFileVolumeSource `pulumi:"azureFile"`

	// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs *CephFSVolumeSource `pulumi:"cephfs"`

	// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info:
	// https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder *CinderVolumeSource `pulumi:"cinder"`

	// ConfigMap represents a configMap that should populate this volume
	ConfigMap *ConfigMapVolumeSource `pulumi:"configMap"`

	// CSI (Container Storage Interface) represents storage that is handled by an external CSI driver
	// (Alpha feature).
	Csi *CSIVolumeSource `pulumi:"csi"`

	// DownwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI *DownwardAPIVolumeSource `pulumi:"downwardAPI"`

	// EmptyDir represents a temporary directory that shares a pod's lifetime. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir *EmptyDirVolumeSource `pulumi:"emptyDir"`

	// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then
	// exposed to the pod.
	Fc *FCVolumeSource `pulumi:"fc"`

	// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based
	// plugin.
	FlexVolume *FlexVolumeSource `pulumi:"flexVolume"`

	// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the
	// Flocker control service being running
	Flocker *FlockerVolumeSource `pulumi:"flocker"`

	// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine
	// and then exposed to the pod. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk *GCEPersistentDiskVolumeSource `pulumi:"gcePersistentDisk"`

	// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated.
	// To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones
	// the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo *GitRepoVolumeSource `pulumi:"gitRepo"`

	// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info:
	// https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs *GlusterfsVolumeSource `pulumi:"glusterfs"`

	// HostPath represents a pre-existing file or directory on the host machine that is directly
	// exposed to the container. This is generally used for system agents or other privileged things
	// that are allowed to see the host machine. Most containers will NOT need this. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath *HostPathVolumeSource `pulumi:"hostPath"`

	// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then
	// exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi *ISCSIVolumeSource `pulumi:"iscsi"`

	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`

	// NFS represents an NFS mount on the host that shares a pod's lifetime More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs *NFSVolumeSource `pulumi:"nfs"`

	// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same
	// namespace. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSource `pulumi:"persistentVolumeClaim"`

	// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on
	// kubelets host machine
	PhotonPersistentDisk *PhotonPersistentDiskVolumeSource `pulumi:"photonPersistentDisk"`

	// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume *PortworxVolumeSource `pulumi:"portworxVolume"`

	// Items for all in one resources secrets, configmaps, and downward API
	Projected *ProjectedVolumeSource `pulumi:"projected"`

	// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte *QuobyteVolumeSource `pulumi:"quobyte"`

	// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info:
	// https://examples.k8s.io/volumes/rbd/README.md
	Rbd *RBDVolumeSource `pulumi:"rbd"`

	// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO *ScaleIOVolumeSource `pulumi:"scaleIO"`

	// Secret represents a secret that should populate this volume. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *SecretVolumeSource `pulumi:"secret"`

	// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos *StorageOSVolumeSource `pulumi:"storageos"`

	// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume *VsphereVirtualDiskVolumeSource `pulumi:"vsphereVolume"`

}

var _VolumeType = reflect.TypeOf((*Volume)(nil)).Elem()

// VolumeInput represents an input type that resolves to a Volume.
type VolumeInput interface {
	ElementType() reflect.Type

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

// VolumeArgs is a VolumeInput whose fields are all Input types.
type VolumeArgs struct {
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`

	// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host
	// machine and then exposed to the pod. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore AWSElasticBlockStoreVolumeSourceInput `pulumi:"awsElasticBlockStore"`

	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk AzureDiskVolumeSourceInput `pulumi:"azureDisk"`

	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile AzureFileVolumeSourceInput `pulumi:"azureFile"`

	// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs CephFSVolumeSourceInput `pulumi:"cephfs"`

	// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info:
	// https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder CinderVolumeSourceInput `pulumi:"cinder"`

	// ConfigMap represents a configMap that should populate this volume
	ConfigMap ConfigMapVolumeSourceInput `pulumi:"configMap"`

	// CSI (Container Storage Interface) represents storage that is handled by an external CSI driver
	// (Alpha feature).
	Csi CSIVolumeSourceInput `pulumi:"csi"`

	// DownwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI DownwardAPIVolumeSourceInput `pulumi:"downwardAPI"`

	// EmptyDir represents a temporary directory that shares a pod's lifetime. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir EmptyDirVolumeSourceInput `pulumi:"emptyDir"`

	// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then
	// exposed to the pod.
	Fc FCVolumeSourceInput `pulumi:"fc"`

	// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based
	// plugin.
	FlexVolume FlexVolumeSourceInput `pulumi:"flexVolume"`

	// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the
	// Flocker control service being running
	Flocker FlockerVolumeSourceInput `pulumi:"flocker"`

	// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine
	// and then exposed to the pod. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk GCEPersistentDiskVolumeSourceInput `pulumi:"gcePersistentDisk"`

	// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated.
	// To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones
	// the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo GitRepoVolumeSourceInput `pulumi:"gitRepo"`

	// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info:
	// https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs GlusterfsVolumeSourceInput `pulumi:"glusterfs"`

	// HostPath represents a pre-existing file or directory on the host machine that is directly
	// exposed to the container. This is generally used for system agents or other privileged things
	// that are allowed to see the host machine. Most containers will NOT need this. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath HostPathVolumeSourceInput `pulumi:"hostPath"`

	// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then
	// exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi ISCSIVolumeSourceInput `pulumi:"iscsi"`

	// NFS represents an NFS mount on the host that shares a pod's lifetime More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs NFSVolumeSourceInput `pulumi:"nfs"`

	// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same
	// namespace. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim PersistentVolumeClaimVolumeSourceInput `pulumi:"persistentVolumeClaim"`

	// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on
	// kubelets host machine
	PhotonPersistentDisk PhotonPersistentDiskVolumeSourceInput `pulumi:"photonPersistentDisk"`

	// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume PortworxVolumeSourceInput `pulumi:"portworxVolume"`

	// Items for all in one resources secrets, configmaps, and downward API
	Projected ProjectedVolumeSourceInput `pulumi:"projected"`

	// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte QuobyteVolumeSourceInput `pulumi:"quobyte"`

	// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info:
	// https://examples.k8s.io/volumes/rbd/README.md
	Rbd RBDVolumeSourceInput `pulumi:"rbd"`

	// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO ScaleIOVolumeSourceInput `pulumi:"scaleIO"`

	// Secret represents a secret that should populate this volume. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret SecretVolumeSourceInput `pulumi:"secret"`

	// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos StorageOSVolumeSourceInput `pulumi:"storageos"`

	// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume VsphereVirtualDiskVolumeSourceInput `pulumi:"vsphereVolume"`

}

func (a VolumeArgs) ElementType() reflect.Type {
	return _VolumeType
}

func (a VolumeArgs) ToVolumeOutput() VolumeOutput {
	return pulumi.ToOutput(a).(VolumeOutput)
}

func (a VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeOutput)
}

// VolumeOutput is an output type that resolves to a Input.
type VolumeOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeOutput{}) }

func (VolumeOutput) ElementType() reflect.Type {
	return _VolumeType
}

func (o VolumeOutput) AwsElasticBlockStore() AWSElasticBlockStoreVolumeSourceOutput {
	return o.Apply(func(v Volume) *AWSElasticBlockStoreVolumeSource {
		return v.AwsElasticBlockStore
	}).(AWSElasticBlockStoreVolumeSourceOutput)
}

func (o VolumeOutput) AzureDisk() AzureDiskVolumeSourceOutput {
	return o.Apply(func(v Volume) *AzureDiskVolumeSource {
		return v.AzureDisk
	}).(AzureDiskVolumeSourceOutput)
}

func (o VolumeOutput) AzureFile() AzureFileVolumeSourceOutput {
	return o.Apply(func(v Volume) *AzureFileVolumeSource {
		return v.AzureFile
	}).(AzureFileVolumeSourceOutput)
}

func (o VolumeOutput) Cephfs() CephFSVolumeSourceOutput {
	return o.Apply(func(v Volume) *CephFSVolumeSource {
		return v.Cephfs
	}).(CephFSVolumeSourceOutput)
}

func (o VolumeOutput) Cinder() CinderVolumeSourceOutput {
	return o.Apply(func(v Volume) *CinderVolumeSource {
		return v.Cinder
	}).(CinderVolumeSourceOutput)
}

func (o VolumeOutput) ConfigMap() ConfigMapVolumeSourceOutput {
	return o.Apply(func(v Volume) *ConfigMapVolumeSource {
		return v.ConfigMap
	}).(ConfigMapVolumeSourceOutput)
}

func (o VolumeOutput) Csi() CSIVolumeSourceOutput {
	return o.Apply(func(v Volume) *CSIVolumeSource {
		return v.Csi
	}).(CSIVolumeSourceOutput)
}

func (o VolumeOutput) DownwardAPI() DownwardAPIVolumeSourceOutput {
	return o.Apply(func(v Volume) *DownwardAPIVolumeSource {
		return v.DownwardAPI
	}).(DownwardAPIVolumeSourceOutput)
}

func (o VolumeOutput) EmptyDir() EmptyDirVolumeSourceOutput {
	return o.Apply(func(v Volume) *EmptyDirVolumeSource {
		return v.EmptyDir
	}).(EmptyDirVolumeSourceOutput)
}

func (o VolumeOutput) Fc() FCVolumeSourceOutput {
	return o.Apply(func(v Volume) *FCVolumeSource {
		return v.Fc
	}).(FCVolumeSourceOutput)
}

func (o VolumeOutput) FlexVolume() FlexVolumeSourceOutput {
	return o.Apply(func(v Volume) *FlexVolumeSource {
		return v.FlexVolume
	}).(FlexVolumeSourceOutput)
}

func (o VolumeOutput) Flocker() FlockerVolumeSourceOutput {
	return o.Apply(func(v Volume) *FlockerVolumeSource {
		return v.Flocker
	}).(FlockerVolumeSourceOutput)
}

func (o VolumeOutput) GcePersistentDisk() GCEPersistentDiskVolumeSourceOutput {
	return o.Apply(func(v Volume) *GCEPersistentDiskVolumeSource {
		return v.GcePersistentDisk
	}).(GCEPersistentDiskVolumeSourceOutput)
}

func (o VolumeOutput) GitRepo() GitRepoVolumeSourceOutput {
	return o.Apply(func(v Volume) *GitRepoVolumeSource {
		return v.GitRepo
	}).(GitRepoVolumeSourceOutput)
}

func (o VolumeOutput) Glusterfs() GlusterfsVolumeSourceOutput {
	return o.Apply(func(v Volume) *GlusterfsVolumeSource {
		return v.Glusterfs
	}).(GlusterfsVolumeSourceOutput)
}

func (o VolumeOutput) HostPath() HostPathVolumeSourceOutput {
	return o.Apply(func(v Volume) *HostPathVolumeSource {
		return v.HostPath
	}).(HostPathVolumeSourceOutput)
}

func (o VolumeOutput) Iscsi() ISCSIVolumeSourceOutput {
	return o.Apply(func(v Volume) *ISCSIVolumeSource {
		return v.Iscsi
	}).(ISCSIVolumeSourceOutput)
}

func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v Volume) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o VolumeOutput) Nfs() NFSVolumeSourceOutput {
	return o.Apply(func(v Volume) *NFSVolumeSource {
		return v.Nfs
	}).(NFSVolumeSourceOutput)
}

func (o VolumeOutput) PersistentVolumeClaim() PersistentVolumeClaimVolumeSourceOutput {
	return o.Apply(func(v Volume) *PersistentVolumeClaimVolumeSource {
		return v.PersistentVolumeClaim
	}).(PersistentVolumeClaimVolumeSourceOutput)
}

func (o VolumeOutput) PhotonPersistentDisk() PhotonPersistentDiskVolumeSourceOutput {
	return o.Apply(func(v Volume) *PhotonPersistentDiskVolumeSource {
		return v.PhotonPersistentDisk
	}).(PhotonPersistentDiskVolumeSourceOutput)
}

func (o VolumeOutput) PortworxVolume() PortworxVolumeSourceOutput {
	return o.Apply(func(v Volume) *PortworxVolumeSource {
		return v.PortworxVolume
	}).(PortworxVolumeSourceOutput)
}

func (o VolumeOutput) Projected() ProjectedVolumeSourceOutput {
	return o.Apply(func(v Volume) *ProjectedVolumeSource {
		return v.Projected
	}).(ProjectedVolumeSourceOutput)
}

func (o VolumeOutput) Quobyte() QuobyteVolumeSourceOutput {
	return o.Apply(func(v Volume) *QuobyteVolumeSource {
		return v.Quobyte
	}).(QuobyteVolumeSourceOutput)
}

func (o VolumeOutput) Rbd() RBDVolumeSourceOutput {
	return o.Apply(func(v Volume) *RBDVolumeSource {
		return v.Rbd
	}).(RBDVolumeSourceOutput)
}

func (o VolumeOutput) ScaleIO() ScaleIOVolumeSourceOutput {
	return o.Apply(func(v Volume) *ScaleIOVolumeSource {
		return v.ScaleIO
	}).(ScaleIOVolumeSourceOutput)
}

func (o VolumeOutput) Secret() SecretVolumeSourceOutput {
	return o.Apply(func(v Volume) *SecretVolumeSource {
		return v.Secret
	}).(SecretVolumeSourceOutput)
}

func (o VolumeOutput) Storageos() StorageOSVolumeSourceOutput {
	return o.Apply(func(v Volume) *StorageOSVolumeSource {
		return v.Storageos
	}).(StorageOSVolumeSourceOutput)
}

func (o VolumeOutput) VsphereVolume() VsphereVirtualDiskVolumeSourceOutput {
	return o.Apply(func(v Volume) *VsphereVirtualDiskVolumeSource {
		return v.VsphereVolume
	}).(VsphereVirtualDiskVolumeSourceOutput)
}

var _VolumeArrayType = reflect.TypeOf((*[]Volume)(nil)).Elem()

type VolumeArrayInput interface {
	ElementType() reflect.Type

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (a VolumeArray) ElementType() reflect.Type {
	return _VolumeArrayType
}

func (a VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return pulumi.ToOutput(a).(VolumeArrayOutput)
}

func (a VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeArrayOutput)
}

type VolumeArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeArrayOutput{}) }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return _VolumeArrayType
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}
