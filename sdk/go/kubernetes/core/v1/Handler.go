// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Handler defines a specific action that should be taken
type Handler struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *ExecAction `pulumi:"exec"`

	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetAction `pulumi:"httpGet"`

	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
	TcpSocket *TCPSocketAction `pulumi:"tcpSocket"`

}

var _HandlerType = reflect.TypeOf((*Handler)(nil)).Elem()

// HandlerInput represents an input type that resolves to a Handler.
type HandlerInput interface {
	ElementType() reflect.Type

	ToHandlerOutput() HandlerOutput
	ToHandlerOutputWithContext(ctx context.Context) HandlerOutput
}

// HandlerArgs is a HandlerInput whose fields are all Input types.
type HandlerArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec ExecActionInput `pulumi:"exec"`

	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionInput `pulumi:"httpGet"`

	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
	TcpSocket TCPSocketActionInput `pulumi:"tcpSocket"`

}

func (a HandlerArgs) ElementType() reflect.Type {
	return _HandlerType
}

func (a HandlerArgs) ToHandlerOutput() HandlerOutput {
	return pulumi.ToOutput(a).(HandlerOutput)
}

func (a HandlerArgs) ToHandlerOutputWithContext(ctx context.Context) HandlerOutput {
	return pulumi.ToOutputWithContext(ctx, a).(HandlerOutput)
}

// HandlerOutput is an output type that resolves to a Input.
type HandlerOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(HandlerOutput{}) }

func (HandlerOutput) ElementType() reflect.Type {
	return _HandlerType
}

func (o HandlerOutput) Exec() ExecActionOutput {
	return o.Apply(func(v Handler) *ExecAction {
		return v.Exec
	}).(ExecActionOutput)
}

func (o HandlerOutput) HttpGet() HTTPGetActionOutput {
	return o.Apply(func(v Handler) *HTTPGetAction {
		return v.HttpGet
	}).(HTTPGetActionOutput)
}

func (o HandlerOutput) TcpSocket() TCPSocketActionOutput {
	return o.Apply(func(v Handler) *TCPSocketAction {
		return v.TcpSocket
	}).(TCPSocketActionOutput)
}

