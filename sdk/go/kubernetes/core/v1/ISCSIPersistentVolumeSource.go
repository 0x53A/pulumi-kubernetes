// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as
// read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIPersistentVolumeSource struct {
	// whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`

	// whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`

	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to
	// be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `pulumi:"fsType"`

	// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously,
	// new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`

	// Target iSCSI Qualified Name.
	Iqn string `pulumi:"iqn"`

	// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`

	// iSCSI Target Lun number.
	Lun int `pulumi:"lun"`

	// iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than
	// default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`

	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`

	// CHAP Secret for iSCSI target and initiator authentication
	SecretRef *SecretReference `pulumi:"secretRef"`

	// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than
	// default (typically TCP ports 860 and 3260).
	TargetPortal string `pulumi:"targetPortal"`

}

var _ISCSIPersistentVolumeSourceType = reflect.TypeOf((*ISCSIPersistentVolumeSource)(nil)).Elem()

// ISCSIPersistentVolumeSourceInput represents an input type that resolves to a ISCSIPersistentVolumeSource.
type ISCSIPersistentVolumeSourceInput interface {
	ElementType() reflect.Type

	ToISCSIPersistentVolumeSourceOutput() ISCSIPersistentVolumeSourceOutput
	ToISCSIPersistentVolumeSourceOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourceOutput
}

// ISCSIPersistentVolumeSourceArgs is a ISCSIPersistentVolumeSourceInput whose fields are all Input types.
type ISCSIPersistentVolumeSourceArgs struct {
	// Target iSCSI Qualified Name.
	Iqn pulumi.StringInput `pulumi:"iqn"`

	// iSCSI Target Lun number.
	Lun pulumi.IntInput `pulumi:"lun"`

	// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than
	// default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringInput `pulumi:"targetPortal"`

	// whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolInput `pulumi:"chapAuthDiscovery"`

	// whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolInput `pulumi:"chapAuthSession"`

	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to
	// be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType pulumi.StringInput `pulumi:"fsType"`

	// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously,
	// new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringInput `pulumi:"initiatorName"`

	// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringInput `pulumi:"iscsiInterface"`

	// iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than
	// default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`

	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

	// CHAP Secret for iSCSI target and initiator authentication
	SecretRef SecretReferenceInput `pulumi:"secretRef"`

}

func (a ISCSIPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return _ISCSIPersistentVolumeSourceType
}

func (a ISCSIPersistentVolumeSourceArgs) ToISCSIPersistentVolumeSourceOutput() ISCSIPersistentVolumeSourceOutput {
	return pulumi.ToOutput(a).(ISCSIPersistentVolumeSourceOutput)
}

func (a ISCSIPersistentVolumeSourceArgs) ToISCSIPersistentVolumeSourceOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ISCSIPersistentVolumeSourceOutput)
}

// ISCSIPersistentVolumeSourceOutput is an output type that resolves to a Input.
type ISCSIPersistentVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ISCSIPersistentVolumeSourceOutput{}) }

func (ISCSIPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return _ISCSIPersistentVolumeSourceType
}

func (o ISCSIPersistentVolumeSourceOutput) ChapAuthDiscovery() pulumi.BoolOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) *bool {
		return v.ChapAuthDiscovery
	}).(pulumi.BoolOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) ChapAuthSession() pulumi.BoolOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) *bool {
		return v.ChapAuthSession
	}).(pulumi.BoolOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) FsType() pulumi.StringOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) *string {
		return v.FsType
	}).(pulumi.StringOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) InitiatorName() pulumi.StringOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) *string {
		return v.InitiatorName
	}).(pulumi.StringOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) Iqn() pulumi.StringOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) string {
		return v.Iqn
	}).(pulumi.StringOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) IscsiInterface() pulumi.StringOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) *string {
		return v.IscsiInterface
	}).(pulumi.StringOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) Lun() pulumi.IntOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) int {
		return v.Lun
	}).(pulumi.IntOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) Portals() pulumi.StringArrayOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) []string {
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) SecretRef() SecretReferenceOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) *SecretReference {
		return v.SecretRef
	}).(SecretReferenceOutput)
}

func (o ISCSIPersistentVolumeSourceOutput) TargetPortal() pulumi.StringOutput {
	return o.Apply(func(v ISCSIPersistentVolumeSource) string {
		return v.TargetPortal
	}).(pulumi.StringOutput)
}

