// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type ResourceQuota struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Spec defines the desired quota.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ResourceQuotaSpecOutput `pulumi:"spec"`

	// Status defines the actual enforced quota and its current usage.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ResourceQuotaStatusOutput `pulumi:"status"`

}

// ResourceQuotaArgs is the set of arguments needed to create a ResourceQuota resource.
type ResourceQuotaArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the desired quota.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ResourceQuotaSpecInput `pulumi:"spec"`

}

// NewResourceQuota creates a ResourceQuota resource with the given unique name, arguments, and options.
func NewResourceQuota(ctx *pulumi.Context, name string, args *ResourceQuotaArgs, opts ...pulumi.ResourceOption) (*ResourceQuota, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("ResourceQuota")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToResourceQuotaSpecOutput()
		}
	}
	var resource ResourceQuota
	err := ctx.RegisterResource("kubernetes:core/v1:ResourceQuota", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceQuota gets an existing ResourceQuota resource's state with the given name and ID.
func GetResourceQuota(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*ResourceQuota, error) {
	var resource ResourceQuota
	err := ctx.ReadResource("kubernetes:core/v1:ResourceQuota", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type ResourceQuotaProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Spec defines the desired quota.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ResourceQuotaSpec `pulumi:"spec"`

	// Status defines the actual enforced quota and its current usage.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ResourceQuotaStatus `pulumi:"status"`

}

var _ResourceQuotaPropertyType = reflect.TypeOf((*ResourceQuotaProperty)(nil)).Elem()

// ResourceQuotaPropertyInput represents an input type that resolves to a ResourceQuotaProperty.
type ResourceQuotaPropertyInput interface {
	ElementType() reflect.Type

	ToResourceQuotaPropertyOutput() ResourceQuotaPropertyOutput
	ToResourceQuotaPropertyOutputWithContext(ctx context.Context) ResourceQuotaPropertyOutput
}

// ResourceQuotaPropertyArgs is a ResourceQuotaPropertyInput whose fields are all Input types.
type ResourceQuotaPropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the desired quota.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ResourceQuotaSpecInput `pulumi:"spec"`

}

func (a ResourceQuotaPropertyArgs) ElementType() reflect.Type {
	return _ResourceQuotaPropertyType
}

func (a ResourceQuotaPropertyArgs) ToResourceQuotaPropertyOutput() ResourceQuotaPropertyOutput {
	return pulumi.ToOutput(a).(ResourceQuotaPropertyOutput)
}

func (a ResourceQuotaPropertyArgs) ToResourceQuotaPropertyOutputWithContext(ctx context.Context) ResourceQuotaPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ResourceQuotaPropertyOutput)
}

// ResourceQuotaPropertyOutput is an output type that resolves to a Input.
type ResourceQuotaPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ResourceQuotaPropertyOutput{}) }

func (ResourceQuotaPropertyOutput) ElementType() reflect.Type {
	return _ResourceQuotaPropertyType
}

func (o ResourceQuotaPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v ResourceQuotaProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o ResourceQuotaPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v ResourceQuotaProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o ResourceQuotaPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v ResourceQuotaProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o ResourceQuotaPropertyOutput) Spec() ResourceQuotaSpecOutput {
	return o.Apply(func(v ResourceQuotaProperty) *ResourceQuotaSpec {
		return v.Spec
	}).(ResourceQuotaSpecOutput)
}

func (o ResourceQuotaPropertyOutput) Status() ResourceQuotaStatusOutput {
	return o.Apply(func(v ResourceQuotaProperty) ResourceQuotaStatus {
		return v.Status
	}).(ResourceQuotaStatusOutput)
}

var _ResourceQuotaPropertyArrayType = reflect.TypeOf((*[]ResourceQuotaProperty)(nil)).Elem()

type ResourceQuotaPropertyArrayInput interface {
	ElementType() reflect.Type

	ToResourceQuotaPropertyArrayOutput() ResourceQuotaPropertyArrayOutput
	ToResourceQuotaPropertyArrayOutputWithContext(ctx context.Context) ResourceQuotaPropertyArrayOutput
}

type ResourceQuotaPropertyArray []ResourceQuotaPropertyInput

func (a ResourceQuotaPropertyArray) ElementType() reflect.Type {
	return _ResourceQuotaPropertyArrayType
}

func (a ResourceQuotaPropertyArray) ToResourceQuotaPropertyArrayOutput() ResourceQuotaPropertyArrayOutput {
	return pulumi.ToOutput(a).(ResourceQuotaPropertyArrayOutput)
}

func (a ResourceQuotaPropertyArray) ToResourceQuotaPropertyArrayOutputWithContext(ctx context.Context) ResourceQuotaPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ResourceQuotaPropertyArrayOutput)
}

type ResourceQuotaPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ResourceQuotaPropertyArrayOutput{}) }

func (ResourceQuotaPropertyArrayOutput) ElementType() reflect.Type {
	return _ResourceQuotaPropertyArrayType
}

func (o ResourceQuotaPropertyArrayOutput) Index(i pulumi.IntInput) ResourceQuotaPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ResourceQuotaProperty {
		return vs[0].([]ResourceQuotaProperty)[vs[1].(int)]
	}).(ResourceQuotaPropertyOutput)
}
