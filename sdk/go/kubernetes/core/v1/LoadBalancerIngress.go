// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for
// the service should be sent to an ingress point.
type LoadBalancerIngress struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS
	// load-balancers)
	Hostname *string `pulumi:"hostname"`

	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack
	// load-balancers)
	Ip *string `pulumi:"ip"`

}

var _LoadBalancerIngressType = reflect.TypeOf((*LoadBalancerIngress)(nil)).Elem()

// LoadBalancerIngressInput represents an input type that resolves to a LoadBalancerIngress.
type LoadBalancerIngressInput interface {
	ElementType() reflect.Type

	ToLoadBalancerIngressOutput() LoadBalancerIngressOutput
	ToLoadBalancerIngressOutputWithContext(ctx context.Context) LoadBalancerIngressOutput
}

// LoadBalancerIngressArgs is a LoadBalancerIngressInput whose fields are all Input types.
type LoadBalancerIngressArgs struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS
	// load-balancers)
	Hostname pulumi.StringInput `pulumi:"hostname"`

	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack
	// load-balancers)
	Ip pulumi.StringInput `pulumi:"ip"`

}

func (a LoadBalancerIngressArgs) ElementType() reflect.Type {
	return _LoadBalancerIngressType
}

func (a LoadBalancerIngressArgs) ToLoadBalancerIngressOutput() LoadBalancerIngressOutput {
	return pulumi.ToOutput(a).(LoadBalancerIngressOutput)
}

func (a LoadBalancerIngressArgs) ToLoadBalancerIngressOutputWithContext(ctx context.Context) LoadBalancerIngressOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LoadBalancerIngressOutput)
}

// LoadBalancerIngressOutput is an output type that resolves to a Input.
type LoadBalancerIngressOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LoadBalancerIngressOutput{}) }

func (LoadBalancerIngressOutput) ElementType() reflect.Type {
	return _LoadBalancerIngressType
}

func (o LoadBalancerIngressOutput) Hostname() pulumi.StringOutput {
	return o.Apply(func(v LoadBalancerIngress) *string {
		return v.Hostname
	}).(pulumi.StringOutput)
}

func (o LoadBalancerIngressOutput) Ip() pulumi.StringOutput {
	return o.Apply(func(v LoadBalancerIngress) *string {
		return v.Ip
	}).(pulumi.StringOutput)
}

var _LoadBalancerIngressArrayType = reflect.TypeOf((*[]LoadBalancerIngress)(nil)).Elem()

type LoadBalancerIngressArrayInput interface {
	ElementType() reflect.Type

	ToLoadBalancerIngressArrayOutput() LoadBalancerIngressArrayOutput
	ToLoadBalancerIngressArrayOutputWithContext(ctx context.Context) LoadBalancerIngressArrayOutput
}

type LoadBalancerIngressArray []LoadBalancerIngressInput

func (a LoadBalancerIngressArray) ElementType() reflect.Type {
	return _LoadBalancerIngressArrayType
}

func (a LoadBalancerIngressArray) ToLoadBalancerIngressArrayOutput() LoadBalancerIngressArrayOutput {
	return pulumi.ToOutput(a).(LoadBalancerIngressArrayOutput)
}

func (a LoadBalancerIngressArray) ToLoadBalancerIngressArrayOutputWithContext(ctx context.Context) LoadBalancerIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LoadBalancerIngressArrayOutput)
}

type LoadBalancerIngressArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LoadBalancerIngressArrayOutput{}) }

func (LoadBalancerIngressArrayOutput) ElementType() reflect.Type {
	return _LoadBalancerIngressArrayType
}

func (o LoadBalancerIngressArrayOutput) Index(i pulumi.IntInput) LoadBalancerIngressOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) LoadBalancerIngress {
		return vs[0].([]LoadBalancerIngress)[vs[1].(int)]
	}).(LoadBalancerIngressOutput)
}
