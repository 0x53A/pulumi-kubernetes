// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// LoadBalancerStatus represents the status of a load-balancer.
type LoadBalancerStatus struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the
	// service should be sent to these ingress points.
	Ingress []LoadBalancerIngress `pulumi:"ingress"`

}

var _LoadBalancerStatusType = reflect.TypeOf((*LoadBalancerStatus)(nil)).Elem()

// LoadBalancerStatusInput represents an input type that resolves to a LoadBalancerStatus.
type LoadBalancerStatusInput interface {
	ElementType() reflect.Type

	ToLoadBalancerStatusOutput() LoadBalancerStatusOutput
	ToLoadBalancerStatusOutputWithContext(ctx context.Context) LoadBalancerStatusOutput
}

// LoadBalancerStatusArgs is a LoadBalancerStatusInput whose fields are all Input types.
type LoadBalancerStatusArgs struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the
	// service should be sent to these ingress points.
	Ingress LoadBalancerIngressArrayInput `pulumi:"ingress"`

}

func (a LoadBalancerStatusArgs) ElementType() reflect.Type {
	return _LoadBalancerStatusType
}

func (a LoadBalancerStatusArgs) ToLoadBalancerStatusOutput() LoadBalancerStatusOutput {
	return pulumi.ToOutput(a).(LoadBalancerStatusOutput)
}

func (a LoadBalancerStatusArgs) ToLoadBalancerStatusOutputWithContext(ctx context.Context) LoadBalancerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LoadBalancerStatusOutput)
}

// LoadBalancerStatusOutput is an output type that resolves to a Input.
type LoadBalancerStatusOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LoadBalancerStatusOutput{}) }

func (LoadBalancerStatusOutput) ElementType() reflect.Type {
	return _LoadBalancerStatusType
}

func (o LoadBalancerStatusOutput) Ingress() LoadBalancerIngressArrayOutput {
	return o.Apply(func(v LoadBalancerStatus) []LoadBalancerIngress {
		return v.Ingress
	}).(LoadBalancerIngressArrayOutput)
}

