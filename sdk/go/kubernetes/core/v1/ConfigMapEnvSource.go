// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
// 
// The contents of the target ConfigMap's Data field will represent the key-value pairs as
// environment variables.
type ConfigMapEnvSource struct {
	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`

	// Specify whether the ConfigMap must be defined
	Optional *bool `pulumi:"optional"`

}

var _ConfigMapEnvSourceType = reflect.TypeOf((*ConfigMapEnvSource)(nil)).Elem()

// ConfigMapEnvSourceInput represents an input type that resolves to a ConfigMapEnvSource.
type ConfigMapEnvSourceInput interface {
	ElementType() reflect.Type

	ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput
	ToConfigMapEnvSourceOutputWithContext(ctx context.Context) ConfigMapEnvSourceOutput
}

// ConfigMapEnvSourceArgs is a ConfigMapEnvSourceInput whose fields are all Input types.
type ConfigMapEnvSourceArgs struct {
	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`

	// Specify whether the ConfigMap must be defined
	Optional pulumi.BoolInput `pulumi:"optional"`

}

func (a ConfigMapEnvSourceArgs) ElementType() reflect.Type {
	return _ConfigMapEnvSourceType
}

func (a ConfigMapEnvSourceArgs) ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput {
	return pulumi.ToOutput(a).(ConfigMapEnvSourceOutput)
}

func (a ConfigMapEnvSourceArgs) ToConfigMapEnvSourceOutputWithContext(ctx context.Context) ConfigMapEnvSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ConfigMapEnvSourceOutput)
}

// ConfigMapEnvSourceOutput is an output type that resolves to a Input.
type ConfigMapEnvSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ConfigMapEnvSourceOutput{}) }

func (ConfigMapEnvSourceOutput) ElementType() reflect.Type {
	return _ConfigMapEnvSourceType
}

func (o ConfigMapEnvSourceOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v ConfigMapEnvSource) *string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o ConfigMapEnvSourceOutput) Optional() pulumi.BoolOutput {
	return o.Apply(func(v ConfigMapEnvSource) *bool {
		return v.Optional
	}).(pulumi.BoolOutput)
}

