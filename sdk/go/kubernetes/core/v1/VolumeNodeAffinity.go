// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type VolumeNodeAffinity struct {
	// Required specifies hard node constraints that must be met.
	Required *NodeSelector `pulumi:"required"`

}

var _VolumeNodeAffinityType = reflect.TypeOf((*VolumeNodeAffinity)(nil)).Elem()

// VolumeNodeAffinityInput represents an input type that resolves to a VolumeNodeAffinity.
type VolumeNodeAffinityInput interface {
	ElementType() reflect.Type

	ToVolumeNodeAffinityOutput() VolumeNodeAffinityOutput
	ToVolumeNodeAffinityOutputWithContext(ctx context.Context) VolumeNodeAffinityOutput
}

// VolumeNodeAffinityArgs is a VolumeNodeAffinityInput whose fields are all Input types.
type VolumeNodeAffinityArgs struct {
	// Required specifies hard node constraints that must be met.
	Required NodeSelectorInput `pulumi:"required"`

}

func (a VolumeNodeAffinityArgs) ElementType() reflect.Type {
	return _VolumeNodeAffinityType
}

func (a VolumeNodeAffinityArgs) ToVolumeNodeAffinityOutput() VolumeNodeAffinityOutput {
	return pulumi.ToOutput(a).(VolumeNodeAffinityOutput)
}

func (a VolumeNodeAffinityArgs) ToVolumeNodeAffinityOutputWithContext(ctx context.Context) VolumeNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeNodeAffinityOutput)
}

// VolumeNodeAffinityOutput is an output type that resolves to a Input.
type VolumeNodeAffinityOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeNodeAffinityOutput{}) }

func (VolumeNodeAffinityOutput) ElementType() reflect.Type {
	return _VolumeNodeAffinityType
}

func (o VolumeNodeAffinityOutput) Required() NodeSelectorOutput {
	return o.Apply(func(v VolumeNodeAffinity) *NodeSelector {
		return v.Required
	}).(NodeSelectorOutput)
}

