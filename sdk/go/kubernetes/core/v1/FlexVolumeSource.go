// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based
// plugin.
type FlexVolumeSource struct {
	// Driver is the name of the driver to use for this volume.
	Driver string `pulumi:"driver"`

	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`

	// Optional: Extra command options if any.
	Options map[string]string `pulumi:"options"`

	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`

	// Optional: SecretRef is reference to the secret object containing sensitive information to pass
	// to the plugin scripts. This may be empty if no secret object is specified. If the secret object
	// contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef *LocalObjectReference `pulumi:"secretRef"`

}

var _FlexVolumeSourceType = reflect.TypeOf((*FlexVolumeSource)(nil)).Elem()

// FlexVolumeSourceInput represents an input type that resolves to a FlexVolumeSource.
type FlexVolumeSourceInput interface {
	ElementType() reflect.Type

	ToFlexVolumeSourceOutput() FlexVolumeSourceOutput
	ToFlexVolumeSourceOutputWithContext(ctx context.Context) FlexVolumeSourceOutput
}

// FlexVolumeSourceArgs is a FlexVolumeSourceInput whose fields are all Input types.
type FlexVolumeSourceArgs struct {
	// Driver is the name of the driver to use for this volume.
	Driver pulumi.StringInput `pulumi:"driver"`

	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringInput `pulumi:"fsType"`

	// Optional: Extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`

	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

	// Optional: SecretRef is reference to the secret object containing sensitive information to pass
	// to the plugin scripts. This may be empty if no secret object is specified. If the secret object
	// contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef LocalObjectReferenceInput `pulumi:"secretRef"`

}

func (a FlexVolumeSourceArgs) ElementType() reflect.Type {
	return _FlexVolumeSourceType
}

func (a FlexVolumeSourceArgs) ToFlexVolumeSourceOutput() FlexVolumeSourceOutput {
	return pulumi.ToOutput(a).(FlexVolumeSourceOutput)
}

func (a FlexVolumeSourceArgs) ToFlexVolumeSourceOutputWithContext(ctx context.Context) FlexVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(FlexVolumeSourceOutput)
}

// FlexVolumeSourceOutput is an output type that resolves to a Input.
type FlexVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(FlexVolumeSourceOutput{}) }

func (FlexVolumeSourceOutput) ElementType() reflect.Type {
	return _FlexVolumeSourceType
}

func (o FlexVolumeSourceOutput) Driver() pulumi.StringOutput {
	return o.Apply(func(v FlexVolumeSource) string {
		return v.Driver
	}).(pulumi.StringOutput)
}

func (o FlexVolumeSourceOutput) FsType() pulumi.StringOutput {
	return o.Apply(func(v FlexVolumeSource) *string {
		return v.FsType
	}).(pulumi.StringOutput)
}

func (o FlexVolumeSourceOutput) Options() pulumi.StringMapOutput {
	return o.Apply(func(v FlexVolumeSource) map[string]string {
		return v.Options
	}).(pulumi.StringMapOutput)
}

func (o FlexVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v FlexVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o FlexVolumeSourceOutput) SecretRef() LocalObjectReferenceOutput {
	return o.Apply(func(v FlexVolumeSource) *LocalObjectReference {
		return v.SecretRef
	}).(LocalObjectReferenceOutput)
}

