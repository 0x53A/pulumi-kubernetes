// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type Taint struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are
	// NoSchedule, PreferNoSchedule and NoExecute.
	Effect string `pulumi:"effect"`

	// Required. The taint key to be applied to a node.
	Key string `pulumi:"key"`

	// TimeAdded represents the time at which the taint was added. It is only written for NoExecute
	// taints.
	TimeAdded *string `pulumi:"timeAdded"`

	// Required. The taint value corresponding to the taint key.
	Value *string `pulumi:"value"`

}

var _TaintType = reflect.TypeOf((*Taint)(nil)).Elem()

// TaintInput represents an input type that resolves to a Taint.
type TaintInput interface {
	ElementType() reflect.Type

	ToTaintOutput() TaintOutput
	ToTaintOutputWithContext(ctx context.Context) TaintOutput
}

// TaintArgs is a TaintInput whose fields are all Input types.
type TaintArgs struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are
	// NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringInput `pulumi:"effect"`

	// Required. The taint key to be applied to a node.
	Key pulumi.StringInput `pulumi:"key"`

	// TimeAdded represents the time at which the taint was added. It is only written for NoExecute
	// taints.
	TimeAdded pulumi.StringInput `pulumi:"timeAdded"`

	// Required. The taint value corresponding to the taint key.
	Value pulumi.StringInput `pulumi:"value"`

}

func (a TaintArgs) ElementType() reflect.Type {
	return _TaintType
}

func (a TaintArgs) ToTaintOutput() TaintOutput {
	return pulumi.ToOutput(a).(TaintOutput)
}

func (a TaintArgs) ToTaintOutputWithContext(ctx context.Context) TaintOutput {
	return pulumi.ToOutputWithContext(ctx, a).(TaintOutput)
}

// TaintOutput is an output type that resolves to a Input.
type TaintOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(TaintOutput{}) }

func (TaintOutput) ElementType() reflect.Type {
	return _TaintType
}

func (o TaintOutput) Effect() pulumi.StringOutput {
	return o.Apply(func(v Taint) string {
		return v.Effect
	}).(pulumi.StringOutput)
}

func (o TaintOutput) Key() pulumi.StringOutput {
	return o.Apply(func(v Taint) string {
		return v.Key
	}).(pulumi.StringOutput)
}

func (o TaintOutput) TimeAdded() pulumi.StringOutput {
	return o.Apply(func(v Taint) *string {
		return v.TimeAdded
	}).(pulumi.StringOutput)
}

func (o TaintOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v Taint) *string {
		return v.Value
	}).(pulumi.StringOutput)
}

var _TaintArrayType = reflect.TypeOf((*[]Taint)(nil)).Elem()

type TaintArrayInput interface {
	ElementType() reflect.Type

	ToTaintArrayOutput() TaintArrayOutput
	ToTaintArrayOutputWithContext(ctx context.Context) TaintArrayOutput
}

type TaintArray []TaintInput

func (a TaintArray) ElementType() reflect.Type {
	return _TaintArrayType
}

func (a TaintArray) ToTaintArrayOutput() TaintArrayOutput {
	return pulumi.ToOutput(a).(TaintArrayOutput)
}

func (a TaintArray) ToTaintArrayOutputWithContext(ctx context.Context) TaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(TaintArrayOutput)
}

type TaintArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(TaintArrayOutput{}) }

func (TaintArrayOutput) ElementType() reflect.Type {
	return _TaintArrayType
}

func (o TaintArrayOutput) Index(i pulumi.IntInput) TaintOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) Taint {
		return vs[0].([]Taint)[vs[1].(int)]
	}).(TaintOutput)
}
