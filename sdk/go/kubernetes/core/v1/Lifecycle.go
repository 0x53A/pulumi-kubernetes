// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Lifecycle describes actions that the management system should take in response to container
// lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container
// blocks until the action is complete, unless the container process fails, in which case the
// handler is aborted.
type Lifecycle struct {
	// PostStart is called immediately after a container is created. If the handler fails, the
	// container is terminated and restarted according to its restart policy. Other management of the
	// container blocks until the hook completes. More info:
	// https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart *Handler `pulumi:"postStart"`

	// PreStop is called immediately before a container is terminated due to an API request or
	// management event such as liveness/startup probe failure, preemption, resource contention, etc.
	// The handler is not called if the container crashes or exits. The reason for termination is
	// passed to the handler. The Pod's termination grace period countdown begins before the PreStop
	// hooked is executed. Regardless of the outcome of the handler, the container will eventually
	// terminate within the Pod's termination grace period. Other management of the container blocks
	// until the hook completes or until the termination grace period is reached. More info:
	// https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop *Handler `pulumi:"preStop"`

}

var _LifecycleType = reflect.TypeOf((*Lifecycle)(nil)).Elem()

// LifecycleInput represents an input type that resolves to a Lifecycle.
type LifecycleInput interface {
	ElementType() reflect.Type

	ToLifecycleOutput() LifecycleOutput
	ToLifecycleOutputWithContext(ctx context.Context) LifecycleOutput
}

// LifecycleArgs is a LifecycleInput whose fields are all Input types.
type LifecycleArgs struct {
	// PostStart is called immediately after a container is created. If the handler fails, the
	// container is terminated and restarted according to its restart policy. Other management of the
	// container blocks until the hook completes. More info:
	// https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart HandlerInput `pulumi:"postStart"`

	// PreStop is called immediately before a container is terminated due to an API request or
	// management event such as liveness/startup probe failure, preemption, resource contention, etc.
	// The handler is not called if the container crashes or exits. The reason for termination is
	// passed to the handler. The Pod's termination grace period countdown begins before the PreStop
	// hooked is executed. Regardless of the outcome of the handler, the container will eventually
	// terminate within the Pod's termination grace period. Other management of the container blocks
	// until the hook completes or until the termination grace period is reached. More info:
	// https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop HandlerInput `pulumi:"preStop"`

}

func (a LifecycleArgs) ElementType() reflect.Type {
	return _LifecycleType
}

func (a LifecycleArgs) ToLifecycleOutput() LifecycleOutput {
	return pulumi.ToOutput(a).(LifecycleOutput)
}

func (a LifecycleArgs) ToLifecycleOutputWithContext(ctx context.Context) LifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LifecycleOutput)
}

// LifecycleOutput is an output type that resolves to a Input.
type LifecycleOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LifecycleOutput{}) }

func (LifecycleOutput) ElementType() reflect.Type {
	return _LifecycleType
}

func (o LifecycleOutput) PostStart() HandlerOutput {
	return o.Apply(func(v Lifecycle) *Handler {
		return v.PostStart
	}).(HandlerOutput)
}

func (o LifecycleOutput) PreStop() HandlerOutput {
	return o.Apply(func(v Lifecycle) *Handler {
		return v.PreStop
	}).(HandlerOutput)
}

