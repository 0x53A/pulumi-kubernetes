// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once.
// Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`

	// Optional: FC target lun number
	Lun *int `pulumi:"lun"`

	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`

	// Optional: FC target worldwide names (WWNs)
	TargetWWNs []string `pulumi:"targetWWNs"`

	// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and
	// lun must be set, but not both simultaneously.
	Wwids []string `pulumi:"wwids"`

}

var _FCVolumeSourceType = reflect.TypeOf((*FCVolumeSource)(nil)).Elem()

// FCVolumeSourceInput represents an input type that resolves to a FCVolumeSource.
type FCVolumeSourceInput interface {
	ElementType() reflect.Type

	ToFCVolumeSourceOutput() FCVolumeSourceOutput
	ToFCVolumeSourceOutputWithContext(ctx context.Context) FCVolumeSourceOutput
}

// FCVolumeSourceArgs is a FCVolumeSourceInput whose fields are all Input types.
type FCVolumeSourceArgs struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringInput `pulumi:"fsType"`

	// Optional: FC target lun number
	Lun pulumi.IntInput `pulumi:"lun"`

	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

	// Optional: FC target worldwide names (WWNs)
	TargetWWNs pulumi.StringArrayInput `pulumi:"targetWWNs"`

	// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and
	// lun must be set, but not both simultaneously.
	Wwids pulumi.StringArrayInput `pulumi:"wwids"`

}

func (a FCVolumeSourceArgs) ElementType() reflect.Type {
	return _FCVolumeSourceType
}

func (a FCVolumeSourceArgs) ToFCVolumeSourceOutput() FCVolumeSourceOutput {
	return pulumi.ToOutput(a).(FCVolumeSourceOutput)
}

func (a FCVolumeSourceArgs) ToFCVolumeSourceOutputWithContext(ctx context.Context) FCVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(FCVolumeSourceOutput)
}

// FCVolumeSourceOutput is an output type that resolves to a Input.
type FCVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(FCVolumeSourceOutput{}) }

func (FCVolumeSourceOutput) ElementType() reflect.Type {
	return _FCVolumeSourceType
}

func (o FCVolumeSourceOutput) FsType() pulumi.StringOutput {
	return o.Apply(func(v FCVolumeSource) *string {
		return v.FsType
	}).(pulumi.StringOutput)
}

func (o FCVolumeSourceOutput) Lun() pulumi.IntOutput {
	return o.Apply(func(v FCVolumeSource) *int {
		return v.Lun
	}).(pulumi.IntOutput)
}

func (o FCVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v FCVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o FCVolumeSourceOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.Apply(func(v FCVolumeSource) []string {
		return v.TargetWWNs
	}).(pulumi.StringArrayOutput)
}

func (o FCVolumeSourceOutput) Wwids() pulumi.StringArrayOutput {
	return o.Apply(func(v FCVolumeSource) []string {
		return v.Wwids
	}).(pulumi.StringArrayOutput)
}

