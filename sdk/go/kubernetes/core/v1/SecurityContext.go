// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// SecurityContext holds security configuration that will be applied to a container. Some fields are
// present in both SecurityContext and PodSecurityContext.  When both are set, the values in
// SecurityContext take precedence.
type SecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent
	// process. This bool directly controls if the no_new_privs flag will be set on the container
	// process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2)
	// has CAP_SYS_ADMIN
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`

	// The capabilities to add/drop when running containers. Defaults to the default set of
	// capabilities granted by the container runtime.
	Capabilities *Capabilities `pulumi:"capabilities"`

	// Run container in privileged mode. Processes in privileged containers are essentially equivalent
	// to root on the host. Defaults to false.
	Privileged *bool `pulumi:"privileged"`

	// procMount denotes the type of proc mount to use for the containers. The default is
	// DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled.
	ProcMount *string `pulumi:"procMount"`

	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`

	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also
	// be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence.
	RunAsGroup *int `pulumi:"runAsGroup"`

	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container
	// if it does. If unset or false, no such validation will be performed. May also be set in
	// PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified
	// in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`

	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext
	// and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser *int `pulumi:"runAsUser"`

	// The SELinux context to be applied to the container. If unspecified, the container runtime will
	// allocate a random SELinux context for each container.  May also be set in PodSecurityContext.
	// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext
	// takes precedence.
	SeLinuxOptions *SELinuxOptions `pulumi:"seLinuxOptions"`

	// The Windows specific settings applied to all containers. If unspecified, the options from the
	// PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the
	// value specified in SecurityContext takes precedence.
	WindowsOptions *WindowsSecurityContextOptions `pulumi:"windowsOptions"`

}

var _SecurityContextType = reflect.TypeOf((*SecurityContext)(nil)).Elem()

// SecurityContextInput represents an input type that resolves to a SecurityContext.
type SecurityContextInput interface {
	ElementType() reflect.Type

	ToSecurityContextOutput() SecurityContextOutput
	ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput
}

// SecurityContextArgs is a SecurityContextInput whose fields are all Input types.
type SecurityContextArgs struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent
	// process. This bool directly controls if the no_new_privs flag will be set on the container
	// process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2)
	// has CAP_SYS_ADMIN
	AllowPrivilegeEscalation pulumi.BoolInput `pulumi:"allowPrivilegeEscalation"`

	// The capabilities to add/drop when running containers. Defaults to the default set of
	// capabilities granted by the container runtime.
	Capabilities CapabilitiesInput `pulumi:"capabilities"`

	// Run container in privileged mode. Processes in privileged containers are essentially equivalent
	// to root on the host. Defaults to false.
	Privileged pulumi.BoolInput `pulumi:"privileged"`

	// procMount denotes the type of proc mount to use for the containers. The default is
	// DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled.
	ProcMount pulumi.StringInput `pulumi:"procMount"`

	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem pulumi.BoolInput `pulumi:"readOnlyRootFilesystem"`

	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also
	// be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence.
	RunAsGroup pulumi.IntInput `pulumi:"runAsGroup"`

	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container
	// if it does. If unset or false, no such validation will be performed. May also be set in
	// PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified
	// in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolInput `pulumi:"runAsNonRoot"`

	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext
	// and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser pulumi.IntInput `pulumi:"runAsUser"`

	// The SELinux context to be applied to the container. If unspecified, the container runtime will
	// allocate a random SELinux context for each container.  May also be set in PodSecurityContext.
	// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext
	// takes precedence.
	SeLinuxOptions SELinuxOptionsInput `pulumi:"seLinuxOptions"`

	// The Windows specific settings applied to all containers. If unspecified, the options from the
	// PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the
	// value specified in SecurityContext takes precedence.
	WindowsOptions WindowsSecurityContextOptionsInput `pulumi:"windowsOptions"`

}

func (a SecurityContextArgs) ElementType() reflect.Type {
	return _SecurityContextType
}

func (a SecurityContextArgs) ToSecurityContextOutput() SecurityContextOutput {
	return pulumi.ToOutput(a).(SecurityContextOutput)
}

func (a SecurityContextArgs) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SecurityContextOutput)
}

// SecurityContextOutput is an output type that resolves to a Input.
type SecurityContextOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(SecurityContextOutput{}) }

func (SecurityContextOutput) ElementType() reflect.Type {
	return _SecurityContextType
}

func (o SecurityContextOutput) AllowPrivilegeEscalation() pulumi.BoolOutput {
	return o.Apply(func(v SecurityContext) *bool {
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolOutput)
}

func (o SecurityContextOutput) Capabilities() CapabilitiesOutput {
	return o.Apply(func(v SecurityContext) *Capabilities {
		return v.Capabilities
	}).(CapabilitiesOutput)
}

func (o SecurityContextOutput) Privileged() pulumi.BoolOutput {
	return o.Apply(func(v SecurityContext) *bool {
		return v.Privileged
	}).(pulumi.BoolOutput)
}

func (o SecurityContextOutput) ProcMount() pulumi.StringOutput {
	return o.Apply(func(v SecurityContext) *string {
		return v.ProcMount
	}).(pulumi.StringOutput)
}

func (o SecurityContextOutput) ReadOnlyRootFilesystem() pulumi.BoolOutput {
	return o.Apply(func(v SecurityContext) *bool {
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolOutput)
}

func (o SecurityContextOutput) RunAsGroup() pulumi.IntOutput {
	return o.Apply(func(v SecurityContext) *int {
		return v.RunAsGroup
	}).(pulumi.IntOutput)
}

func (o SecurityContextOutput) RunAsNonRoot() pulumi.BoolOutput {
	return o.Apply(func(v SecurityContext) *bool {
		return v.RunAsNonRoot
	}).(pulumi.BoolOutput)
}

func (o SecurityContextOutput) RunAsUser() pulumi.IntOutput {
	return o.Apply(func(v SecurityContext) *int {
		return v.RunAsUser
	}).(pulumi.IntOutput)
}

func (o SecurityContextOutput) SeLinuxOptions() SELinuxOptionsOutput {
	return o.Apply(func(v SecurityContext) *SELinuxOptions {
		return v.SeLinuxOptions
	}).(SELinuxOptionsOutput)
}

func (o SecurityContextOutput) WindowsOptions() WindowsSecurityContextOptionsOutput {
	return o.Apply(func(v SecurityContext) *WindowsSecurityContextOptions {
		return v.WindowsOptions
	}).(WindowsSecurityContextOptionsOutput)
}

