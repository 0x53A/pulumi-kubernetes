// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// EventSource contains information for an event.
type EventSource struct {
	// Component from which the event is generated.
	Component *string `pulumi:"component"`

	// Node name on which the event is generated.
	Host *string `pulumi:"host"`

}

var _EventSourceType = reflect.TypeOf((*EventSource)(nil)).Elem()

// EventSourceInput represents an input type that resolves to a EventSource.
type EventSourceInput interface {
	ElementType() reflect.Type

	ToEventSourceOutput() EventSourceOutput
	ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput
}

// EventSourceArgs is a EventSourceInput whose fields are all Input types.
type EventSourceArgs struct {
	// Component from which the event is generated.
	Component pulumi.StringInput `pulumi:"component"`

	// Node name on which the event is generated.
	Host pulumi.StringInput `pulumi:"host"`

}

func (a EventSourceArgs) ElementType() reflect.Type {
	return _EventSourceType
}

func (a EventSourceArgs) ToEventSourceOutput() EventSourceOutput {
	return pulumi.ToOutput(a).(EventSourceOutput)
}

func (a EventSourceArgs) ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EventSourceOutput)
}

// EventSourceOutput is an output type that resolves to a Input.
type EventSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(EventSourceOutput{}) }

func (EventSourceOutput) ElementType() reflect.Type {
	return _EventSourceType
}

func (o EventSourceOutput) Component() pulumi.StringOutput {
	return o.Apply(func(v EventSource) *string {
		return v.Component
	}).(pulumi.StringOutput)
}

func (o EventSourceOutput) Host() pulumi.StringOutput {
	return o.Apply(func(v EventSource) *string {
		return v.Host
	}).(pulumi.StringOutput)
}

