// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFilePersistentVolumeSource struct {
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`

	// the name of secret that contains Azure Storage Account Name and Key
	SecretName string `pulumi:"secretName"`

	// the namespace of the secret that contains Azure Storage Account Name and Key default is the same
	// as the Pod
	SecretNamespace *string `pulumi:"secretNamespace"`

	// Share Name
	ShareName string `pulumi:"shareName"`

}

var _AzureFilePersistentVolumeSourceType = reflect.TypeOf((*AzureFilePersistentVolumeSource)(nil)).Elem()

// AzureFilePersistentVolumeSourceInput represents an input type that resolves to a AzureFilePersistentVolumeSource.
type AzureFilePersistentVolumeSourceInput interface {
	ElementType() reflect.Type

	ToAzureFilePersistentVolumeSourceOutput() AzureFilePersistentVolumeSourceOutput
	ToAzureFilePersistentVolumeSourceOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourceOutput
}

// AzureFilePersistentVolumeSourceArgs is a AzureFilePersistentVolumeSourceInput whose fields are all Input types.
type AzureFilePersistentVolumeSourceArgs struct {
	// the name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringInput `pulumi:"secretName"`

	// Share Name
	ShareName pulumi.StringInput `pulumi:"shareName"`

	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

	// the namespace of the secret that contains Azure Storage Account Name and Key default is the same
	// as the Pod
	SecretNamespace pulumi.StringInput `pulumi:"secretNamespace"`

}

func (a AzureFilePersistentVolumeSourceArgs) ElementType() reflect.Type {
	return _AzureFilePersistentVolumeSourceType
}

func (a AzureFilePersistentVolumeSourceArgs) ToAzureFilePersistentVolumeSourceOutput() AzureFilePersistentVolumeSourceOutput {
	return pulumi.ToOutput(a).(AzureFilePersistentVolumeSourceOutput)
}

func (a AzureFilePersistentVolumeSourceArgs) ToAzureFilePersistentVolumeSourceOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AzureFilePersistentVolumeSourceOutput)
}

// AzureFilePersistentVolumeSourceOutput is an output type that resolves to a Input.
type AzureFilePersistentVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(AzureFilePersistentVolumeSourceOutput{}) }

func (AzureFilePersistentVolumeSourceOutput) ElementType() reflect.Type {
	return _AzureFilePersistentVolumeSourceType
}

func (o AzureFilePersistentVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v AzureFilePersistentVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o AzureFilePersistentVolumeSourceOutput) SecretName() pulumi.StringOutput {
	return o.Apply(func(v AzureFilePersistentVolumeSource) string {
		return v.SecretName
	}).(pulumi.StringOutput)
}

func (o AzureFilePersistentVolumeSourceOutput) SecretNamespace() pulumi.StringOutput {
	return o.Apply(func(v AzureFilePersistentVolumeSource) *string {
		return v.SecretNamespace
	}).(pulumi.StringOutput)
}

func (o AzureFilePersistentVolumeSourceOutput) ShareName() pulumi.StringOutput {
	return o.Apply(func(v AzureFilePersistentVolumeSource) string {
		return v.ShareName
	}).(pulumi.StringOutput)
}

