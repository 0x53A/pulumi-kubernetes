// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// PodStatus represents information about the status of a pod. Status may trail the actual state of
// a system, especially if the node that hosts the pod cannot contact the control plane.
type PodStatus struct {
	// Current service state of pod. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions []PodCondition `pulumi:"conditions"`

	// The list has one entry per container in the manifest. Each entry is currently the output of
	// `docker inspect`. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses []ContainerStatus `pulumi:"containerStatuses"`

	// Status for any ephemeral containers that have run in this pod. This field is alpha-level and is
	// only populated by servers that enable the EphemeralContainers feature.
	EphemeralContainerStatuses []ContainerStatus `pulumi:"ephemeralContainerStatuses"`

	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP *string `pulumi:"hostIP"`

	// The list has one entry per init container in the manifest. The most recent successful init
	// container will have ready = true, the most recently started container will have startTime set.
	// More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses []ContainerStatus `pulumi:"initContainerStatuses"`

	// A human readable message indicating details about why the pod is in this condition.
	Message *string `pulumi:"message"`

	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be
	// scheduled right away as preemption victims receive their graceful termination periods. This
	// field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to
	// place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to
	// give the resources on this node to a higher priority pod that is created after preemption. As a
	// result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName *string `pulumi:"nominatedNodeName"`

	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The
	// conditions array, the reason and message fields, and the individual container status arrays
	// contain more detail about the pod's status. There are five possible phase values:
	// 
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container
	// images has not been created. This includes time before being scheduled as well as time spent
	// downloading images over the network, which could take a while. Running: The pod has been bound
	// to a node, and all of the containers have been created. At least one container is still running,
	// or is in the process of starting or restarting. Succeeded: All containers in the pod have
	// terminated in success, and will not be restarted. Failed: All containers in the pod have
	// terminated, and at least one container has terminated in failure. The container either exited
	// with non-zero status or was terminated by the system. Unknown: For some reason the state of the
	// pod could not be obtained, typically due to an error in communicating with the host of the pod.
	// 
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase *string `pulumi:"phase"`

	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet
	// allocated.
	PodIP *string `pulumi:"podIP"`

	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry
	// must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6.
	// This list is empty if no IPs have been allocated yet.
	PodIPs []PodIP `pulumi:"podIPs"`

	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements
	// See PodQOSClass type for available QOS classes More info:
	// https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass *string `pulumi:"qosClass"`

	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason *string `pulumi:"reason"`

	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the
	// Kubelet pulled the container image(s) for the pod.
	StartTime *string `pulumi:"startTime"`

}

var _PodStatusType = reflect.TypeOf((*PodStatus)(nil)).Elem()

// PodStatusInput represents an input type that resolves to a PodStatus.
type PodStatusInput interface {
	ElementType() reflect.Type

	ToPodStatusOutput() PodStatusOutput
	ToPodStatusOutputWithContext(ctx context.Context) PodStatusOutput
}

// PodStatusArgs is a PodStatusInput whose fields are all Input types.
type PodStatusArgs struct {
	// Current service state of pod. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions PodConditionArrayInput `pulumi:"conditions"`

	// The list has one entry per container in the manifest. Each entry is currently the output of
	// `docker inspect`. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses ContainerStatusArrayInput `pulumi:"containerStatuses"`

	// Status for any ephemeral containers that have run in this pod. This field is alpha-level and is
	// only populated by servers that enable the EphemeralContainers feature.
	EphemeralContainerStatuses ContainerStatusArrayInput `pulumi:"ephemeralContainerStatuses"`

	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP pulumi.StringInput `pulumi:"hostIP"`

	// The list has one entry per init container in the manifest. The most recent successful init
	// container will have ready = true, the most recently started container will have startTime set.
	// More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses ContainerStatusArrayInput `pulumi:"initContainerStatuses"`

	// A human readable message indicating details about why the pod is in this condition.
	Message pulumi.StringInput `pulumi:"message"`

	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be
	// scheduled right away as preemption victims receive their graceful termination periods. This
	// field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to
	// place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to
	// give the resources on this node to a higher priority pod that is created after preemption. As a
	// result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName pulumi.StringInput `pulumi:"nominatedNodeName"`

	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The
	// conditions array, the reason and message fields, and the individual container status arrays
	// contain more detail about the pod's status. There are five possible phase values:
	// 
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container
	// images has not been created. This includes time before being scheduled as well as time spent
	// downloading images over the network, which could take a while. Running: The pod has been bound
	// to a node, and all of the containers have been created. At least one container is still running,
	// or is in the process of starting or restarting. Succeeded: All containers in the pod have
	// terminated in success, and will not be restarted. Failed: All containers in the pod have
	// terminated, and at least one container has terminated in failure. The container either exited
	// with non-zero status or was terminated by the system. Unknown: For some reason the state of the
	// pod could not be obtained, typically due to an error in communicating with the host of the pod.
	// 
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase pulumi.StringInput `pulumi:"phase"`

	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet
	// allocated.
	PodIP pulumi.StringInput `pulumi:"podIP"`

	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry
	// must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6.
	// This list is empty if no IPs have been allocated yet.
	PodIPs PodIPArrayInput `pulumi:"podIPs"`

	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements
	// See PodQOSClass type for available QOS classes More info:
	// https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass pulumi.StringInput `pulumi:"qosClass"`

	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason pulumi.StringInput `pulumi:"reason"`

	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the
	// Kubelet pulled the container image(s) for the pod.
	StartTime pulumi.StringInput `pulumi:"startTime"`

}

func (a PodStatusArgs) ElementType() reflect.Type {
	return _PodStatusType
}

func (a PodStatusArgs) ToPodStatusOutput() PodStatusOutput {
	return pulumi.ToOutput(a).(PodStatusOutput)
}

func (a PodStatusArgs) ToPodStatusOutputWithContext(ctx context.Context) PodStatusOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PodStatusOutput)
}

// PodStatusOutput is an output type that resolves to a Input.
type PodStatusOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PodStatusOutput{}) }

func (PodStatusOutput) ElementType() reflect.Type {
	return _PodStatusType
}

func (o PodStatusOutput) Conditions() PodConditionArrayOutput {
	return o.Apply(func(v PodStatus) []PodCondition {
		return v.Conditions
	}).(PodConditionArrayOutput)
}

func (o PodStatusOutput) ContainerStatuses() ContainerStatusArrayOutput {
	return o.Apply(func(v PodStatus) []ContainerStatus {
		return v.ContainerStatuses
	}).(ContainerStatusArrayOutput)
}

func (o PodStatusOutput) EphemeralContainerStatuses() ContainerStatusArrayOutput {
	return o.Apply(func(v PodStatus) []ContainerStatus {
		return v.EphemeralContainerStatuses
	}).(ContainerStatusArrayOutput)
}

func (o PodStatusOutput) HostIP() pulumi.StringOutput {
	return o.Apply(func(v PodStatus) *string {
		return v.HostIP
	}).(pulumi.StringOutput)
}

func (o PodStatusOutput) InitContainerStatuses() ContainerStatusArrayOutput {
	return o.Apply(func(v PodStatus) []ContainerStatus {
		return v.InitContainerStatuses
	}).(ContainerStatusArrayOutput)
}

func (o PodStatusOutput) Message() pulumi.StringOutput {
	return o.Apply(func(v PodStatus) *string {
		return v.Message
	}).(pulumi.StringOutput)
}

func (o PodStatusOutput) NominatedNodeName() pulumi.StringOutput {
	return o.Apply(func(v PodStatus) *string {
		return v.NominatedNodeName
	}).(pulumi.StringOutput)
}

func (o PodStatusOutput) Phase() pulumi.StringOutput {
	return o.Apply(func(v PodStatus) *string {
		return v.Phase
	}).(pulumi.StringOutput)
}

func (o PodStatusOutput) PodIP() pulumi.StringOutput {
	return o.Apply(func(v PodStatus) *string {
		return v.PodIP
	}).(pulumi.StringOutput)
}

func (o PodStatusOutput) PodIPs() PodIPArrayOutput {
	return o.Apply(func(v PodStatus) []PodIP {
		return v.PodIPs
	}).(PodIPArrayOutput)
}

func (o PodStatusOutput) QosClass() pulumi.StringOutput {
	return o.Apply(func(v PodStatus) *string {
		return v.QosClass
	}).(pulumi.StringOutput)
}

func (o PodStatusOutput) Reason() pulumi.StringOutput {
	return o.Apply(func(v PodStatus) *string {
		return v.Reason
	}).(pulumi.StringOutput)
}

func (o PodStatusOutput) StartTime() pulumi.StringOutput {
	return o.Apply(func(v PodStatus) *string {
		return v.StartTime
	}).(pulumi.StringOutput)
}

