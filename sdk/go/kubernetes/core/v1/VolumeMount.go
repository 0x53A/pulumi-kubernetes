// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMount struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `pulumi:"mountPath"`

	// mountPropagation determines how mounts are propagated from the host to container and the other
	// way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`

	// This must match the Name of a Volume.
	Name string `pulumi:"name"`

	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`

	// Path within the volume from which the container's volume should be mounted. Defaults to ""
	// (volume's root).
	SubPath *string `pulumi:"subPath"`

	// Expanded path within the volume from which the container's volume should be mounted. Behaves
	// similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the
	// container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually
	// exclusive. This field is beta in 1.15.
	SubPathExpr *string `pulumi:"subPathExpr"`

}

var _VolumeMountType = reflect.TypeOf((*VolumeMount)(nil)).Elem()

// VolumeMountInput represents an input type that resolves to a VolumeMount.
type VolumeMountInput interface {
	ElementType() reflect.Type

	ToVolumeMountOutput() VolumeMountOutput
	ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput
}

// VolumeMountArgs is a VolumeMountInput whose fields are all Input types.
type VolumeMountArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`

	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`

	// mountPropagation determines how mounts are propagated from the host to container and the other
	// way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringInput `pulumi:"mountPropagation"`

	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

	// Path within the volume from which the container's volume should be mounted. Defaults to ""
	// (volume's root).
	SubPath pulumi.StringInput `pulumi:"subPath"`

	// Expanded path within the volume from which the container's volume should be mounted. Behaves
	// similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the
	// container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually
	// exclusive. This field is beta in 1.15.
	SubPathExpr pulumi.StringInput `pulumi:"subPathExpr"`

}

func (a VolumeMountArgs) ElementType() reflect.Type {
	return _VolumeMountType
}

func (a VolumeMountArgs) ToVolumeMountOutput() VolumeMountOutput {
	return pulumi.ToOutput(a).(VolumeMountOutput)
}

func (a VolumeMountArgs) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeMountOutput)
}

// VolumeMountOutput is an output type that resolves to a Input.
type VolumeMountOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeMountOutput{}) }

func (VolumeMountOutput) ElementType() reflect.Type {
	return _VolumeMountType
}

func (o VolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.Apply(func(v VolumeMount) string {
		return v.MountPath
	}).(pulumi.StringOutput)
}

func (o VolumeMountOutput) MountPropagation() pulumi.StringOutput {
	return o.Apply(func(v VolumeMount) *string {
		return v.MountPropagation
	}).(pulumi.StringOutput)
}

func (o VolumeMountOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v VolumeMount) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o VolumeMountOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v VolumeMount) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

func (o VolumeMountOutput) SubPath() pulumi.StringOutput {
	return o.Apply(func(v VolumeMount) *string {
		return v.SubPath
	}).(pulumi.StringOutput)
}

func (o VolumeMountOutput) SubPathExpr() pulumi.StringOutput {
	return o.Apply(func(v VolumeMount) *string {
		return v.SubPathExpr
	}).(pulumi.StringOutput)
}

var _VolumeMountArrayType = reflect.TypeOf((*[]VolumeMount)(nil)).Elem()

type VolumeMountArrayInput interface {
	ElementType() reflect.Type

	ToVolumeMountArrayOutput() VolumeMountArrayOutput
	ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput
}

type VolumeMountArray []VolumeMountInput

func (a VolumeMountArray) ElementType() reflect.Type {
	return _VolumeMountArrayType
}

func (a VolumeMountArray) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return pulumi.ToOutput(a).(VolumeMountArrayOutput)
}

func (a VolumeMountArray) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeMountArrayOutput)
}

type VolumeMountArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeMountArrayOutput{}) }

func (VolumeMountArrayOutput) ElementType() reflect.Type {
	return _VolumeMountArrayType
}

func (o VolumeMountArrayOutput) Index(i pulumi.IntInput) VolumeMountOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) VolumeMount {
		return vs[0].([]VolumeMount)[vs[1].(int)]
	}).(VolumeMountOutput)
}
