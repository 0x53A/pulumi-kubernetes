// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Adapts a secret into a projected volume.
// 
// The contents of the target Secret's Data field will be presented in a projected volume as files
// using the keys in the Data field as the file names. Note that this is identical to a secret
// volume source without the default mode.
type SecretProjection struct {
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected
	// into the volume as a file whose name is the key and content is the value. If specified, the
	// listed keys will be projected into the specified paths, and unlisted keys will not be present.
	// If a key is specified which is not present in the Secret, the volume setup will error unless it
	// is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPath `pulumi:"items"`

	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`

	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`

}

var _SecretProjectionType = reflect.TypeOf((*SecretProjection)(nil)).Elem()

// SecretProjectionInput represents an input type that resolves to a SecretProjection.
type SecretProjectionInput interface {
	ElementType() reflect.Type

	ToSecretProjectionOutput() SecretProjectionOutput
	ToSecretProjectionOutputWithContext(ctx context.Context) SecretProjectionOutput
}

// SecretProjectionArgs is a SecretProjectionInput whose fields are all Input types.
type SecretProjectionArgs struct {
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected
	// into the volume as a file whose name is the key and content is the value. If specified, the
	// listed keys will be projected into the specified paths, and unlisted keys will not be present.
	// If a key is specified which is not present in the Secret, the volume setup will error unless it
	// is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathArrayInput `pulumi:"items"`

	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`

	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolInput `pulumi:"optional"`

}

func (a SecretProjectionArgs) ElementType() reflect.Type {
	return _SecretProjectionType
}

func (a SecretProjectionArgs) ToSecretProjectionOutput() SecretProjectionOutput {
	return pulumi.ToOutput(a).(SecretProjectionOutput)
}

func (a SecretProjectionArgs) ToSecretProjectionOutputWithContext(ctx context.Context) SecretProjectionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SecretProjectionOutput)
}

// SecretProjectionOutput is an output type that resolves to a Input.
type SecretProjectionOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(SecretProjectionOutput{}) }

func (SecretProjectionOutput) ElementType() reflect.Type {
	return _SecretProjectionType
}

func (o SecretProjectionOutput) Items() KeyToPathArrayOutput {
	return o.Apply(func(v SecretProjection) []KeyToPath {
		return v.Items
	}).(KeyToPathArrayOutput)
}

func (o SecretProjectionOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v SecretProjection) *string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o SecretProjectionOutput) Optional() pulumi.BoolOutput {
	return o.Apply(func(v SecretProjection) *bool {
		return v.Optional
	}).(pulumi.BoolOutput)
}

