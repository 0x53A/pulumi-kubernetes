// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ReplicationControllerCondition describes the state of a replication controller at a certain
// point.
type ReplicationControllerCondition struct {
	// The last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`

	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`

	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`

	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`

	// Type of replication controller condition.
	Type string `pulumi:"type"`

}

var _ReplicationControllerConditionType = reflect.TypeOf((*ReplicationControllerCondition)(nil)).Elem()

// ReplicationControllerConditionInput represents an input type that resolves to a ReplicationControllerCondition.
type ReplicationControllerConditionInput interface {
	ElementType() reflect.Type

	ToReplicationControllerConditionOutput() ReplicationControllerConditionOutput
	ToReplicationControllerConditionOutputWithContext(ctx context.Context) ReplicationControllerConditionOutput
}

// ReplicationControllerConditionArgs is a ReplicationControllerConditionInput whose fields are all Input types.
type ReplicationControllerConditionArgs struct {
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`

	// Type of replication controller condition.
	Type pulumi.StringInput `pulumi:"type"`

	// The last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`

	// A human readable message indicating details about the transition.
	Message pulumi.StringInput `pulumi:"message"`

	// The reason for the condition's last transition.
	Reason pulumi.StringInput `pulumi:"reason"`

}

func (a ReplicationControllerConditionArgs) ElementType() reflect.Type {
	return _ReplicationControllerConditionType
}

func (a ReplicationControllerConditionArgs) ToReplicationControllerConditionOutput() ReplicationControllerConditionOutput {
	return pulumi.ToOutput(a).(ReplicationControllerConditionOutput)
}

func (a ReplicationControllerConditionArgs) ToReplicationControllerConditionOutputWithContext(ctx context.Context) ReplicationControllerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ReplicationControllerConditionOutput)
}

// ReplicationControllerConditionOutput is an output type that resolves to a Input.
type ReplicationControllerConditionOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ReplicationControllerConditionOutput{}) }

func (ReplicationControllerConditionOutput) ElementType() reflect.Type {
	return _ReplicationControllerConditionType
}

func (o ReplicationControllerConditionOutput) LastTransitionTime() pulumi.StringOutput {
	return o.Apply(func(v ReplicationControllerCondition) *string {
		return v.LastTransitionTime
	}).(pulumi.StringOutput)
}

func (o ReplicationControllerConditionOutput) Message() pulumi.StringOutput {
	return o.Apply(func(v ReplicationControllerCondition) *string {
		return v.Message
	}).(pulumi.StringOutput)
}

func (o ReplicationControllerConditionOutput) Reason() pulumi.StringOutput {
	return o.Apply(func(v ReplicationControllerCondition) *string {
		return v.Reason
	}).(pulumi.StringOutput)
}

func (o ReplicationControllerConditionOutput) Status() pulumi.StringOutput {
	return o.Apply(func(v ReplicationControllerCondition) string {
		return v.Status
	}).(pulumi.StringOutput)
}

func (o ReplicationControllerConditionOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v ReplicationControllerCondition) string {
		return v.Type
	}).(pulumi.StringOutput)
}

var _ReplicationControllerConditionArrayType = reflect.TypeOf((*[]ReplicationControllerCondition)(nil)).Elem()

type ReplicationControllerConditionArrayInput interface {
	ElementType() reflect.Type

	ToReplicationControllerConditionArrayOutput() ReplicationControllerConditionArrayOutput
	ToReplicationControllerConditionArrayOutputWithContext(ctx context.Context) ReplicationControllerConditionArrayOutput
}

type ReplicationControllerConditionArray []ReplicationControllerConditionInput

func (a ReplicationControllerConditionArray) ElementType() reflect.Type {
	return _ReplicationControllerConditionArrayType
}

func (a ReplicationControllerConditionArray) ToReplicationControllerConditionArrayOutput() ReplicationControllerConditionArrayOutput {
	return pulumi.ToOutput(a).(ReplicationControllerConditionArrayOutput)
}

func (a ReplicationControllerConditionArray) ToReplicationControllerConditionArrayOutputWithContext(ctx context.Context) ReplicationControllerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ReplicationControllerConditionArrayOutput)
}

type ReplicationControllerConditionArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ReplicationControllerConditionArrayOutput{}) }

func (ReplicationControllerConditionArrayOutput) ElementType() reflect.Type {
	return _ReplicationControllerConditionArrayType
}

func (o ReplicationControllerConditionArrayOutput) Index(i pulumi.IntInput) ReplicationControllerConditionOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ReplicationControllerCondition {
		return vs[0].([]ReplicationControllerCondition)[vs[1].(int)]
	}).(ReplicationControllerConditionOutput)
}
