// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Defines a set of pods (namely those matching the labelSelector relative to the given
// namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity)
// with, where co-located is defined as running on a node whose value of the label with key
// <topologyKey> matches that of any node on which a pod of the set of pods is running
type PodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *metaV1.LabelSelector `pulumi:"labelSelector"`

	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or
	// empty list means "this pod's namespace"
	Namespaces []string `pulumi:"namespaces"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods
	// matching the labelSelector in the specified namespaces, where co-located is defined as running
	// on a node whose value of the label with key topologyKey matches that of any node on which any of
	// the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`

}

var _PodAffinityTermType = reflect.TypeOf((*PodAffinityTerm)(nil)).Elem()

// PodAffinityTermInput represents an input type that resolves to a PodAffinityTerm.
type PodAffinityTermInput interface {
	ElementType() reflect.Type

	ToPodAffinityTermOutput() PodAffinityTermOutput
	ToPodAffinityTermOutputWithContext(ctx context.Context) PodAffinityTermOutput
}

// PodAffinityTermArgs is a PodAffinityTermInput whose fields are all Input types.
type PodAffinityTermArgs struct {
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods
	// matching the labelSelector in the specified namespaces, where co-located is defined as running
	// on a node whose value of the label with key topologyKey matches that of any node on which any of
	// the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`

	// A label query over a set of resources, in this case pods.
	LabelSelector metaV1.LabelSelectorInput `pulumi:"labelSelector"`

	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or
	// empty list means "this pod's namespace"
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`

}

func (a PodAffinityTermArgs) ElementType() reflect.Type {
	return _PodAffinityTermType
}

func (a PodAffinityTermArgs) ToPodAffinityTermOutput() PodAffinityTermOutput {
	return pulumi.ToOutput(a).(PodAffinityTermOutput)
}

func (a PodAffinityTermArgs) ToPodAffinityTermOutputWithContext(ctx context.Context) PodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PodAffinityTermOutput)
}

// PodAffinityTermOutput is an output type that resolves to a Input.
type PodAffinityTermOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PodAffinityTermOutput{}) }

func (PodAffinityTermOutput) ElementType() reflect.Type {
	return _PodAffinityTermType
}

func (o PodAffinityTermOutput) LabelSelector() metaV1.LabelSelectorOutput {
	return o.Apply(func(v PodAffinityTerm) *metaV1.LabelSelector {
		return v.LabelSelector
	}).(metaV1.LabelSelectorOutput)
}

func (o PodAffinityTermOutput) Namespaces() pulumi.StringArrayOutput {
	return o.Apply(func(v PodAffinityTerm) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

func (o PodAffinityTermOutput) TopologyKey() pulumi.StringOutput {
	return o.Apply(func(v PodAffinityTerm) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

var _PodAffinityTermArrayType = reflect.TypeOf((*[]PodAffinityTerm)(nil)).Elem()

type PodAffinityTermArrayInput interface {
	ElementType() reflect.Type

	ToPodAffinityTermArrayOutput() PodAffinityTermArrayOutput
	ToPodAffinityTermArrayOutputWithContext(ctx context.Context) PodAffinityTermArrayOutput
}

type PodAffinityTermArray []PodAffinityTermInput

func (a PodAffinityTermArray) ElementType() reflect.Type {
	return _PodAffinityTermArrayType
}

func (a PodAffinityTermArray) ToPodAffinityTermArrayOutput() PodAffinityTermArrayOutput {
	return pulumi.ToOutput(a).(PodAffinityTermArrayOutput)
}

func (a PodAffinityTermArray) ToPodAffinityTermArrayOutputWithContext(ctx context.Context) PodAffinityTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(PodAffinityTermArrayOutput)
}

type PodAffinityTermArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(PodAffinityTermArrayOutput{}) }

func (PodAffinityTermArrayOutput) ElementType() reflect.Type {
	return _PodAffinityTermArrayType
}

func (o PodAffinityTermArrayOutput) Index(i pulumi.IntInput) PodAffinityTermOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) PodAffinityTerm {
		return vs[0].([]PodAffinityTerm)[vs[1].(int)]
	}).(PodAffinityTermOutput)
}
