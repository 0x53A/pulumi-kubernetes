// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type LimitRange struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Spec defines the limits enforced. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LimitRangeSpecOutput `pulumi:"spec"`

}

// LimitRangeArgs is the set of arguments needed to create a LimitRange resource.
type LimitRangeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the limits enforced. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LimitRangeSpecInput `pulumi:"spec"`

}

// NewLimitRange creates a LimitRange resource with the given unique name, arguments, and options.
func NewLimitRange(ctx *pulumi.Context, name string, args *LimitRangeArgs, opts ...pulumi.ResourceOption) (*LimitRange, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("v1")
		args.Kind = pulumi.String("LimitRange")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToLimitRangeSpecOutput()
		}
	}
	var resource LimitRange
	err := ctx.RegisterResource("kubernetes:core/v1:LimitRange", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLimitRange gets an existing LimitRange resource's state with the given name and ID.
func GetLimitRange(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*LimitRange, error) {
	var resource LimitRange
	err := ctx.ReadResource("kubernetes:core/v1:LimitRange", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type LimitRangeProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Spec defines the limits enforced. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LimitRangeSpec `pulumi:"spec"`

}

var _LimitRangePropertyType = reflect.TypeOf((*LimitRangeProperty)(nil)).Elem()

// LimitRangePropertyInput represents an input type that resolves to a LimitRangeProperty.
type LimitRangePropertyInput interface {
	ElementType() reflect.Type

	ToLimitRangePropertyOutput() LimitRangePropertyOutput
	ToLimitRangePropertyOutputWithContext(ctx context.Context) LimitRangePropertyOutput
}

// LimitRangePropertyArgs is a LimitRangePropertyInput whose fields are all Input types.
type LimitRangePropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the limits enforced. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LimitRangeSpecInput `pulumi:"spec"`

}

func (a LimitRangePropertyArgs) ElementType() reflect.Type {
	return _LimitRangePropertyType
}

func (a LimitRangePropertyArgs) ToLimitRangePropertyOutput() LimitRangePropertyOutput {
	return pulumi.ToOutput(a).(LimitRangePropertyOutput)
}

func (a LimitRangePropertyArgs) ToLimitRangePropertyOutputWithContext(ctx context.Context) LimitRangePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LimitRangePropertyOutput)
}

// LimitRangePropertyOutput is an output type that resolves to a Input.
type LimitRangePropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LimitRangePropertyOutput{}) }

func (LimitRangePropertyOutput) ElementType() reflect.Type {
	return _LimitRangePropertyType
}

func (o LimitRangePropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v LimitRangeProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o LimitRangePropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v LimitRangeProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o LimitRangePropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v LimitRangeProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o LimitRangePropertyOutput) Spec() LimitRangeSpecOutput {
	return o.Apply(func(v LimitRangeProperty) *LimitRangeSpec {
		return v.Spec
	}).(LimitRangeSpecOutput)
}

var _LimitRangePropertyArrayType = reflect.TypeOf((*[]LimitRangeProperty)(nil)).Elem()

type LimitRangePropertyArrayInput interface {
	ElementType() reflect.Type

	ToLimitRangePropertyArrayOutput() LimitRangePropertyArrayOutput
	ToLimitRangePropertyArrayOutputWithContext(ctx context.Context) LimitRangePropertyArrayOutput
}

type LimitRangePropertyArray []LimitRangePropertyInput

func (a LimitRangePropertyArray) ElementType() reflect.Type {
	return _LimitRangePropertyArrayType
}

func (a LimitRangePropertyArray) ToLimitRangePropertyArrayOutput() LimitRangePropertyArrayOutput {
	return pulumi.ToOutput(a).(LimitRangePropertyArrayOutput)
}

func (a LimitRangePropertyArray) ToLimitRangePropertyArrayOutputWithContext(ctx context.Context) LimitRangePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LimitRangePropertyArrayOutput)
}

type LimitRangePropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LimitRangePropertyArrayOutput{}) }

func (LimitRangePropertyArrayOutput) ElementType() reflect.Type {
	return _LimitRangePropertyArrayType
}

func (o LimitRangePropertyArrayOutput) Index(i pulumi.IntInput) LimitRangePropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) LimitRangeProperty {
		return vs[0].([]LimitRangeProperty)[vs[1].(int)]
	}).(LimitRangePropertyOutput)
}
