// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents a Persistent Disk resource in Google Compute Engine.
// 
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project
// and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times.
// GCE PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSource struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to
	// be "ext4" if unspecified. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `pulumi:"fsType"`

	// The partition in the volume that you want to mount. If omitted, the default is to mount by
	// volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the
	// volume partition for /dev/sda is "0" (or you can leave the property empty). More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `pulumi:"partition"`

	// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName string `pulumi:"pdName"`

	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `pulumi:"readOnly"`

}

var _GCEPersistentDiskVolumeSourceType = reflect.TypeOf((*GCEPersistentDiskVolumeSource)(nil)).Elem()

// GCEPersistentDiskVolumeSourceInput represents an input type that resolves to a GCEPersistentDiskVolumeSource.
type GCEPersistentDiskVolumeSourceInput interface {
	ElementType() reflect.Type

	ToGCEPersistentDiskVolumeSourceOutput() GCEPersistentDiskVolumeSourceOutput
	ToGCEPersistentDiskVolumeSourceOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourceOutput
}

// GCEPersistentDiskVolumeSourceArgs is a GCEPersistentDiskVolumeSourceInput whose fields are all Input types.
type GCEPersistentDiskVolumeSourceArgs struct {
	// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName pulumi.StringInput `pulumi:"pdName"`

	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to
	// be "ext4" if unspecified. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType pulumi.StringInput `pulumi:"fsType"`

	// The partition in the volume that you want to mount. If omitted, the default is to mount by
	// volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the
	// volume partition for /dev/sda is "0" (or you can leave the property empty). More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition pulumi.IntInput `pulumi:"partition"`

	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

}

func (a GCEPersistentDiskVolumeSourceArgs) ElementType() reflect.Type {
	return _GCEPersistentDiskVolumeSourceType
}

func (a GCEPersistentDiskVolumeSourceArgs) ToGCEPersistentDiskVolumeSourceOutput() GCEPersistentDiskVolumeSourceOutput {
	return pulumi.ToOutput(a).(GCEPersistentDiskVolumeSourceOutput)
}

func (a GCEPersistentDiskVolumeSourceArgs) ToGCEPersistentDiskVolumeSourceOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(GCEPersistentDiskVolumeSourceOutput)
}

// GCEPersistentDiskVolumeSourceOutput is an output type that resolves to a Input.
type GCEPersistentDiskVolumeSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(GCEPersistentDiskVolumeSourceOutput{}) }

func (GCEPersistentDiskVolumeSourceOutput) ElementType() reflect.Type {
	return _GCEPersistentDiskVolumeSourceType
}

func (o GCEPersistentDiskVolumeSourceOutput) FsType() pulumi.StringOutput {
	return o.Apply(func(v GCEPersistentDiskVolumeSource) *string {
		return v.FsType
	}).(pulumi.StringOutput)
}

func (o GCEPersistentDiskVolumeSourceOutput) Partition() pulumi.IntOutput {
	return o.Apply(func(v GCEPersistentDiskVolumeSource) *int {
		return v.Partition
	}).(pulumi.IntOutput)
}

func (o GCEPersistentDiskVolumeSourceOutput) PdName() pulumi.StringOutput {
	return o.Apply(func(v GCEPersistentDiskVolumeSource) string {
		return v.PdName
	}).(pulumi.StringOutput)
}

func (o GCEPersistentDiskVolumeSourceOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v GCEPersistentDiskVolumeSource) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

