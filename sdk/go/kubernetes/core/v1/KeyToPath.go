// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Maps a string key to a path within a volume.
type KeyToPath struct {
	// The key to project.
	Key string `pulumi:"key"`

	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified,
	// the volume defaultMode will be used. This might be in conflict with other options that affect
	// the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`

	// The relative path of the file to map the key to. May not be an absolute path. May not contain
	// the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`

}

var _KeyToPathType = reflect.TypeOf((*KeyToPath)(nil)).Elem()

// KeyToPathInput represents an input type that resolves to a KeyToPath.
type KeyToPathInput interface {
	ElementType() reflect.Type

	ToKeyToPathOutput() KeyToPathOutput
	ToKeyToPathOutputWithContext(ctx context.Context) KeyToPathOutput
}

// KeyToPathArgs is a KeyToPathInput whose fields are all Input types.
type KeyToPathArgs struct {
	// The key to project.
	Key pulumi.StringInput `pulumi:"key"`

	// The relative path of the file to map the key to. May not be an absolute path. May not contain
	// the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`

	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified,
	// the volume defaultMode will be used. This might be in conflict with other options that affect
	// the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntInput `pulumi:"mode"`

}

func (a KeyToPathArgs) ElementType() reflect.Type {
	return _KeyToPathType
}

func (a KeyToPathArgs) ToKeyToPathOutput() KeyToPathOutput {
	return pulumi.ToOutput(a).(KeyToPathOutput)
}

func (a KeyToPathArgs) ToKeyToPathOutputWithContext(ctx context.Context) KeyToPathOutput {
	return pulumi.ToOutputWithContext(ctx, a).(KeyToPathOutput)
}

// KeyToPathOutput is an output type that resolves to a Input.
type KeyToPathOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(KeyToPathOutput{}) }

func (KeyToPathOutput) ElementType() reflect.Type {
	return _KeyToPathType
}

func (o KeyToPathOutput) Key() pulumi.StringOutput {
	return o.Apply(func(v KeyToPath) string {
		return v.Key
	}).(pulumi.StringOutput)
}

func (o KeyToPathOutput) Mode() pulumi.IntOutput {
	return o.Apply(func(v KeyToPath) *int {
		return v.Mode
	}).(pulumi.IntOutput)
}

func (o KeyToPathOutput) Path() pulumi.StringOutput {
	return o.Apply(func(v KeyToPath) string {
		return v.Path
	}).(pulumi.StringOutput)
}

var _KeyToPathArrayType = reflect.TypeOf((*[]KeyToPath)(nil)).Elem()

type KeyToPathArrayInput interface {
	ElementType() reflect.Type

	ToKeyToPathArrayOutput() KeyToPathArrayOutput
	ToKeyToPathArrayOutputWithContext(ctx context.Context) KeyToPathArrayOutput
}

type KeyToPathArray []KeyToPathInput

func (a KeyToPathArray) ElementType() reflect.Type {
	return _KeyToPathArrayType
}

func (a KeyToPathArray) ToKeyToPathArrayOutput() KeyToPathArrayOutput {
	return pulumi.ToOutput(a).(KeyToPathArrayOutput)
}

func (a KeyToPathArray) ToKeyToPathArrayOutputWithContext(ctx context.Context) KeyToPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(KeyToPathArrayOutput)
}

type KeyToPathArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(KeyToPathArrayOutput{}) }

func (KeyToPathArrayOutput) ElementType() reflect.Type {
	return _KeyToPathArrayType
}

func (o KeyToPathArrayOutput) Index(i pulumi.IntInput) KeyToPathOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) KeyToPath {
		return vs[0].([]KeyToPath)[vs[1].(int)]
	}).(KeyToPathOutput)
}
