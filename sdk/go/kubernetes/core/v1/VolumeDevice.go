// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// volumeDevice describes a mapping of a raw block device within a container.
type VolumeDevice struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `pulumi:"devicePath"`

	// name must match the name of a persistentVolumeClaim in the pod
	Name string `pulumi:"name"`

}

var _VolumeDeviceType = reflect.TypeOf((*VolumeDevice)(nil)).Elem()

// VolumeDeviceInput represents an input type that resolves to a VolumeDevice.
type VolumeDeviceInput interface {
	ElementType() reflect.Type

	ToVolumeDeviceOutput() VolumeDeviceOutput
	ToVolumeDeviceOutputWithContext(ctx context.Context) VolumeDeviceOutput
}

// VolumeDeviceArgs is a VolumeDeviceInput whose fields are all Input types.
type VolumeDeviceArgs struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath pulumi.StringInput `pulumi:"devicePath"`

	// name must match the name of a persistentVolumeClaim in the pod
	Name pulumi.StringInput `pulumi:"name"`

}

func (a VolumeDeviceArgs) ElementType() reflect.Type {
	return _VolumeDeviceType
}

func (a VolumeDeviceArgs) ToVolumeDeviceOutput() VolumeDeviceOutput {
	return pulumi.ToOutput(a).(VolumeDeviceOutput)
}

func (a VolumeDeviceArgs) ToVolumeDeviceOutputWithContext(ctx context.Context) VolumeDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeDeviceOutput)
}

// VolumeDeviceOutput is an output type that resolves to a Input.
type VolumeDeviceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeDeviceOutput{}) }

func (VolumeDeviceOutput) ElementType() reflect.Type {
	return _VolumeDeviceType
}

func (o VolumeDeviceOutput) DevicePath() pulumi.StringOutput {
	return o.Apply(func(v VolumeDevice) string {
		return v.DevicePath
	}).(pulumi.StringOutput)
}

func (o VolumeDeviceOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v VolumeDevice) string {
		return v.Name
	}).(pulumi.StringOutput)
}

var _VolumeDeviceArrayType = reflect.TypeOf((*[]VolumeDevice)(nil)).Elem()

type VolumeDeviceArrayInput interface {
	ElementType() reflect.Type

	ToVolumeDeviceArrayOutput() VolumeDeviceArrayOutput
	ToVolumeDeviceArrayOutputWithContext(ctx context.Context) VolumeDeviceArrayOutput
}

type VolumeDeviceArray []VolumeDeviceInput

func (a VolumeDeviceArray) ElementType() reflect.Type {
	return _VolumeDeviceArrayType
}

func (a VolumeDeviceArray) ToVolumeDeviceArrayOutput() VolumeDeviceArrayOutput {
	return pulumi.ToOutput(a).(VolumeDeviceArrayOutput)
}

func (a VolumeDeviceArray) ToVolumeDeviceArrayOutputWithContext(ctx context.Context) VolumeDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeDeviceArrayOutput)
}

type VolumeDeviceArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeDeviceArrayOutput{}) }

func (VolumeDeviceArrayOutput) ElementType() reflect.Type {
	return _VolumeDeviceArrayType
}

func (o VolumeDeviceArrayOutput) Index(i pulumi.IntInput) VolumeDeviceOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) VolumeDevice {
		return vs[0].([]VolumeDevice)[vs[1].(int)]
	}).(VolumeDeviceOutput)
}
