// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	coreV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/core/v1"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be
// dynamically provisioned.
// 
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in
// ObjectMeta.Name.
type StorageClass struct {
	pulumi.CustomResourceState

	// AllowVolumeExpansion shows whether the storage class allow volume expand
	AllowVolumeExpansion pulumi.BoolOutput `pulumi:"allowVolumeExpansion"`

	// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin
	// defines its own supported topology specifications. An empty TopologySelectorTerm list means
	// there is no topology restriction. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	AllowedTopologies coreV1.TopologySelectorTermArrayOutput `pulumi:"allowedTopologies"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Dynamically provisioned PersistentVolumes of this storage class are created with these
	// mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is
	// invalid.
	MountOptions pulumi.StringArrayOutput `pulumi:"mountOptions"`

	// Parameters holds the parameters for the provisioner that should create volumes of this storage
	// class.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`

	// Provisioner indicates the type of the provisioner.
	Provisioner pulumi.StringOutput `pulumi:"provisioner"`

	// Dynamically provisioned PersistentVolumes of this storage class are created with this
	// reclaimPolicy. Defaults to Delete.
	ReclaimPolicy pulumi.StringOutput `pulumi:"reclaimPolicy"`

	// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When
	// unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	VolumeBindingMode pulumi.StringOutput `pulumi:"volumeBindingMode"`

}

// StorageClassArgs is the set of arguments needed to create a StorageClass resource.
type StorageClassArgs struct {
	// Provisioner indicates the type of the provisioner.
	Provisioner pulumi.StringInput `pulumi:"provisioner"`

	// AllowVolumeExpansion shows whether the storage class allow volume expand
	AllowVolumeExpansion pulumi.BoolInput `pulumi:"allowVolumeExpansion"`

	// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin
	// defines its own supported topology specifications. An empty TopologySelectorTerm list means
	// there is no topology restriction. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	AllowedTopologies coreV1.TopologySelectorTermArrayInput `pulumi:"allowedTopologies"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Dynamically provisioned PersistentVolumes of this storage class are created with these
	// mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is
	// invalid.
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`

	// Parameters holds the parameters for the provisioner that should create volumes of this storage
	// class.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`

	// Dynamically provisioned PersistentVolumes of this storage class are created with this
	// reclaimPolicy. Defaults to Delete.
	ReclaimPolicy pulumi.StringInput `pulumi:"reclaimPolicy"`

	// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When
	// unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	VolumeBindingMode pulumi.StringInput `pulumi:"volumeBindingMode"`

}

// NewStorageClass creates a StorageClass resource with the given unique name, arguments, and options.
func NewStorageClass(ctx *pulumi.Context, name string, args *StorageClassArgs, opts ...pulumi.ResourceOption) (*StorageClass, error) {
	inputs := map[string]pulumi.Input{}
	if args == nil || args.Provisioner == nil {
		return nil, errors.New("missing required argument 'Provisioner'")
	}
	if args != nil {
		args.ApiVersion = pulumi.String("storage.k8s.io/v1")
		args.Kind = pulumi.String("StorageClass")
		inputs["provisioner"] = args.Provisioner.ToStringOutput()
		if i := args.AllowVolumeExpansion; i != nil {
			inputs["allowVolumeExpansion"] = i.ToBoolOutput()
		}
		if i := args.AllowedTopologies; i != nil {
			inputs["allowedTopologies"] = i.ToTopologySelectorTermArrayOutput()
		}
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.MountOptions; i != nil {
			inputs["mountOptions"] = i.ToStringArrayOutput()
		}
		if i := args.Parameters; i != nil {
			inputs["parameters"] = i.ToStringMapOutput()
		}
		if i := args.ReclaimPolicy; i != nil {
			inputs["reclaimPolicy"] = i.ToStringOutput()
		}
		if i := args.VolumeBindingMode; i != nil {
			inputs["volumeBindingMode"] = i.ToStringOutput()
		}
	}
	var resource StorageClass
	err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1:StorageClass", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageClass gets an existing StorageClass resource's state with the given name and ID.
func GetStorageClass(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*StorageClass, error) {
	var resource StorageClass
	err := ctx.ReadResource("kubernetes:storage.k8s.io/v1:StorageClass", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be
// dynamically provisioned.
// 
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in
// ObjectMeta.Name.
type StorageClassProperty struct {
	// AllowVolumeExpansion shows whether the storage class allow volume expand
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`

	// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin
	// defines its own supported topology specifications. An empty TopologySelectorTerm list means
	// there is no topology restriction. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	AllowedTopologies []coreV1.TopologySelectorTerm `pulumi:"allowedTopologies"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Dynamically provisioned PersistentVolumes of this storage class are created with these
	// mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is
	// invalid.
	MountOptions []string `pulumi:"mountOptions"`

	// Parameters holds the parameters for the provisioner that should create volumes of this storage
	// class.
	Parameters map[string]string `pulumi:"parameters"`

	// Provisioner indicates the type of the provisioner.
	Provisioner string `pulumi:"provisioner"`

	// Dynamically provisioned PersistentVolumes of this storage class are created with this
	// reclaimPolicy. Defaults to Delete.
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`

	// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When
	// unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	VolumeBindingMode *string `pulumi:"volumeBindingMode"`

}

var _StorageClassPropertyType = reflect.TypeOf((*StorageClassProperty)(nil)).Elem()

// StorageClassPropertyInput represents an input type that resolves to a StorageClassProperty.
type StorageClassPropertyInput interface {
	ElementType() reflect.Type

	ToStorageClassPropertyOutput() StorageClassPropertyOutput
	ToStorageClassPropertyOutputWithContext(ctx context.Context) StorageClassPropertyOutput
}

// StorageClassPropertyArgs is a StorageClassPropertyInput whose fields are all Input types.
type StorageClassPropertyArgs struct {
	// Provisioner indicates the type of the provisioner.
	Provisioner pulumi.StringInput `pulumi:"provisioner"`

	// AllowVolumeExpansion shows whether the storage class allow volume expand
	AllowVolumeExpansion pulumi.BoolInput `pulumi:"allowVolumeExpansion"`

	// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin
	// defines its own supported topology specifications. An empty TopologySelectorTerm list means
	// there is no topology restriction. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	AllowedTopologies coreV1.TopologySelectorTermArrayInput `pulumi:"allowedTopologies"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Dynamically provisioned PersistentVolumes of this storage class are created with these
	// mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is
	// invalid.
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`

	// Parameters holds the parameters for the provisioner that should create volumes of this storage
	// class.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`

	// Dynamically provisioned PersistentVolumes of this storage class are created with this
	// reclaimPolicy. Defaults to Delete.
	ReclaimPolicy pulumi.StringInput `pulumi:"reclaimPolicy"`

	// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When
	// unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	VolumeBindingMode pulumi.StringInput `pulumi:"volumeBindingMode"`

}

func (a StorageClassPropertyArgs) ElementType() reflect.Type {
	return _StorageClassPropertyType
}

func (a StorageClassPropertyArgs) ToStorageClassPropertyOutput() StorageClassPropertyOutput {
	return pulumi.ToOutput(a).(StorageClassPropertyOutput)
}

func (a StorageClassPropertyArgs) ToStorageClassPropertyOutputWithContext(ctx context.Context) StorageClassPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(StorageClassPropertyOutput)
}

// StorageClassPropertyOutput is an output type that resolves to a Input.
type StorageClassPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(StorageClassPropertyOutput{}) }

func (StorageClassPropertyOutput) ElementType() reflect.Type {
	return _StorageClassPropertyType
}

func (o StorageClassPropertyOutput) AllowVolumeExpansion() pulumi.BoolOutput {
	return o.Apply(func(v StorageClassProperty) *bool {
		return v.AllowVolumeExpansion
	}).(pulumi.BoolOutput)
}

func (o StorageClassPropertyOutput) AllowedTopologies() coreV1.TopologySelectorTermArrayOutput {
	return o.Apply(func(v StorageClassProperty) []coreV1.TopologySelectorTerm {
		return v.AllowedTopologies
	}).(coreV1.TopologySelectorTermArrayOutput)
}

func (o StorageClassPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v StorageClassProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o StorageClassPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v StorageClassProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o StorageClassPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v StorageClassProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o StorageClassPropertyOutput) MountOptions() pulumi.StringArrayOutput {
	return o.Apply(func(v StorageClassProperty) []string {
		return v.MountOptions
	}).(pulumi.StringArrayOutput)
}

func (o StorageClassPropertyOutput) Parameters() pulumi.StringMapOutput {
	return o.Apply(func(v StorageClassProperty) map[string]string {
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

func (o StorageClassPropertyOutput) Provisioner() pulumi.StringOutput {
	return o.Apply(func(v StorageClassProperty) string {
		return v.Provisioner
	}).(pulumi.StringOutput)
}

func (o StorageClassPropertyOutput) ReclaimPolicy() pulumi.StringOutput {
	return o.Apply(func(v StorageClassProperty) *string {
		return v.ReclaimPolicy
	}).(pulumi.StringOutput)
}

func (o StorageClassPropertyOutput) VolumeBindingMode() pulumi.StringOutput {
	return o.Apply(func(v StorageClassProperty) *string {
		return v.VolumeBindingMode
	}).(pulumi.StringOutput)
}

var _StorageClassPropertyArrayType = reflect.TypeOf((*[]StorageClassProperty)(nil)).Elem()

type StorageClassPropertyArrayInput interface {
	ElementType() reflect.Type

	ToStorageClassPropertyArrayOutput() StorageClassPropertyArrayOutput
	ToStorageClassPropertyArrayOutputWithContext(ctx context.Context) StorageClassPropertyArrayOutput
}

type StorageClassPropertyArray []StorageClassPropertyInput

func (a StorageClassPropertyArray) ElementType() reflect.Type {
	return _StorageClassPropertyArrayType
}

func (a StorageClassPropertyArray) ToStorageClassPropertyArrayOutput() StorageClassPropertyArrayOutput {
	return pulumi.ToOutput(a).(StorageClassPropertyArrayOutput)
}

func (a StorageClassPropertyArray) ToStorageClassPropertyArrayOutputWithContext(ctx context.Context) StorageClassPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(StorageClassPropertyArrayOutput)
}

type StorageClassPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(StorageClassPropertyArrayOutput{}) }

func (StorageClassPropertyArrayOutput) ElementType() reflect.Type {
	return _StorageClassPropertyArrayType
}

func (o StorageClassPropertyArrayOutput) Index(i pulumi.IntInput) StorageClassPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) StorageClassProperty {
		return vs[0].([]StorageClassProperty)[vs[1].(int)]
	}).(StorageClassPropertyOutput)
}
