// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// VolumeError captures an error encountered during a volume operation.
type VolumeError struct {
	// String detailing the error encountered during Attach or Detach operation. This string maybe
	// logged, so it should not contain sensitive information.
	Message *string `pulumi:"message"`

	// Time the error was encountered.
	Time *string `pulumi:"time"`

}

var _VolumeErrorType = reflect.TypeOf((*VolumeError)(nil)).Elem()

// VolumeErrorInput represents an input type that resolves to a VolumeError.
type VolumeErrorInput interface {
	ElementType() reflect.Type

	ToVolumeErrorOutput() VolumeErrorOutput
	ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput
}

// VolumeErrorArgs is a VolumeErrorInput whose fields are all Input types.
type VolumeErrorArgs struct {
	// String detailing the error encountered during Attach or Detach operation. This string maybe
	// logged, so it should not contain sensitive information.
	Message pulumi.StringInput `pulumi:"message"`

	// Time the error was encountered.
	Time pulumi.StringInput `pulumi:"time"`

}

func (a VolumeErrorArgs) ElementType() reflect.Type {
	return _VolumeErrorType
}

func (a VolumeErrorArgs) ToVolumeErrorOutput() VolumeErrorOutput {
	return pulumi.ToOutput(a).(VolumeErrorOutput)
}

func (a VolumeErrorArgs) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeErrorOutput)
}

// VolumeErrorOutput is an output type that resolves to a Input.
type VolumeErrorOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeErrorOutput{}) }

func (VolumeErrorOutput) ElementType() reflect.Type {
	return _VolumeErrorType
}

func (o VolumeErrorOutput) Message() pulumi.StringOutput {
	return o.Apply(func(v VolumeError) *string {
		return v.Message
	}).(pulumi.StringOutput)
}

func (o VolumeErrorOutput) Time() pulumi.StringOutput {
	return o.Apply(func(v VolumeError) *string {
		return v.Time
	}).(pulumi.StringOutput)
}

