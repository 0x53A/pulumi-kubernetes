// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed
// on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may
// use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it
// automatically creates a CSIDriver object representing the driver. Kubernetes attach detach
// controller uses this object to determine whether attach is required. Kubelet uses this object to
// determine whether pod information needs to be passed on mount. CSIDriver objects are
// non-namespaced.
type CSIDriver struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object
	// refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver.
	// The driver name must be 63 characters or less, beginning and ending with an alphanumeric
	// character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Specification of the CSI Driver.
	Spec CSIDriverSpecOutput `pulumi:"spec"`

}

// CSIDriverArgs is the set of arguments needed to create a CSIDriver resource.
type CSIDriverArgs struct {
	// Specification of the CSI Driver.
	Spec CSIDriverSpecInput `pulumi:"spec"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object
	// refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver.
	// The driver name must be 63 characters or less, beginning and ending with an alphanumeric
	// character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

}

// NewCSIDriver creates a CSIDriver resource with the given unique name, arguments, and options.
func NewCSIDriver(ctx *pulumi.Context, name string, args *CSIDriverArgs, opts ...pulumi.ResourceOption) (*CSIDriver, error) {
	inputs := map[string]pulumi.Input{}
	if args == nil || args.Spec == nil {
		return nil, errors.New("missing required argument 'Spec'")
	}
	if args != nil {
		args.ApiVersion = pulumi.String("storage.k8s.io/v1beta1")
		args.Kind = pulumi.String("CSIDriver")
		inputs["spec"] = args.Spec.ToCSIDriverSpecOutput()
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
	}
	var resource CSIDriver
	err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1beta1:CSIDriver", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCSIDriver gets an existing CSIDriver resource's state with the given name and ID.
func GetCSIDriver(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*CSIDriver, error) {
	var resource CSIDriver
	err := ctx.ReadResource("kubernetes:storage.k8s.io/v1beta1:CSIDriver", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed
// on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may
// use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it
// automatically creates a CSIDriver object representing the driver. Kubernetes attach detach
// controller uses this object to determine whether attach is required. Kubelet uses this object to
// determine whether pod information needs to be passed on mount. CSIDriver objects are
// non-namespaced.
type CSIDriverProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object
	// refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver.
	// The driver name must be 63 characters or less, beginning and ending with an alphanumeric
	// character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Specification of the CSI Driver.
	Spec CSIDriverSpec `pulumi:"spec"`

}

var _CSIDriverPropertyType = reflect.TypeOf((*CSIDriverProperty)(nil)).Elem()

// CSIDriverPropertyInput represents an input type that resolves to a CSIDriverProperty.
type CSIDriverPropertyInput interface {
	ElementType() reflect.Type

	ToCSIDriverPropertyOutput() CSIDriverPropertyOutput
	ToCSIDriverPropertyOutputWithContext(ctx context.Context) CSIDriverPropertyOutput
}

// CSIDriverPropertyArgs is a CSIDriverPropertyInput whose fields are all Input types.
type CSIDriverPropertyArgs struct {
	// Specification of the CSI Driver.
	Spec CSIDriverSpecInput `pulumi:"spec"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object
	// refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver.
	// The driver name must be 63 characters or less, beginning and ending with an alphanumeric
	// character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

}

func (a CSIDriverPropertyArgs) ElementType() reflect.Type {
	return _CSIDriverPropertyType
}

func (a CSIDriverPropertyArgs) ToCSIDriverPropertyOutput() CSIDriverPropertyOutput {
	return pulumi.ToOutput(a).(CSIDriverPropertyOutput)
}

func (a CSIDriverPropertyArgs) ToCSIDriverPropertyOutputWithContext(ctx context.Context) CSIDriverPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CSIDriverPropertyOutput)
}

// CSIDriverPropertyOutput is an output type that resolves to a Input.
type CSIDriverPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CSIDriverPropertyOutput{}) }

func (CSIDriverPropertyOutput) ElementType() reflect.Type {
	return _CSIDriverPropertyType
}

func (o CSIDriverPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v CSIDriverProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o CSIDriverPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v CSIDriverProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o CSIDriverPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v CSIDriverProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o CSIDriverPropertyOutput) Spec() CSIDriverSpecOutput {
	return o.Apply(func(v CSIDriverProperty) CSIDriverSpec {
		return v.Spec
	}).(CSIDriverSpecOutput)
}

var _CSIDriverPropertyArrayType = reflect.TypeOf((*[]CSIDriverProperty)(nil)).Elem()

type CSIDriverPropertyArrayInput interface {
	ElementType() reflect.Type

	ToCSIDriverPropertyArrayOutput() CSIDriverPropertyArrayOutput
	ToCSIDriverPropertyArrayOutputWithContext(ctx context.Context) CSIDriverPropertyArrayOutput
}

type CSIDriverPropertyArray []CSIDriverPropertyInput

func (a CSIDriverPropertyArray) ElementType() reflect.Type {
	return _CSIDriverPropertyArrayType
}

func (a CSIDriverPropertyArray) ToCSIDriverPropertyArrayOutput() CSIDriverPropertyArrayOutput {
	return pulumi.ToOutput(a).(CSIDriverPropertyArrayOutput)
}

func (a CSIDriverPropertyArray) ToCSIDriverPropertyArrayOutputWithContext(ctx context.Context) CSIDriverPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CSIDriverPropertyArrayOutput)
}

type CSIDriverPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CSIDriverPropertyArrayOutput{}) }

func (CSIDriverPropertyArrayOutput) ElementType() reflect.Type {
	return _CSIDriverPropertyArrayType
}

func (o CSIDriverPropertyArrayOutput) Index(i pulumi.IntInput) CSIDriverPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) CSIDriverProperty {
		return vs[0].([]CSIDriverProperty)[vs[1].(int)]
	}).(CSIDriverPropertyOutput)
}
