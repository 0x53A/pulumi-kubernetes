// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResources struct {
	// Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume
	// that is both attached and mounted on a node is considered to be used once, not twice. The same
	// rule applies for a unique volume that is shared among multiple pods on the same node. If this
	// field is nil, then the supported number of volumes on this node is unbounded.
	Count *int `pulumi:"count"`

}

var _VolumeNodeResourcesType = reflect.TypeOf((*VolumeNodeResources)(nil)).Elem()

// VolumeNodeResourcesInput represents an input type that resolves to a VolumeNodeResources.
type VolumeNodeResourcesInput interface {
	ElementType() reflect.Type

	ToVolumeNodeResourcesOutput() VolumeNodeResourcesOutput
	ToVolumeNodeResourcesOutputWithContext(ctx context.Context) VolumeNodeResourcesOutput
}

// VolumeNodeResourcesArgs is a VolumeNodeResourcesInput whose fields are all Input types.
type VolumeNodeResourcesArgs struct {
	// Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume
	// that is both attached and mounted on a node is considered to be used once, not twice. The same
	// rule applies for a unique volume that is shared among multiple pods on the same node. If this
	// field is nil, then the supported number of volumes on this node is unbounded.
	Count pulumi.IntInput `pulumi:"count"`

}

func (a VolumeNodeResourcesArgs) ElementType() reflect.Type {
	return _VolumeNodeResourcesType
}

func (a VolumeNodeResourcesArgs) ToVolumeNodeResourcesOutput() VolumeNodeResourcesOutput {
	return pulumi.ToOutput(a).(VolumeNodeResourcesOutput)
}

func (a VolumeNodeResourcesArgs) ToVolumeNodeResourcesOutputWithContext(ctx context.Context) VolumeNodeResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VolumeNodeResourcesOutput)
}

// VolumeNodeResourcesOutput is an output type that resolves to a Input.
type VolumeNodeResourcesOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(VolumeNodeResourcesOutput{}) }

func (VolumeNodeResourcesOutput) ElementType() reflect.Type {
	return _VolumeNodeResourcesType
}

func (o VolumeNodeResourcesOutput) Count() pulumi.IntOutput {
	return o.Apply(func(v VolumeNodeResources) *int {
		return v.Count
	}).(pulumi.IntOutput)
}

