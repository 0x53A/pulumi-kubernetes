// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to
// create the CSINode object directly. As long as they use the node-driver-registrar sidecar
// container, the kubelet will automatically populate the CSINode object for the CSI driver as part
// of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it
// means either there are no CSI Drivers available on the node, or the Kubelet version is low enough
// that it doesn't create this object. CSINode has an OwnerReference that points to the
// corresponding node object.
type CSINode struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// metadata.name must be the Kubernetes node name.
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// spec is the specification of CSINode
	Spec CSINodeSpecOutput `pulumi:"spec"`

}

// CSINodeArgs is the set of arguments needed to create a CSINode resource.
type CSINodeArgs struct {
	// spec is the specification of CSINode
	Spec CSINodeSpecInput `pulumi:"spec"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// metadata.name must be the Kubernetes node name.
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

}

// NewCSINode creates a CSINode resource with the given unique name, arguments, and options.
func NewCSINode(ctx *pulumi.Context, name string, args *CSINodeArgs, opts ...pulumi.ResourceOption) (*CSINode, error) {
	inputs := map[string]pulumi.Input{}
	if args == nil || args.Spec == nil {
		return nil, errors.New("missing required argument 'Spec'")
	}
	if args != nil {
		args.ApiVersion = pulumi.String("storage.k8s.io/v1beta1")
		args.Kind = pulumi.String("CSINode")
		inputs["spec"] = args.Spec.ToCSINodeSpecOutput()
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
	}
	var resource CSINode
	err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1beta1:CSINode", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCSINode gets an existing CSINode resource's state with the given name and ID.
func GetCSINode(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*CSINode, error) {
	var resource CSINode
	err := ctx.ReadResource("kubernetes:storage.k8s.io/v1beta1:CSINode", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to
// create the CSINode object directly. As long as they use the node-driver-registrar sidecar
// container, the kubelet will automatically populate the CSINode object for the CSI driver as part
// of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it
// means either there are no CSI Drivers available on the node, or the Kubelet version is low enough
// that it doesn't create this object. CSINode has an OwnerReference that points to the
// corresponding node object.
type CSINodeProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// metadata.name must be the Kubernetes node name.
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// spec is the specification of CSINode
	Spec CSINodeSpec `pulumi:"spec"`

}

var _CSINodePropertyType = reflect.TypeOf((*CSINodeProperty)(nil)).Elem()

// CSINodePropertyInput represents an input type that resolves to a CSINodeProperty.
type CSINodePropertyInput interface {
	ElementType() reflect.Type

	ToCSINodePropertyOutput() CSINodePropertyOutput
	ToCSINodePropertyOutputWithContext(ctx context.Context) CSINodePropertyOutput
}

// CSINodePropertyArgs is a CSINodePropertyInput whose fields are all Input types.
type CSINodePropertyArgs struct {
	// spec is the specification of CSINode
	Spec CSINodeSpecInput `pulumi:"spec"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// metadata.name must be the Kubernetes node name.
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

}

func (a CSINodePropertyArgs) ElementType() reflect.Type {
	return _CSINodePropertyType
}

func (a CSINodePropertyArgs) ToCSINodePropertyOutput() CSINodePropertyOutput {
	return pulumi.ToOutput(a).(CSINodePropertyOutput)
}

func (a CSINodePropertyArgs) ToCSINodePropertyOutputWithContext(ctx context.Context) CSINodePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CSINodePropertyOutput)
}

// CSINodePropertyOutput is an output type that resolves to a Input.
type CSINodePropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CSINodePropertyOutput{}) }

func (CSINodePropertyOutput) ElementType() reflect.Type {
	return _CSINodePropertyType
}

func (o CSINodePropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v CSINodeProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o CSINodePropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v CSINodeProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o CSINodePropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v CSINodeProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o CSINodePropertyOutput) Spec() CSINodeSpecOutput {
	return o.Apply(func(v CSINodeProperty) CSINodeSpec {
		return v.Spec
	}).(CSINodeSpecOutput)
}

var _CSINodePropertyArrayType = reflect.TypeOf((*[]CSINodeProperty)(nil)).Elem()

type CSINodePropertyArrayInput interface {
	ElementType() reflect.Type

	ToCSINodePropertyArrayOutput() CSINodePropertyArrayOutput
	ToCSINodePropertyArrayOutputWithContext(ctx context.Context) CSINodePropertyArrayOutput
}

type CSINodePropertyArray []CSINodePropertyInput

func (a CSINodePropertyArray) ElementType() reflect.Type {
	return _CSINodePropertyArrayType
}

func (a CSINodePropertyArray) ToCSINodePropertyArrayOutput() CSINodePropertyArrayOutput {
	return pulumi.ToOutput(a).(CSINodePropertyArrayOutput)
}

func (a CSINodePropertyArray) ToCSINodePropertyArrayOutputWithContext(ctx context.Context) CSINodePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CSINodePropertyArrayOutput)
}

type CSINodePropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CSINodePropertyArrayOutput{}) }

func (CSINodePropertyArrayOutput) ElementType() reflect.Type {
	return _CSINodePropertyArrayType
}

func (o CSINodePropertyArrayOutput) Index(i pulumi.IntInput) CSINodePropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) CSINodeProperty {
		return vs[0].([]CSINodeProperty)[vs[1].(int)]
	}).(CSINodePropertyOutput)
}
