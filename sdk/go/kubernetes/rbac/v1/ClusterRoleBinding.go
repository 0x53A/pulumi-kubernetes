// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole
// in the global namespace, and adds who information via Subject.
type ClusterRoleBinding struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata.
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be
	// resolved, the Authorizer must return an error.
	RoleRef RoleRefOutput `pulumi:"roleRef"`

	// Subjects holds references to the objects the role applies to.
	Subjects SubjectArrayOutput `pulumi:"subjects"`

}

// ClusterRoleBindingArgs is the set of arguments needed to create a ClusterRoleBinding resource.
type ClusterRoleBindingArgs struct {
	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be
	// resolved, the Authorizer must return an error.
	RoleRef RoleRefInput `pulumi:"roleRef"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata.
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Subjects holds references to the objects the role applies to.
	Subjects SubjectArrayInput `pulumi:"subjects"`

}

// NewClusterRoleBinding creates a ClusterRoleBinding resource with the given unique name, arguments, and options.
func NewClusterRoleBinding(ctx *pulumi.Context, name string, args *ClusterRoleBindingArgs, opts ...pulumi.ResourceOption) (*ClusterRoleBinding, error) {
	inputs := map[string]pulumi.Input{}
	if args == nil || args.RoleRef == nil {
		return nil, errors.New("missing required argument 'RoleRef'")
	}
	if args != nil {
		args.ApiVersion = pulumi.String("rbac.authorization.k8s.io/v1")
		args.Kind = pulumi.String("ClusterRoleBinding")
		inputs["roleRef"] = args.RoleRef.ToRoleRefOutput()
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Subjects; i != nil {
			inputs["subjects"] = i.ToSubjectArrayOutput()
		}
	}
	var resource ClusterRoleBinding
	err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterRoleBinding gets an existing ClusterRoleBinding resource's state with the given name and ID.
func GetClusterRoleBinding(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*ClusterRoleBinding, error) {
	var resource ClusterRoleBinding
	err := ctx.ReadResource("kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole
// in the global namespace, and adds who information via Subject.
type ClusterRoleBindingProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata.
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be
	// resolved, the Authorizer must return an error.
	RoleRef RoleRef `pulumi:"roleRef"`

	// Subjects holds references to the objects the role applies to.
	Subjects []Subject `pulumi:"subjects"`

}

var _ClusterRoleBindingPropertyType = reflect.TypeOf((*ClusterRoleBindingProperty)(nil)).Elem()

// ClusterRoleBindingPropertyInput represents an input type that resolves to a ClusterRoleBindingProperty.
type ClusterRoleBindingPropertyInput interface {
	ElementType() reflect.Type

	ToClusterRoleBindingPropertyOutput() ClusterRoleBindingPropertyOutput
	ToClusterRoleBindingPropertyOutputWithContext(ctx context.Context) ClusterRoleBindingPropertyOutput
}

// ClusterRoleBindingPropertyArgs is a ClusterRoleBindingPropertyInput whose fields are all Input types.
type ClusterRoleBindingPropertyArgs struct {
	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be
	// resolved, the Authorizer must return an error.
	RoleRef RoleRefInput `pulumi:"roleRef"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata.
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Subjects holds references to the objects the role applies to.
	Subjects SubjectArrayInput `pulumi:"subjects"`

}

func (a ClusterRoleBindingPropertyArgs) ElementType() reflect.Type {
	return _ClusterRoleBindingPropertyType
}

func (a ClusterRoleBindingPropertyArgs) ToClusterRoleBindingPropertyOutput() ClusterRoleBindingPropertyOutput {
	return pulumi.ToOutput(a).(ClusterRoleBindingPropertyOutput)
}

func (a ClusterRoleBindingPropertyArgs) ToClusterRoleBindingPropertyOutputWithContext(ctx context.Context) ClusterRoleBindingPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ClusterRoleBindingPropertyOutput)
}

// ClusterRoleBindingPropertyOutput is an output type that resolves to a Input.
type ClusterRoleBindingPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ClusterRoleBindingPropertyOutput{}) }

func (ClusterRoleBindingPropertyOutput) ElementType() reflect.Type {
	return _ClusterRoleBindingPropertyType
}

func (o ClusterRoleBindingPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v ClusterRoleBindingProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o ClusterRoleBindingPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v ClusterRoleBindingProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o ClusterRoleBindingPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v ClusterRoleBindingProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o ClusterRoleBindingPropertyOutput) RoleRef() RoleRefOutput {
	return o.Apply(func(v ClusterRoleBindingProperty) RoleRef {
		return v.RoleRef
	}).(RoleRefOutput)
}

func (o ClusterRoleBindingPropertyOutput) Subjects() SubjectArrayOutput {
	return o.Apply(func(v ClusterRoleBindingProperty) []Subject {
		return v.Subjects
	}).(SubjectArrayOutput)
}

var _ClusterRoleBindingPropertyArrayType = reflect.TypeOf((*[]ClusterRoleBindingProperty)(nil)).Elem()

type ClusterRoleBindingPropertyArrayInput interface {
	ElementType() reflect.Type

	ToClusterRoleBindingPropertyArrayOutput() ClusterRoleBindingPropertyArrayOutput
	ToClusterRoleBindingPropertyArrayOutputWithContext(ctx context.Context) ClusterRoleBindingPropertyArrayOutput
}

type ClusterRoleBindingPropertyArray []ClusterRoleBindingPropertyInput

func (a ClusterRoleBindingPropertyArray) ElementType() reflect.Type {
	return _ClusterRoleBindingPropertyArrayType
}

func (a ClusterRoleBindingPropertyArray) ToClusterRoleBindingPropertyArrayOutput() ClusterRoleBindingPropertyArrayOutput {
	return pulumi.ToOutput(a).(ClusterRoleBindingPropertyArrayOutput)
}

func (a ClusterRoleBindingPropertyArray) ToClusterRoleBindingPropertyArrayOutputWithContext(ctx context.Context) ClusterRoleBindingPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ClusterRoleBindingPropertyArrayOutput)
}

type ClusterRoleBindingPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ClusterRoleBindingPropertyArrayOutput{}) }

func (ClusterRoleBindingPropertyArrayOutput) ElementType() reflect.Type {
	return _ClusterRoleBindingPropertyArrayType
}

func (o ClusterRoleBindingPropertyArrayOutput) Index(i pulumi.IntInput) ClusterRoleBindingPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ClusterRoleBindingProperty {
		return vs[0].([]ClusterRoleBindingProperty)[vs[1].(int)]
	}).(ClusterRoleBindingPropertyOutput)
}
