// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a
// RoleBinding.
type Role struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata.
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Rules holds all the PolicyRules for this Role
	Rules PolicyRuleArrayOutput `pulumi:"rules"`

}

// RoleArgs is the set of arguments needed to create a Role resource.
type RoleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata.
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Rules holds all the PolicyRules for this Role
	Rules PolicyRuleArrayInput `pulumi:"rules"`

}

// NewRole creates a Role resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context, name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("rbac.authorization.k8s.io/v1")
		args.Kind = pulumi.String("Role")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Rules; i != nil {
			inputs["rules"] = i.ToPolicyRuleArrayOutput()
		}
	}
	var resource Role
	err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1:Role", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name and ID.
func GetRole(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("kubernetes:rbac.authorization.k8s.io/v1:Role", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a
// RoleBinding.
type RoleProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata.
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Rules holds all the PolicyRules for this Role
	Rules []PolicyRule `pulumi:"rules"`

}

var _RolePropertyType = reflect.TypeOf((*RoleProperty)(nil)).Elem()

// RolePropertyInput represents an input type that resolves to a RoleProperty.
type RolePropertyInput interface {
	ElementType() reflect.Type

	ToRolePropertyOutput() RolePropertyOutput
	ToRolePropertyOutputWithContext(ctx context.Context) RolePropertyOutput
}

// RolePropertyArgs is a RolePropertyInput whose fields are all Input types.
type RolePropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata.
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Rules holds all the PolicyRules for this Role
	Rules PolicyRuleArrayInput `pulumi:"rules"`

}

func (a RolePropertyArgs) ElementType() reflect.Type {
	return _RolePropertyType
}

func (a RolePropertyArgs) ToRolePropertyOutput() RolePropertyOutput {
	return pulumi.ToOutput(a).(RolePropertyOutput)
}

func (a RolePropertyArgs) ToRolePropertyOutputWithContext(ctx context.Context) RolePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RolePropertyOutput)
}

// RolePropertyOutput is an output type that resolves to a Input.
type RolePropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(RolePropertyOutput{}) }

func (RolePropertyOutput) ElementType() reflect.Type {
	return _RolePropertyType
}

func (o RolePropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v RoleProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o RolePropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v RoleProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o RolePropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v RoleProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o RolePropertyOutput) Rules() PolicyRuleArrayOutput {
	return o.Apply(func(v RoleProperty) []PolicyRule {
		return v.Rules
	}).(PolicyRuleArrayOutput)
}

var _RolePropertyArrayType = reflect.TypeOf((*[]RoleProperty)(nil)).Elem()

type RolePropertyArrayInput interface {
	ElementType() reflect.Type

	ToRolePropertyArrayOutput() RolePropertyArrayOutput
	ToRolePropertyArrayOutputWithContext(ctx context.Context) RolePropertyArrayOutput
}

type RolePropertyArray []RolePropertyInput

func (a RolePropertyArray) ElementType() reflect.Type {
	return _RolePropertyArrayType
}

func (a RolePropertyArray) ToRolePropertyArrayOutput() RolePropertyArrayOutput {
	return pulumi.ToOutput(a).(RolePropertyArrayOutput)
}

func (a RolePropertyArray) ToRolePropertyArrayOutputWithContext(ctx context.Context) RolePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RolePropertyArrayOutput)
}

type RolePropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(RolePropertyArrayOutput{}) }

func (RolePropertyArrayOutput) ElementType() reflect.Type {
	return _RolePropertyArrayType
}

func (o RolePropertyArrayOutput) Index(i pulumi.IntInput) RolePropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) RoleProperty {
		return vs[0].([]RoleProperty)[vs[1].(int)]
	}).(RolePropertyOutput)
}
