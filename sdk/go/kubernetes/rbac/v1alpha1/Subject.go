// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Subject contains a reference to the object or user identities a role binding applies to.  This
// can either hold a direct API object reference, or a value for non-objects such as user and group
// names.
type Subject struct {
	// APIVersion holds the API group and version of the referenced subject. Defaults to "v1" for
	// ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io/v1alpha1" for User and Group
	// subjects.
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind of object being referenced. Values defined by this API group are "User", "Group", and
	// "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should
	// report an error.
	Kind string `pulumi:"kind"`

	// Name of the object being referenced.
	Name string `pulumi:"name"`

	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or
	// "Group", and this value is not empty the Authorizer should report an error.
	Namespace *string `pulumi:"namespace"`

}

var _SubjectType = reflect.TypeOf((*Subject)(nil)).Elem()

// SubjectInput represents an input type that resolves to a Subject.
type SubjectInput interface {
	ElementType() reflect.Type

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(ctx context.Context) SubjectOutput
}

// SubjectArgs is a SubjectInput whose fields are all Input types.
type SubjectArgs struct {
	// Kind of object being referenced. Values defined by this API group are "User", "Group", and
	// "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should
	// report an error.
	Kind pulumi.StringInput `pulumi:"kind"`

	// Name of the object being referenced.
	Name pulumi.StringInput `pulumi:"name"`

	// APIVersion holds the API group and version of the referenced subject. Defaults to "v1" for
	// ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io/v1alpha1" for User and Group
	// subjects.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or
	// "Group", and this value is not empty the Authorizer should report an error.
	Namespace pulumi.StringInput `pulumi:"namespace"`

}

func (a SubjectArgs) ElementType() reflect.Type {
	return _SubjectType
}

func (a SubjectArgs) ToSubjectOutput() SubjectOutput {
	return pulumi.ToOutput(a).(SubjectOutput)
}

func (a SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SubjectOutput)
}

// SubjectOutput is an output type that resolves to a Input.
type SubjectOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(SubjectOutput{}) }

func (SubjectOutput) ElementType() reflect.Type {
	return _SubjectType
}

func (o SubjectOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v Subject) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o SubjectOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v Subject) string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o SubjectOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v Subject) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o SubjectOutput) Namespace() pulumi.StringOutput {
	return o.Apply(func(v Subject) *string {
		return v.Namespace
	}).(pulumi.StringOutput)
}

var _SubjectArrayType = reflect.TypeOf((*[]Subject)(nil)).Elem()

type SubjectArrayInput interface {
	ElementType() reflect.Type

	ToSubjectArrayOutput() SubjectArrayOutput
	ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput
}

type SubjectArray []SubjectInput

func (a SubjectArray) ElementType() reflect.Type {
	return _SubjectArrayType
}

func (a SubjectArray) ToSubjectArrayOutput() SubjectArrayOutput {
	return pulumi.ToOutput(a).(SubjectArrayOutput)
}

func (a SubjectArray) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SubjectArrayOutput)
}

type SubjectArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(SubjectArrayOutput{}) }

func (SubjectArrayOutput) ElementType() reflect.Type {
	return _SubjectArrayType
}

func (o SubjectArrayOutput) Index(i pulumi.IntInput) SubjectOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) Subject {
		return vs[0].([]Subject)[vs[1].(int)]
	}).(SubjectOutput)
}
