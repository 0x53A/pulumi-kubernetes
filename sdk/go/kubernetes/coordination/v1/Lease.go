// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Lease defines a lease concept.
type Lease struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Specification of the Lease. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseSpecOutput `pulumi:"spec"`

}

// LeaseArgs is the set of arguments needed to create a Lease resource.
type LeaseArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Specification of the Lease. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseSpecInput `pulumi:"spec"`

}

// NewLease creates a Lease resource with the given unique name, arguments, and options.
func NewLease(ctx *pulumi.Context, name string, args *LeaseArgs, opts ...pulumi.ResourceOption) (*Lease, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("coordination.k8s.io/v1")
		args.Kind = pulumi.String("Lease")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToLeaseSpecOutput()
		}
	}
	var resource Lease
	err := ctx.RegisterResource("kubernetes:coordination.k8s.io/v1:Lease", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLease gets an existing Lease resource's state with the given name and ID.
func GetLease(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Lease, error) {
	var resource Lease
	err := ctx.ReadResource("kubernetes:coordination.k8s.io/v1:Lease", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Lease defines a lease concept.
type LeaseProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Specification of the Lease. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseSpec `pulumi:"spec"`

}

var _LeasePropertyType = reflect.TypeOf((*LeaseProperty)(nil)).Elem()

// LeasePropertyInput represents an input type that resolves to a LeaseProperty.
type LeasePropertyInput interface {
	ElementType() reflect.Type

	ToLeasePropertyOutput() LeasePropertyOutput
	ToLeasePropertyOutputWithContext(ctx context.Context) LeasePropertyOutput
}

// LeasePropertyArgs is a LeasePropertyInput whose fields are all Input types.
type LeasePropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Specification of the Lease. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseSpecInput `pulumi:"spec"`

}

func (a LeasePropertyArgs) ElementType() reflect.Type {
	return _LeasePropertyType
}

func (a LeasePropertyArgs) ToLeasePropertyOutput() LeasePropertyOutput {
	return pulumi.ToOutput(a).(LeasePropertyOutput)
}

func (a LeasePropertyArgs) ToLeasePropertyOutputWithContext(ctx context.Context) LeasePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LeasePropertyOutput)
}

// LeasePropertyOutput is an output type that resolves to a Input.
type LeasePropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LeasePropertyOutput{}) }

func (LeasePropertyOutput) ElementType() reflect.Type {
	return _LeasePropertyType
}

func (o LeasePropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v LeaseProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o LeasePropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v LeaseProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o LeasePropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v LeaseProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o LeasePropertyOutput) Spec() LeaseSpecOutput {
	return o.Apply(func(v LeaseProperty) *LeaseSpec {
		return v.Spec
	}).(LeaseSpecOutput)
}

var _LeasePropertyArrayType = reflect.TypeOf((*[]LeaseProperty)(nil)).Elem()

type LeasePropertyArrayInput interface {
	ElementType() reflect.Type

	ToLeasePropertyArrayOutput() LeasePropertyArrayOutput
	ToLeasePropertyArrayOutputWithContext(ctx context.Context) LeasePropertyArrayOutput
}

type LeasePropertyArray []LeasePropertyInput

func (a LeasePropertyArray) ElementType() reflect.Type {
	return _LeasePropertyArrayType
}

func (a LeasePropertyArray) ToLeasePropertyArrayOutput() LeasePropertyArrayOutput {
	return pulumi.ToOutput(a).(LeasePropertyArrayOutput)
}

func (a LeasePropertyArray) ToLeasePropertyArrayOutputWithContext(ctx context.Context) LeasePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LeasePropertyArrayOutput)
}

type LeasePropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LeasePropertyArrayOutput{}) }

func (LeasePropertyArrayOutput) ElementType() reflect.Type {
	return _LeasePropertyArrayType
}

func (o LeasePropertyArrayOutput) Index(i pulumi.IntInput) LeasePropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) LeaseProperty {
		return vs[0].([]LeaseProperty)[vs[1].(int)]
	}).(LeasePropertyOutput)
}
