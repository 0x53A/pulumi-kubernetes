// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// LeaseSpec is a specification of a Lease.
type LeaseSpec struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime *string `pulumi:"acquireTime"`

	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity *string `pulumi:"holderIdentity"`

	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it.
	// This is measure against time of last observed RenewTime.
	LeaseDurationSeconds *int `pulumi:"leaseDurationSeconds"`

	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions *int `pulumi:"leaseTransitions"`

	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime *string `pulumi:"renewTime"`

}

var _LeaseSpecType = reflect.TypeOf((*LeaseSpec)(nil)).Elem()

// LeaseSpecInput represents an input type that resolves to a LeaseSpec.
type LeaseSpecInput interface {
	ElementType() reflect.Type

	ToLeaseSpecOutput() LeaseSpecOutput
	ToLeaseSpecOutputWithContext(ctx context.Context) LeaseSpecOutput
}

// LeaseSpecArgs is a LeaseSpecInput whose fields are all Input types.
type LeaseSpecArgs struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime pulumi.StringInput `pulumi:"acquireTime"`

	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity pulumi.StringInput `pulumi:"holderIdentity"`

	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it.
	// This is measure against time of last observed RenewTime.
	LeaseDurationSeconds pulumi.IntInput `pulumi:"leaseDurationSeconds"`

	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions pulumi.IntInput `pulumi:"leaseTransitions"`

	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime pulumi.StringInput `pulumi:"renewTime"`

}

func (a LeaseSpecArgs) ElementType() reflect.Type {
	return _LeaseSpecType
}

func (a LeaseSpecArgs) ToLeaseSpecOutput() LeaseSpecOutput {
	return pulumi.ToOutput(a).(LeaseSpecOutput)
}

func (a LeaseSpecArgs) ToLeaseSpecOutputWithContext(ctx context.Context) LeaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LeaseSpecOutput)
}

// LeaseSpecOutput is an output type that resolves to a Input.
type LeaseSpecOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(LeaseSpecOutput{}) }

func (LeaseSpecOutput) ElementType() reflect.Type {
	return _LeaseSpecType
}

func (o LeaseSpecOutput) AcquireTime() pulumi.StringOutput {
	return o.Apply(func(v LeaseSpec) *string {
		return v.AcquireTime
	}).(pulumi.StringOutput)
}

func (o LeaseSpecOutput) HolderIdentity() pulumi.StringOutput {
	return o.Apply(func(v LeaseSpec) *string {
		return v.HolderIdentity
	}).(pulumi.StringOutput)
}

func (o LeaseSpecOutput) LeaseDurationSeconds() pulumi.IntOutput {
	return o.Apply(func(v LeaseSpec) *int {
		return v.LeaseDurationSeconds
	}).(pulumi.IntOutput)
}

func (o LeaseSpecOutput) LeaseTransitions() pulumi.IntOutput {
	return o.Apply(func(v LeaseSpec) *int {
		return v.LeaseTransitions
	}).(pulumi.IntOutput)
}

func (o LeaseSpecOutput) RenewTime() pulumi.StringOutput {
	return o.Apply(func(v LeaseSpec) *string {
		return v.RenewTime
	}).(pulumi.StringOutput)
}

