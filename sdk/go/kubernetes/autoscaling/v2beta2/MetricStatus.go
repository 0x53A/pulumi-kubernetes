// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// MetricStatus describes the last-read state of a single metric.
type MetricStatus struct {
	// external refers to a global metric that is not associated with any Kubernetes object. It allows
	// autoscaling based on information coming from components running outside of cluster (for example
	// length of queue in cloud messaging service, or QPS from loadbalancer running outside of
	// cluster).
	External *ExternalMetricStatus `pulumi:"external"`

	// object refers to a metric describing a single kubernetes object (for example, hits-per-second on
	// an Ingress object).
	Object *ObjectMetricStatus `pulumi:"object"`

	// pods refers to a metric describing each pod in the current scale target (for example,
	// transactions-processed-per-second).  The values will be averaged together before being compared
	// to the target value.
	Pods *PodsMetricStatus `pulumi:"pods"`

	// resource refers to a resource metric (such as those specified in requests and limits) known to
	// Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics
	// are built in to Kubernetes, and have special scaling options on top of those available to normal
	// per-pod metrics using the "pods" source.
	Resource *ResourceMetricStatus `pulumi:"resource"`

	// type is the type of metric source.  It will be one of "Object", "Pods" or "Resource", each
	// corresponds to a matching field in the object.
	Type string `pulumi:"type"`

}

var _MetricStatusType = reflect.TypeOf((*MetricStatus)(nil)).Elem()

// MetricStatusInput represents an input type that resolves to a MetricStatus.
type MetricStatusInput interface {
	ElementType() reflect.Type

	ToMetricStatusOutput() MetricStatusOutput
	ToMetricStatusOutputWithContext(ctx context.Context) MetricStatusOutput
}

// MetricStatusArgs is a MetricStatusInput whose fields are all Input types.
type MetricStatusArgs struct {
	// type is the type of metric source.  It will be one of "Object", "Pods" or "Resource", each
	// corresponds to a matching field in the object.
	Type pulumi.StringInput `pulumi:"type"`

	// external refers to a global metric that is not associated with any Kubernetes object. It allows
	// autoscaling based on information coming from components running outside of cluster (for example
	// length of queue in cloud messaging service, or QPS from loadbalancer running outside of
	// cluster).
	External ExternalMetricStatusInput `pulumi:"external"`

	// object refers to a metric describing a single kubernetes object (for example, hits-per-second on
	// an Ingress object).
	Object ObjectMetricStatusInput `pulumi:"object"`

	// pods refers to a metric describing each pod in the current scale target (for example,
	// transactions-processed-per-second).  The values will be averaged together before being compared
	// to the target value.
	Pods PodsMetricStatusInput `pulumi:"pods"`

	// resource refers to a resource metric (such as those specified in requests and limits) known to
	// Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics
	// are built in to Kubernetes, and have special scaling options on top of those available to normal
	// per-pod metrics using the "pods" source.
	Resource ResourceMetricStatusInput `pulumi:"resource"`

}

func (a MetricStatusArgs) ElementType() reflect.Type {
	return _MetricStatusType
}

func (a MetricStatusArgs) ToMetricStatusOutput() MetricStatusOutput {
	return pulumi.ToOutput(a).(MetricStatusOutput)
}

func (a MetricStatusArgs) ToMetricStatusOutputWithContext(ctx context.Context) MetricStatusOutput {
	return pulumi.ToOutputWithContext(ctx, a).(MetricStatusOutput)
}

// MetricStatusOutput is an output type that resolves to a Input.
type MetricStatusOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(MetricStatusOutput{}) }

func (MetricStatusOutput) ElementType() reflect.Type {
	return _MetricStatusType
}

func (o MetricStatusOutput) External() ExternalMetricStatusOutput {
	return o.Apply(func(v MetricStatus) *ExternalMetricStatus {
		return v.External
	}).(ExternalMetricStatusOutput)
}

func (o MetricStatusOutput) Object() ObjectMetricStatusOutput {
	return o.Apply(func(v MetricStatus) *ObjectMetricStatus {
		return v.Object
	}).(ObjectMetricStatusOutput)
}

func (o MetricStatusOutput) Pods() PodsMetricStatusOutput {
	return o.Apply(func(v MetricStatus) *PodsMetricStatus {
		return v.Pods
	}).(PodsMetricStatusOutput)
}

func (o MetricStatusOutput) Resource() ResourceMetricStatusOutput {
	return o.Apply(func(v MetricStatus) *ResourceMetricStatus {
		return v.Resource
	}).(ResourceMetricStatusOutput)
}

func (o MetricStatusOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v MetricStatus) string {
		return v.Type
	}).(pulumi.StringOutput)
}

var _MetricStatusArrayType = reflect.TypeOf((*[]MetricStatus)(nil)).Elem()

type MetricStatusArrayInput interface {
	ElementType() reflect.Type

	ToMetricStatusArrayOutput() MetricStatusArrayOutput
	ToMetricStatusArrayOutputWithContext(ctx context.Context) MetricStatusArrayOutput
}

type MetricStatusArray []MetricStatusInput

func (a MetricStatusArray) ElementType() reflect.Type {
	return _MetricStatusArrayType
}

func (a MetricStatusArray) ToMetricStatusArrayOutput() MetricStatusArrayOutput {
	return pulumi.ToOutput(a).(MetricStatusArrayOutput)
}

func (a MetricStatusArray) ToMetricStatusArrayOutputWithContext(ctx context.Context) MetricStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(MetricStatusArrayOutput)
}

type MetricStatusArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(MetricStatusArrayOutput{}) }

func (MetricStatusArrayOutput) ElementType() reflect.Type {
	return _MetricStatusArrayType
}

func (o MetricStatusArrayOutput) Index(i pulumi.IntInput) MetricStatusOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) MetricStatus {
		return vs[0].([]MetricStatus)[vs[1].(int)]
	}).(MetricStatusOutput)
}
