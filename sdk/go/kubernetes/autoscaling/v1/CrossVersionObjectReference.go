// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// CrossVersionObjectReference contains enough information to let you identify the referred
// resource.
type CrossVersionObjectReference struct {
	// API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind of the referent; More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind string `pulumi:"kind"`

	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name string `pulumi:"name"`

}

var _CrossVersionObjectReferenceType = reflect.TypeOf((*CrossVersionObjectReference)(nil)).Elem()

// CrossVersionObjectReferenceInput represents an input type that resolves to a CrossVersionObjectReference.
type CrossVersionObjectReferenceInput interface {
	ElementType() reflect.Type

	ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput
	ToCrossVersionObjectReferenceOutputWithContext(ctx context.Context) CrossVersionObjectReferenceOutput
}

// CrossVersionObjectReferenceArgs is a CrossVersionObjectReferenceInput whose fields are all Input types.
type CrossVersionObjectReferenceArgs struct {
	// Kind of the referent; More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind pulumi.StringInput `pulumi:"kind"`

	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringInput `pulumi:"name"`

	// API version of the referent
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

}

func (a CrossVersionObjectReferenceArgs) ElementType() reflect.Type {
	return _CrossVersionObjectReferenceType
}

func (a CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput {
	return pulumi.ToOutput(a).(CrossVersionObjectReferenceOutput)
}

func (a CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferenceOutputWithContext(ctx context.Context) CrossVersionObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CrossVersionObjectReferenceOutput)
}

// CrossVersionObjectReferenceOutput is an output type that resolves to a Input.
type CrossVersionObjectReferenceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CrossVersionObjectReferenceOutput{}) }

func (CrossVersionObjectReferenceOutput) ElementType() reflect.Type {
	return _CrossVersionObjectReferenceType
}

func (o CrossVersionObjectReferenceOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v CrossVersionObjectReference) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o CrossVersionObjectReferenceOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v CrossVersionObjectReference) string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o CrossVersionObjectReferenceOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v CrossVersionObjectReference) string {
		return v.Name
	}).(pulumi.StringOutput)
}

