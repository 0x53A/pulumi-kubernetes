// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for
// example, hits-per-second on an Ingress object).
type ObjectMetricSource struct {
	// averageValue is the target value of the average of the metric across all relevant pods (as a
	// quantity)
	AverageValue *string `pulumi:"averageValue"`

	// metricName is the name of the metric in question.
	MetricName string `pulumi:"metricName"`

	// selector is the string-encoded form of a standard kubernetes label selector for the given metric
	// When set, it is passed as an additional parameter to the metrics server for more specific
	// metrics scoping When unset, just the metricName will be used to gather metrics.
	Selector *metaV1.LabelSelector `pulumi:"selector"`

	// target is the described Kubernetes object.
	Target CrossVersionObjectReference `pulumi:"target"`

	// targetValue is the target value of the metric (as a quantity).
	TargetValue string `pulumi:"targetValue"`

}

var _ObjectMetricSourceType = reflect.TypeOf((*ObjectMetricSource)(nil)).Elem()

// ObjectMetricSourceInput represents an input type that resolves to a ObjectMetricSource.
type ObjectMetricSourceInput interface {
	ElementType() reflect.Type

	ToObjectMetricSourceOutput() ObjectMetricSourceOutput
	ToObjectMetricSourceOutputWithContext(ctx context.Context) ObjectMetricSourceOutput
}

// ObjectMetricSourceArgs is a ObjectMetricSourceInput whose fields are all Input types.
type ObjectMetricSourceArgs struct {
	// metricName is the name of the metric in question.
	MetricName pulumi.StringInput `pulumi:"metricName"`

	// target is the described Kubernetes object.
	Target CrossVersionObjectReferenceInput `pulumi:"target"`

	// targetValue is the target value of the metric (as a quantity).
	TargetValue pulumi.StringInput `pulumi:"targetValue"`

	// averageValue is the target value of the average of the metric across all relevant pods (as a
	// quantity)
	AverageValue pulumi.StringInput `pulumi:"averageValue"`

	// selector is the string-encoded form of a standard kubernetes label selector for the given metric
	// When set, it is passed as an additional parameter to the metrics server for more specific
	// metrics scoping When unset, just the metricName will be used to gather metrics.
	Selector metaV1.LabelSelectorInput `pulumi:"selector"`

}

func (a ObjectMetricSourceArgs) ElementType() reflect.Type {
	return _ObjectMetricSourceType
}

func (a ObjectMetricSourceArgs) ToObjectMetricSourceOutput() ObjectMetricSourceOutput {
	return pulumi.ToOutput(a).(ObjectMetricSourceOutput)
}

func (a ObjectMetricSourceArgs) ToObjectMetricSourceOutputWithContext(ctx context.Context) ObjectMetricSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ObjectMetricSourceOutput)
}

// ObjectMetricSourceOutput is an output type that resolves to a Input.
type ObjectMetricSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ObjectMetricSourceOutput{}) }

func (ObjectMetricSourceOutput) ElementType() reflect.Type {
	return _ObjectMetricSourceType
}

func (o ObjectMetricSourceOutput) AverageValue() pulumi.StringOutput {
	return o.Apply(func(v ObjectMetricSource) *string {
		return v.AverageValue
	}).(pulumi.StringOutput)
}

func (o ObjectMetricSourceOutput) MetricName() pulumi.StringOutput {
	return o.Apply(func(v ObjectMetricSource) string {
		return v.MetricName
	}).(pulumi.StringOutput)
}

func (o ObjectMetricSourceOutput) Selector() metaV1.LabelSelectorOutput {
	return o.Apply(func(v ObjectMetricSource) *metaV1.LabelSelector {
		return v.Selector
	}).(metaV1.LabelSelectorOutput)
}

func (o ObjectMetricSourceOutput) Target() CrossVersionObjectReferenceOutput {
	return o.Apply(func(v ObjectMetricSource) CrossVersionObjectReference {
		return v.Target
	}).(CrossVersionObjectReferenceOutput)
}

func (o ObjectMetricSourceOutput) TargetValue() pulumi.StringOutput {
	return o.Apply(func(v ObjectMetricSource) string {
		return v.TargetValue
	}).(pulumi.StringOutput)
}

