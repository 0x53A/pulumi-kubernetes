// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object
// (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside
// of cluster). Exactly one "target" type should be set.
type ExternalMetricSource struct {
	// metricName is the name of the metric in question.
	MetricName string `pulumi:"metricName"`

	// metricSelector is used to identify a specific time series within a given metric.
	MetricSelector *metaV1.LabelSelector `pulumi:"metricSelector"`

	// targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually
	// exclusive with TargetValue.
	TargetAverageValue *string `pulumi:"targetAverageValue"`

	// targetValue is the target value of the metric (as a quantity). Mutually exclusive with
	// TargetAverageValue.
	TargetValue *string `pulumi:"targetValue"`

}

var _ExternalMetricSourceType = reflect.TypeOf((*ExternalMetricSource)(nil)).Elem()

// ExternalMetricSourceInput represents an input type that resolves to a ExternalMetricSource.
type ExternalMetricSourceInput interface {
	ElementType() reflect.Type

	ToExternalMetricSourceOutput() ExternalMetricSourceOutput
	ToExternalMetricSourceOutputWithContext(ctx context.Context) ExternalMetricSourceOutput
}

// ExternalMetricSourceArgs is a ExternalMetricSourceInput whose fields are all Input types.
type ExternalMetricSourceArgs struct {
	// metricName is the name of the metric in question.
	MetricName pulumi.StringInput `pulumi:"metricName"`

	// metricSelector is used to identify a specific time series within a given metric.
	MetricSelector metaV1.LabelSelectorInput `pulumi:"metricSelector"`

	// targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually
	// exclusive with TargetValue.
	TargetAverageValue pulumi.StringInput `pulumi:"targetAverageValue"`

	// targetValue is the target value of the metric (as a quantity). Mutually exclusive with
	// TargetAverageValue.
	TargetValue pulumi.StringInput `pulumi:"targetValue"`

}

func (a ExternalMetricSourceArgs) ElementType() reflect.Type {
	return _ExternalMetricSourceType
}

func (a ExternalMetricSourceArgs) ToExternalMetricSourceOutput() ExternalMetricSourceOutput {
	return pulumi.ToOutput(a).(ExternalMetricSourceOutput)
}

func (a ExternalMetricSourceArgs) ToExternalMetricSourceOutputWithContext(ctx context.Context) ExternalMetricSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ExternalMetricSourceOutput)
}

// ExternalMetricSourceOutput is an output type that resolves to a Input.
type ExternalMetricSourceOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ExternalMetricSourceOutput{}) }

func (ExternalMetricSourceOutput) ElementType() reflect.Type {
	return _ExternalMetricSourceType
}

func (o ExternalMetricSourceOutput) MetricName() pulumi.StringOutput {
	return o.Apply(func(v ExternalMetricSource) string {
		return v.MetricName
	}).(pulumi.StringOutput)
}

func (o ExternalMetricSourceOutput) MetricSelector() metaV1.LabelSelectorOutput {
	return o.Apply(func(v ExternalMetricSource) *metaV1.LabelSelector {
		return v.MetricSelector
	}).(metaV1.LabelSelectorOutput)
}

func (o ExternalMetricSourceOutput) TargetAverageValue() pulumi.StringOutput {
	return o.Apply(func(v ExternalMetricSource) *string {
		return v.TargetAverageValue
	}).(pulumi.StringOutput)
}

func (o ExternalMetricSourceOutput) TargetValue() pulumi.StringOutput {
	return o.Apply(func(v ExternalMetricSource) *string {
		return v.TargetValue
	}).(pulumi.StringOutput)
}

