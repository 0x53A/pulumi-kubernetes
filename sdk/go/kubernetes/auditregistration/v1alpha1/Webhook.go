// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Webhook holds the configuration of the webhook
type Webhook struct {
	// ClientConfig holds the connection parameters for the webhook required
	ClientConfig WebhookClientConfig `pulumi:"clientConfig"`

	// Throttle holds the options for throttling the webhook
	Throttle *WebhookThrottleConfig `pulumi:"throttle"`

}

var _WebhookType = reflect.TypeOf((*Webhook)(nil)).Elem()

// WebhookInput represents an input type that resolves to a Webhook.
type WebhookInput interface {
	ElementType() reflect.Type

	ToWebhookOutput() WebhookOutput
	ToWebhookOutputWithContext(ctx context.Context) WebhookOutput
}

// WebhookArgs is a WebhookInput whose fields are all Input types.
type WebhookArgs struct {
	// ClientConfig holds the connection parameters for the webhook required
	ClientConfig WebhookClientConfigInput `pulumi:"clientConfig"`

	// Throttle holds the options for throttling the webhook
	Throttle WebhookThrottleConfigInput `pulumi:"throttle"`

}

func (a WebhookArgs) ElementType() reflect.Type {
	return _WebhookType
}

func (a WebhookArgs) ToWebhookOutput() WebhookOutput {
	return pulumi.ToOutput(a).(WebhookOutput)
}

func (a WebhookArgs) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, a).(WebhookOutput)
}

// WebhookOutput is an output type that resolves to a Input.
type WebhookOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(WebhookOutput{}) }

func (WebhookOutput) ElementType() reflect.Type {
	return _WebhookType
}

func (o WebhookOutput) ClientConfig() WebhookClientConfigOutput {
	return o.Apply(func(v Webhook) WebhookClientConfig {
		return v.ClientConfig
	}).(WebhookClientConfigOutput)
}

func (o WebhookOutput) Throttle() WebhookThrottleConfigOutput {
	return o.Apply(func(v Webhook) *WebhookThrottleConfig {
		return v.Throttle
	}).(WebhookThrottleConfigOutput)
}

