// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// AuditSinkSpec holds the spec for the audit sink
type AuditSinkSpec struct {
	// Policy defines the policy for selecting which events should be sent to the webhook required
	Policy Policy `pulumi:"policy"`

	// Webhook to send events required
	Webhook Webhook `pulumi:"webhook"`

}

var _AuditSinkSpecType = reflect.TypeOf((*AuditSinkSpec)(nil)).Elem()

// AuditSinkSpecInput represents an input type that resolves to a AuditSinkSpec.
type AuditSinkSpecInput interface {
	ElementType() reflect.Type

	ToAuditSinkSpecOutput() AuditSinkSpecOutput
	ToAuditSinkSpecOutputWithContext(ctx context.Context) AuditSinkSpecOutput
}

// AuditSinkSpecArgs is a AuditSinkSpecInput whose fields are all Input types.
type AuditSinkSpecArgs struct {
	// Policy defines the policy for selecting which events should be sent to the webhook required
	Policy PolicyInput `pulumi:"policy"`

	// Webhook to send events required
	Webhook WebhookInput `pulumi:"webhook"`

}

func (a AuditSinkSpecArgs) ElementType() reflect.Type {
	return _AuditSinkSpecType
}

func (a AuditSinkSpecArgs) ToAuditSinkSpecOutput() AuditSinkSpecOutput {
	return pulumi.ToOutput(a).(AuditSinkSpecOutput)
}

func (a AuditSinkSpecArgs) ToAuditSinkSpecOutputWithContext(ctx context.Context) AuditSinkSpecOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AuditSinkSpecOutput)
}

// AuditSinkSpecOutput is an output type that resolves to a Input.
type AuditSinkSpecOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(AuditSinkSpecOutput{}) }

func (AuditSinkSpecOutput) ElementType() reflect.Type {
	return _AuditSinkSpecType
}

func (o AuditSinkSpecOutput) Policy() PolicyOutput {
	return o.Apply(func(v AuditSinkSpec) Policy {
		return v.Policy
	}).(PolicyOutput)
}

func (o AuditSinkSpecOutput) Webhook() WebhookOutput {
	return o.Apply(func(v AuditSinkSpec) Webhook {
		return v.Webhook
	}).(WebhookOutput)
}

