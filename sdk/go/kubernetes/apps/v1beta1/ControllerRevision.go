// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// DEPRECATED - apps/v1beta1/ControllerRevision is not supported by Kubernetes 1.16+ clusters. Use
// apps/v1/ControllerRevision instead.
// 
// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for
// serializing and deserializing the objects that contain their internal state. Once a
// ControllerRevision has been successfully created, it can not be updated. The API Server will fail
// validation of all requests that attempt to mutate the Data field. ControllerRevisions may,
// however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers
// for update and rollback, this object is beta. However, it may be subject to name and
// representation changes in future releases, and clients should not depend on its stability. It is
// primarily for internal use by controllers.
type ControllerRevision struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Data is the serialized representation of the state.
	Data pulumi.AnyOutput `pulumi:"data"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Revision indicates the revision of the state represented by Data.
	Revision pulumi.IntOutput `pulumi:"revision"`

}

// ControllerRevisionArgs is the set of arguments needed to create a ControllerRevision resource.
type ControllerRevisionArgs struct {
	// Revision indicates the revision of the state represented by Data.
	Revision pulumi.IntInput `pulumi:"revision"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Data is the serialized representation of the state.
	Data pulumi.Input `pulumi:"data"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

}

// NewControllerRevision creates a ControllerRevision resource with the given unique name, arguments, and options.
func NewControllerRevision(ctx *pulumi.Context, name string, args *ControllerRevisionArgs, opts ...pulumi.ResourceOption) (*ControllerRevision, error) {
	inputs := map[string]pulumi.Input{}
	if args == nil || args.Revision == nil {
		return nil, errors.New("missing required argument 'Revision'")
	}
	if args != nil {
		args.ApiVersion = pulumi.String("apps/v1beta1")
		args.Kind = pulumi.String("ControllerRevision")
		inputs["revision"] = args.Revision.ToIntOutput()
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Data; i != nil {
			inputs["data"] = i
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
	}
	var resource ControllerRevision
	err := ctx.RegisterResource("kubernetes:apps/v1beta1:ControllerRevision", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetControllerRevision gets an existing ControllerRevision resource's state with the given name and ID.
func GetControllerRevision(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*ControllerRevision, error) {
	var resource ControllerRevision
	err := ctx.ReadResource("kubernetes:apps/v1beta1:ControllerRevision", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// DEPRECATED - apps/v1beta1/ControllerRevision is not supported by Kubernetes 1.16+ clusters. Use
// apps/v1/ControllerRevision instead.
// 
// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for
// serializing and deserializing the objects that contain their internal state. Once a
// ControllerRevision has been successfully created, it can not be updated. The API Server will fail
// validation of all requests that attempt to mutate the Data field. ControllerRevisions may,
// however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers
// for update and rollback, this object is beta. However, it may be subject to name and
// representation changes in future releases, and clients should not depend on its stability. It is
// primarily for internal use by controllers.
type ControllerRevisionProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Data is the serialized representation of the state.
	Data interface{} `pulumi:"data"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Revision indicates the revision of the state represented by Data.
	Revision int `pulumi:"revision"`

}

var _ControllerRevisionPropertyType = reflect.TypeOf((*ControllerRevisionProperty)(nil)).Elem()

// ControllerRevisionPropertyInput represents an input type that resolves to a ControllerRevisionProperty.
type ControllerRevisionPropertyInput interface {
	ElementType() reflect.Type

	ToControllerRevisionPropertyOutput() ControllerRevisionPropertyOutput
	ToControllerRevisionPropertyOutputWithContext(ctx context.Context) ControllerRevisionPropertyOutput
}

// ControllerRevisionPropertyArgs is a ControllerRevisionPropertyInput whose fields are all Input types.
type ControllerRevisionPropertyArgs struct {
	// Revision indicates the revision of the state represented by Data.
	Revision pulumi.IntInput `pulumi:"revision"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Data is the serialized representation of the state.
	Data pulumi.Input `pulumi:"data"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

}

func (a ControllerRevisionPropertyArgs) ElementType() reflect.Type {
	return _ControllerRevisionPropertyType
}

func (a ControllerRevisionPropertyArgs) ToControllerRevisionPropertyOutput() ControllerRevisionPropertyOutput {
	return pulumi.ToOutput(a).(ControllerRevisionPropertyOutput)
}

func (a ControllerRevisionPropertyArgs) ToControllerRevisionPropertyOutputWithContext(ctx context.Context) ControllerRevisionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ControllerRevisionPropertyOutput)
}

// ControllerRevisionPropertyOutput is an output type that resolves to a Input.
type ControllerRevisionPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ControllerRevisionPropertyOutput{}) }

func (ControllerRevisionPropertyOutput) ElementType() reflect.Type {
	return _ControllerRevisionPropertyType
}

func (o ControllerRevisionPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v ControllerRevisionProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o ControllerRevisionPropertyOutput) Data() pulumi.AnyOutput {
	return o.Apply(func(v ControllerRevisionProperty) interface{} {
		return v.Data
	}).(pulumi.AnyOutput)
}

func (o ControllerRevisionPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v ControllerRevisionProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o ControllerRevisionPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v ControllerRevisionProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o ControllerRevisionPropertyOutput) Revision() pulumi.IntOutput {
	return o.Apply(func(v ControllerRevisionProperty) int {
		return v.Revision
	}).(pulumi.IntOutput)
}

var _ControllerRevisionPropertyArrayType = reflect.TypeOf((*[]ControllerRevisionProperty)(nil)).Elem()

type ControllerRevisionPropertyArrayInput interface {
	ElementType() reflect.Type

	ToControllerRevisionPropertyArrayOutput() ControllerRevisionPropertyArrayOutput
	ToControllerRevisionPropertyArrayOutputWithContext(ctx context.Context) ControllerRevisionPropertyArrayOutput
}

type ControllerRevisionPropertyArray []ControllerRevisionPropertyInput

func (a ControllerRevisionPropertyArray) ElementType() reflect.Type {
	return _ControllerRevisionPropertyArrayType
}

func (a ControllerRevisionPropertyArray) ToControllerRevisionPropertyArrayOutput() ControllerRevisionPropertyArrayOutput {
	return pulumi.ToOutput(a).(ControllerRevisionPropertyArrayOutput)
}

func (a ControllerRevisionPropertyArray) ToControllerRevisionPropertyArrayOutputWithContext(ctx context.Context) ControllerRevisionPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ControllerRevisionPropertyArrayOutput)
}

type ControllerRevisionPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ControllerRevisionPropertyArrayOutput{}) }

func (ControllerRevisionPropertyArrayOutput) ElementType() reflect.Type {
	return _ControllerRevisionPropertyArrayType
}

func (o ControllerRevisionPropertyArrayOutput) Index(i pulumi.IntInput) ControllerRevisionPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ControllerRevisionProperty {
		return vs[0].([]ControllerRevisionProperty)[vs[1].(int)]
	}).(ControllerRevisionPropertyOutput)
}
