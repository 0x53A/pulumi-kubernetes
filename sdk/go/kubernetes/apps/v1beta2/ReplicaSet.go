// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// DEPRECATED - apps/v1beta2/ReplicaSet is not supported by Kubernetes 1.16+ clusters. Use
// apps/v1/ReplicaSet instead.
// 
// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
type ReplicaSet struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that
	// the ReplicaSet manages. Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Spec defines the specification of the desired behavior of the ReplicaSet. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicaSetSpecOutput `pulumi:"spec"`

	// Status is the most recently observed status of the ReplicaSet. This data may be out of date by
	// some window of time. Populated by the system. Read-only. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ReplicaSetStatusOutput `pulumi:"status"`

}

// ReplicaSetArgs is the set of arguments needed to create a ReplicaSet resource.
type ReplicaSetArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that
	// the ReplicaSet manages. Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the specification of the desired behavior of the ReplicaSet. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicaSetSpecInput `pulumi:"spec"`

}

// NewReplicaSet creates a ReplicaSet resource with the given unique name, arguments, and options.
func NewReplicaSet(ctx *pulumi.Context, name string, args *ReplicaSetArgs, opts ...pulumi.ResourceOption) (*ReplicaSet, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("apps/v1beta2")
		args.Kind = pulumi.String("ReplicaSet")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToReplicaSetSpecOutput()
		}
	}
	var resource ReplicaSet
	err := ctx.RegisterResource("kubernetes:apps/v1beta2:ReplicaSet", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicaSet gets an existing ReplicaSet resource's state with the given name and ID.
func GetReplicaSet(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*ReplicaSet, error) {
	var resource ReplicaSet
	err := ctx.ReadResource("kubernetes:apps/v1beta2:ReplicaSet", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// DEPRECATED - apps/v1beta2/ReplicaSet is not supported by Kubernetes 1.16+ clusters. Use
// apps/v1/ReplicaSet instead.
// 
// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
type ReplicaSetProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that
	// the ReplicaSet manages. Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Spec defines the specification of the desired behavior of the ReplicaSet. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ReplicaSetSpec `pulumi:"spec"`

	// Status is the most recently observed status of the ReplicaSet. This data may be out of date by
	// some window of time. Populated by the system. Read-only. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ReplicaSetStatus `pulumi:"status"`

}

var _ReplicaSetPropertyType = reflect.TypeOf((*ReplicaSetProperty)(nil)).Elem()

// ReplicaSetPropertyInput represents an input type that resolves to a ReplicaSetProperty.
type ReplicaSetPropertyInput interface {
	ElementType() reflect.Type

	ToReplicaSetPropertyOutput() ReplicaSetPropertyOutput
	ToReplicaSetPropertyOutputWithContext(ctx context.Context) ReplicaSetPropertyOutput
}

// ReplicaSetPropertyArgs is a ReplicaSetPropertyInput whose fields are all Input types.
type ReplicaSetPropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that
	// the ReplicaSet manages. Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec defines the specification of the desired behavior of the ReplicaSet. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicaSetSpecInput `pulumi:"spec"`

}

func (a ReplicaSetPropertyArgs) ElementType() reflect.Type {
	return _ReplicaSetPropertyType
}

func (a ReplicaSetPropertyArgs) ToReplicaSetPropertyOutput() ReplicaSetPropertyOutput {
	return pulumi.ToOutput(a).(ReplicaSetPropertyOutput)
}

func (a ReplicaSetPropertyArgs) ToReplicaSetPropertyOutputWithContext(ctx context.Context) ReplicaSetPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ReplicaSetPropertyOutput)
}

// ReplicaSetPropertyOutput is an output type that resolves to a Input.
type ReplicaSetPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ReplicaSetPropertyOutput{}) }

func (ReplicaSetPropertyOutput) ElementType() reflect.Type {
	return _ReplicaSetPropertyType
}

func (o ReplicaSetPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v ReplicaSetProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o ReplicaSetPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v ReplicaSetProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o ReplicaSetPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v ReplicaSetProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o ReplicaSetPropertyOutput) Spec() ReplicaSetSpecOutput {
	return o.Apply(func(v ReplicaSetProperty) *ReplicaSetSpec {
		return v.Spec
	}).(ReplicaSetSpecOutput)
}

func (o ReplicaSetPropertyOutput) Status() ReplicaSetStatusOutput {
	return o.Apply(func(v ReplicaSetProperty) ReplicaSetStatus {
		return v.Status
	}).(ReplicaSetStatusOutput)
}

var _ReplicaSetPropertyArrayType = reflect.TypeOf((*[]ReplicaSetProperty)(nil)).Elem()

type ReplicaSetPropertyArrayInput interface {
	ElementType() reflect.Type

	ToReplicaSetPropertyArrayOutput() ReplicaSetPropertyArrayOutput
	ToReplicaSetPropertyArrayOutputWithContext(ctx context.Context) ReplicaSetPropertyArrayOutput
}

type ReplicaSetPropertyArray []ReplicaSetPropertyInput

func (a ReplicaSetPropertyArray) ElementType() reflect.Type {
	return _ReplicaSetPropertyArrayType
}

func (a ReplicaSetPropertyArray) ToReplicaSetPropertyArrayOutput() ReplicaSetPropertyArrayOutput {
	return pulumi.ToOutput(a).(ReplicaSetPropertyArrayOutput)
}

func (a ReplicaSetPropertyArray) ToReplicaSetPropertyArrayOutputWithContext(ctx context.Context) ReplicaSetPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ReplicaSetPropertyArrayOutput)
}

type ReplicaSetPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ReplicaSetPropertyArrayOutput{}) }

func (ReplicaSetPropertyArrayOutput) ElementType() reflect.Type {
	return _ReplicaSetPropertyArrayType
}

func (o ReplicaSetPropertyArrayOutput) Index(i pulumi.IntInput) ReplicaSetPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ReplicaSetProperty {
		return vs[0].([]ReplicaSetProperty)[vs[1].(int)]
	}).(ReplicaSetPropertyOutput)
}
