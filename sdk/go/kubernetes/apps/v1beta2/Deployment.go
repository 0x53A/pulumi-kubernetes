// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// DEPRECATED - apps/v1beta2/Deployment is not supported by Kubernetes 1.16+ clusters. Use
// apps/v1/Deployment instead.
// 
// Deployment enables declarative updates for Pods and ReplicaSets.
// 
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
// 
// 1. The Deployment has begun to be updated by the Deployment controller. If the current
//    generation of the Deployment is > 1, then this means that the current generation must
//    be different from the generation reported by the last outputs.
// 2. There exists a ReplicaSet whose revision is equal to the current revision of the
//    Deployment.
// 3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//    member is set to 'True'.
// 4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//    'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//    'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//    because it doesn't do a rollout (i.e., it simply creates the Deployment and
//    corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
// 
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type Deployment struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object metadata.
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Specification of the desired behavior of the Deployment.
	Spec DeploymentSpecOutput `pulumi:"spec"`

	// Most recently observed status of the Deployment.
	Status DeploymentStatusOutput `pulumi:"status"`

}

// DeploymentArgs is the set of arguments needed to create a Deployment resource.
type DeploymentArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object metadata.
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Specification of the desired behavior of the Deployment.
	Spec DeploymentSpecInput `pulumi:"spec"`

}

// NewDeployment creates a Deployment resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context, name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("apps/v1beta2")
		args.Kind = pulumi.String("Deployment")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToDeploymentSpecOutput()
		}
	}
	var resource Deployment
	err := ctx.RegisterResource("kubernetes:apps/v1beta2:Deployment", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name and ID.
func GetDeployment(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("kubernetes:apps/v1beta2:Deployment", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// DEPRECATED - apps/v1beta2/Deployment is not supported by Kubernetes 1.16+ clusters. Use
// apps/v1/Deployment instead.
// 
// Deployment enables declarative updates for Pods and ReplicaSets.
type DeploymentProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object metadata.
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Specification of the desired behavior of the Deployment.
	Spec *DeploymentSpec `pulumi:"spec"`

	// Most recently observed status of the Deployment.
	Status DeploymentStatus `pulumi:"status"`

}

var _DeploymentPropertyType = reflect.TypeOf((*DeploymentProperty)(nil)).Elem()

// DeploymentPropertyInput represents an input type that resolves to a DeploymentProperty.
type DeploymentPropertyInput interface {
	ElementType() reflect.Type

	ToDeploymentPropertyOutput() DeploymentPropertyOutput
	ToDeploymentPropertyOutputWithContext(ctx context.Context) DeploymentPropertyOutput
}

// DeploymentPropertyArgs is a DeploymentPropertyInput whose fields are all Input types.
type DeploymentPropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object metadata.
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Specification of the desired behavior of the Deployment.
	Spec DeploymentSpecInput `pulumi:"spec"`

}

func (a DeploymentPropertyArgs) ElementType() reflect.Type {
	return _DeploymentPropertyType
}

func (a DeploymentPropertyArgs) ToDeploymentPropertyOutput() DeploymentPropertyOutput {
	return pulumi.ToOutput(a).(DeploymentPropertyOutput)
}

func (a DeploymentPropertyArgs) ToDeploymentPropertyOutputWithContext(ctx context.Context) DeploymentPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DeploymentPropertyOutput)
}

// DeploymentPropertyOutput is an output type that resolves to a Input.
type DeploymentPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(DeploymentPropertyOutput{}) }

func (DeploymentPropertyOutput) ElementType() reflect.Type {
	return _DeploymentPropertyType
}

func (o DeploymentPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v DeploymentProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o DeploymentPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v DeploymentProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o DeploymentPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v DeploymentProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o DeploymentPropertyOutput) Spec() DeploymentSpecOutput {
	return o.Apply(func(v DeploymentProperty) *DeploymentSpec {
		return v.Spec
	}).(DeploymentSpecOutput)
}

func (o DeploymentPropertyOutput) Status() DeploymentStatusOutput {
	return o.Apply(func(v DeploymentProperty) DeploymentStatus {
		return v.Status
	}).(DeploymentStatusOutput)
}

var _DeploymentPropertyArrayType = reflect.TypeOf((*[]DeploymentProperty)(nil)).Elem()

type DeploymentPropertyArrayInput interface {
	ElementType() reflect.Type

	ToDeploymentPropertyArrayOutput() DeploymentPropertyArrayOutput
	ToDeploymentPropertyArrayOutputWithContext(ctx context.Context) DeploymentPropertyArrayOutput
}

type DeploymentPropertyArray []DeploymentPropertyInput

func (a DeploymentPropertyArray) ElementType() reflect.Type {
	return _DeploymentPropertyArrayType
}

func (a DeploymentPropertyArray) ToDeploymentPropertyArrayOutput() DeploymentPropertyArrayOutput {
	return pulumi.ToOutput(a).(DeploymentPropertyArrayOutput)
}

func (a DeploymentPropertyArray) ToDeploymentPropertyArrayOutputWithContext(ctx context.Context) DeploymentPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DeploymentPropertyArrayOutput)
}

type DeploymentPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(DeploymentPropertyArrayOutput{}) }

func (DeploymentPropertyArrayOutput) ElementType() reflect.Type {
	return _DeploymentPropertyArrayType
}

func (o DeploymentPropertyArrayOutput) Index(i pulumi.IntInput) DeploymentPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) DeploymentProperty {
		return vs[0].([]DeploymentProperty)[vs[1].(int)]
	}).(DeploymentPropertyOutput)
}
