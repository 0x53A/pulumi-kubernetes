// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// APIServiceSpec contains information for locating and communicating with a server. Only https is
// supported, though you are able to disable certificate verification.
type APIServiceSpec struct {
	// CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving
	// certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle *string `pulumi:"caBundle"`

	// Group is the API group name this server hosts
	Group *string `pulumi:"group"`

	// GroupPriorityMininum is the priority this group should have at least. Higher priority means that
	// the group is preferred by clients over lower priority ones. Note that other versions of this
	// group might specify even higher GroupPriorityMininum values such that the whole group gets a
	// higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to
	// lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of
	// the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions)
	// at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
	GroupPriorityMinimum int `pulumi:"groupPriorityMinimum"`

	// InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server.
	// This is strongly discouraged.  You should use the CABundle instead.
	InsecureSkipTLSVerify *bool `pulumi:"insecureSkipTLSVerify"`

	// Service is a reference to the service for this API server.  It must communicate on port 443 If
	// the Service is nil, that means the handling for the API groupversion is handled locally on this
	// server. The call will simply delegate to the normal handler chain to be fulfilled.
	Service ServiceReference `pulumi:"service"`

	// Version is the API version this server hosts.  For example, "v1"
	Version *string `pulumi:"version"`

	// VersionPriority controls the ordering of this API version inside of its group.  Must be greater
	// than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before
	// 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of
	// equal version priorities, the version string will be used to compute the order inside a group.
	// If the version string is "kube-like", it will sort above non "kube-like" version strings, which
	// are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a
	// number (the major version), then optionally the string "alpha" or "beta" and another number (the
	// minor version). These are sorted first by GA > beta > alpha (where GA is a version with no
	// suffix such as beta or alpha), and then by comparing major version, then minor version. An
	// example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2,
	// foo1, foo10.
	VersionPriority int `pulumi:"versionPriority"`

}

var _APIServiceSpecType = reflect.TypeOf((*APIServiceSpec)(nil)).Elem()

// APIServiceSpecInput represents an input type that resolves to a APIServiceSpec.
type APIServiceSpecInput interface {
	ElementType() reflect.Type

	ToAPIServiceSpecOutput() APIServiceSpecOutput
	ToAPIServiceSpecOutputWithContext(ctx context.Context) APIServiceSpecOutput
}

// APIServiceSpecArgs is a APIServiceSpecInput whose fields are all Input types.
type APIServiceSpecArgs struct {
	// GroupPriorityMininum is the priority this group should have at least. Higher priority means that
	// the group is preferred by clients over lower priority ones. Note that other versions of this
	// group might specify even higher GroupPriorityMininum values such that the whole group gets a
	// higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to
	// lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of
	// the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions)
	// at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
	GroupPriorityMinimum pulumi.IntInput `pulumi:"groupPriorityMinimum"`

	// Service is a reference to the service for this API server.  It must communicate on port 443 If
	// the Service is nil, that means the handling for the API groupversion is handled locally on this
	// server. The call will simply delegate to the normal handler chain to be fulfilled.
	Service ServiceReferenceInput `pulumi:"service"`

	// VersionPriority controls the ordering of this API version inside of its group.  Must be greater
	// than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before
	// 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of
	// equal version priorities, the version string will be used to compute the order inside a group.
	// If the version string is "kube-like", it will sort above non "kube-like" version strings, which
	// are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a
	// number (the major version), then optionally the string "alpha" or "beta" and another number (the
	// minor version). These are sorted first by GA > beta > alpha (where GA is a version with no
	// suffix such as beta or alpha), and then by comparing major version, then minor version. An
	// example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2,
	// foo1, foo10.
	VersionPriority pulumi.IntInput `pulumi:"versionPriority"`

	// CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving
	// certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle pulumi.StringInput `pulumi:"caBundle"`

	// Group is the API group name this server hosts
	Group pulumi.StringInput `pulumi:"group"`

	// InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server.
	// This is strongly discouraged.  You should use the CABundle instead.
	InsecureSkipTLSVerify pulumi.BoolInput `pulumi:"insecureSkipTLSVerify"`

	// Version is the API version this server hosts.  For example, "v1"
	Version pulumi.StringInput `pulumi:"version"`

}

func (a APIServiceSpecArgs) ElementType() reflect.Type {
	return _APIServiceSpecType
}

func (a APIServiceSpecArgs) ToAPIServiceSpecOutput() APIServiceSpecOutput {
	return pulumi.ToOutput(a).(APIServiceSpecOutput)
}

func (a APIServiceSpecArgs) ToAPIServiceSpecOutputWithContext(ctx context.Context) APIServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, a).(APIServiceSpecOutput)
}

// APIServiceSpecOutput is an output type that resolves to a Input.
type APIServiceSpecOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(APIServiceSpecOutput{}) }

func (APIServiceSpecOutput) ElementType() reflect.Type {
	return _APIServiceSpecType
}

func (o APIServiceSpecOutput) CaBundle() pulumi.StringOutput {
	return o.Apply(func(v APIServiceSpec) *string {
		return v.CaBundle
	}).(pulumi.StringOutput)
}

func (o APIServiceSpecOutput) Group() pulumi.StringOutput {
	return o.Apply(func(v APIServiceSpec) *string {
		return v.Group
	}).(pulumi.StringOutput)
}

func (o APIServiceSpecOutput) GroupPriorityMinimum() pulumi.IntOutput {
	return o.Apply(func(v APIServiceSpec) int {
		return v.GroupPriorityMinimum
	}).(pulumi.IntOutput)
}

func (o APIServiceSpecOutput) InsecureSkipTLSVerify() pulumi.BoolOutput {
	return o.Apply(func(v APIServiceSpec) *bool {
		return v.InsecureSkipTLSVerify
	}).(pulumi.BoolOutput)
}

func (o APIServiceSpecOutput) Service() ServiceReferenceOutput {
	return o.Apply(func(v APIServiceSpec) ServiceReference {
		return v.Service
	}).(ServiceReferenceOutput)
}

func (o APIServiceSpecOutput) Version() pulumi.StringOutput {
	return o.Apply(func(v APIServiceSpec) *string {
		return v.Version
	}).(pulumi.StringOutput)
}

func (o APIServiceSpecOutput) VersionPriority() pulumi.IntOutput {
	return o.Apply(func(v APIServiceSpec) int {
		return v.VersionPriority
	}).(pulumi.IntOutput)
}

