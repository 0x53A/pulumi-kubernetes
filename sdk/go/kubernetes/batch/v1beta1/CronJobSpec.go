// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpec struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default):
	// allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if
	// previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it
	// with a new one
	ConcurrencyPolicy *string `pulumi:"concurrencyPolicy"`

	// The number of failed finished jobs to retain. This is a pointer to distinguish between explicit
	// zero and not specified. Defaults to 1.
	FailedJobsHistoryLimit *int `pulumi:"failedJobsHistoryLimit"`

	// Specifies the job that will be created when executing a CronJob.
	JobTemplate JobTemplateSpec `pulumi:"jobTemplate"`

	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule string `pulumi:"schedule"`

	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.
	// Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds *int `pulumi:"startingDeadlineSeconds"`

	// The number of successful finished jobs to retain. This is a pointer to distinguish between
	// explicit zero and not specified. Defaults to 3.
	SuccessfulJobsHistoryLimit *int `pulumi:"successfulJobsHistoryLimit"`

	// This flag tells the controller to suspend subsequent executions, it does not apply to already
	// started executions.  Defaults to false.
	Suspend *bool `pulumi:"suspend"`

}

var _CronJobSpecType = reflect.TypeOf((*CronJobSpec)(nil)).Elem()

// CronJobSpecInput represents an input type that resolves to a CronJobSpec.
type CronJobSpecInput interface {
	ElementType() reflect.Type

	ToCronJobSpecOutput() CronJobSpecOutput
	ToCronJobSpecOutputWithContext(ctx context.Context) CronJobSpecOutput
}

// CronJobSpecArgs is a CronJobSpecInput whose fields are all Input types.
type CronJobSpecArgs struct {
	// Specifies the job that will be created when executing a CronJob.
	JobTemplate JobTemplateSpecInput `pulumi:"jobTemplate"`

	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule pulumi.StringInput `pulumi:"schedule"`

	// Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default):
	// allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if
	// previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it
	// with a new one
	ConcurrencyPolicy pulumi.StringInput `pulumi:"concurrencyPolicy"`

	// The number of failed finished jobs to retain. This is a pointer to distinguish between explicit
	// zero and not specified. Defaults to 1.
	FailedJobsHistoryLimit pulumi.IntInput `pulumi:"failedJobsHistoryLimit"`

	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.
	// Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds pulumi.IntInput `pulumi:"startingDeadlineSeconds"`

	// The number of successful finished jobs to retain. This is a pointer to distinguish between
	// explicit zero and not specified. Defaults to 3.
	SuccessfulJobsHistoryLimit pulumi.IntInput `pulumi:"successfulJobsHistoryLimit"`

	// This flag tells the controller to suspend subsequent executions, it does not apply to already
	// started executions.  Defaults to false.
	Suspend pulumi.BoolInput `pulumi:"suspend"`

}

func (a CronJobSpecArgs) ElementType() reflect.Type {
	return _CronJobSpecType
}

func (a CronJobSpecArgs) ToCronJobSpecOutput() CronJobSpecOutput {
	return pulumi.ToOutput(a).(CronJobSpecOutput)
}

func (a CronJobSpecArgs) ToCronJobSpecOutputWithContext(ctx context.Context) CronJobSpecOutput {
	return pulumi.ToOutputWithContext(ctx, a).(CronJobSpecOutput)
}

// CronJobSpecOutput is an output type that resolves to a Input.
type CronJobSpecOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(CronJobSpecOutput{}) }

func (CronJobSpecOutput) ElementType() reflect.Type {
	return _CronJobSpecType
}

func (o CronJobSpecOutput) ConcurrencyPolicy() pulumi.StringOutput {
	return o.Apply(func(v CronJobSpec) *string {
		return v.ConcurrencyPolicy
	}).(pulumi.StringOutput)
}

func (o CronJobSpecOutput) FailedJobsHistoryLimit() pulumi.IntOutput {
	return o.Apply(func(v CronJobSpec) *int {
		return v.FailedJobsHistoryLimit
	}).(pulumi.IntOutput)
}

func (o CronJobSpecOutput) JobTemplate() JobTemplateSpecOutput {
	return o.Apply(func(v CronJobSpec) JobTemplateSpec {
		return v.JobTemplate
	}).(JobTemplateSpecOutput)
}

func (o CronJobSpecOutput) Schedule() pulumi.StringOutput {
	return o.Apply(func(v CronJobSpec) string {
		return v.Schedule
	}).(pulumi.StringOutput)
}

func (o CronJobSpecOutput) StartingDeadlineSeconds() pulumi.IntOutput {
	return o.Apply(func(v CronJobSpec) *int {
		return v.StartingDeadlineSeconds
	}).(pulumi.IntOutput)
}

func (o CronJobSpecOutput) SuccessfulJobsHistoryLimit() pulumi.IntOutput {
	return o.Apply(func(v CronJobSpec) *int {
		return v.SuccessfulJobsHistoryLimit
	}).(pulumi.IntOutput)
}

func (o CronJobSpecOutput) Suspend() pulumi.BoolOutput {
	return o.Apply(func(v CronJobSpec) *bool {
		return v.Suspend
	}).(pulumi.BoolOutput)
}

