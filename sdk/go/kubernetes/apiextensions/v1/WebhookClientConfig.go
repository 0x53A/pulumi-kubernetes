// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// WebhookClientConfig contains the information to make a TLS connection with the webhook.
type WebhookClientConfig struct {
	// caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server
	// certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle *string `pulumi:"caBundle"`

	// service is a reference to the service for this webhook. Either service or url must be specified.
	// 
	// If the webhook is running within the cluster, then you should use `service`.
	Service *ServiceReference `pulumi:"service"`

	// url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly
	// one of `url` or `service` must be specified.
	// 
	// The `host` should not refer to a service running in the cluster; use the `service` field
	// instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver`
	// cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP
	// address.
	// 
	// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great
	// care to run this webhook on all hosts which run an apiserver which might need to make calls to
	// this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new
	// cluster.
	// 
	// The scheme must be "https"; the URL must begin with "https://".
	// 
	// A path is optional, and if present may be any string permissible in a URL. You may use the path
	// to pass an arbitrary string to the webhook, for example, a cluster identifier.
	// 
	// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...")
	// and query parameters ("?...") are not allowed, either.
	Url *string `pulumi:"url"`

}

var _WebhookClientConfigType = reflect.TypeOf((*WebhookClientConfig)(nil)).Elem()

// WebhookClientConfigInput represents an input type that resolves to a WebhookClientConfig.
type WebhookClientConfigInput interface {
	ElementType() reflect.Type

	ToWebhookClientConfigOutput() WebhookClientConfigOutput
	ToWebhookClientConfigOutputWithContext(ctx context.Context) WebhookClientConfigOutput
}

// WebhookClientConfigArgs is a WebhookClientConfigInput whose fields are all Input types.
type WebhookClientConfigArgs struct {
	// caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server
	// certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle pulumi.StringInput `pulumi:"caBundle"`

	// service is a reference to the service for this webhook. Either service or url must be specified.
	// 
	// If the webhook is running within the cluster, then you should use `service`.
	Service ServiceReferenceInput `pulumi:"service"`

	// url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly
	// one of `url` or `service` must be specified.
	// 
	// The `host` should not refer to a service running in the cluster; use the `service` field
	// instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver`
	// cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP
	// address.
	// 
	// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great
	// care to run this webhook on all hosts which run an apiserver which might need to make calls to
	// this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new
	// cluster.
	// 
	// The scheme must be "https"; the URL must begin with "https://".
	// 
	// A path is optional, and if present may be any string permissible in a URL. You may use the path
	// to pass an arbitrary string to the webhook, for example, a cluster identifier.
	// 
	// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...")
	// and query parameters ("?...") are not allowed, either.
	Url pulumi.StringInput `pulumi:"url"`

}

func (a WebhookClientConfigArgs) ElementType() reflect.Type {
	return _WebhookClientConfigType
}

func (a WebhookClientConfigArgs) ToWebhookClientConfigOutput() WebhookClientConfigOutput {
	return pulumi.ToOutput(a).(WebhookClientConfigOutput)
}

func (a WebhookClientConfigArgs) ToWebhookClientConfigOutputWithContext(ctx context.Context) WebhookClientConfigOutput {
	return pulumi.ToOutputWithContext(ctx, a).(WebhookClientConfigOutput)
}

// WebhookClientConfigOutput is an output type that resolves to a Input.
type WebhookClientConfigOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(WebhookClientConfigOutput{}) }

func (WebhookClientConfigOutput) ElementType() reflect.Type {
	return _WebhookClientConfigType
}

func (o WebhookClientConfigOutput) CaBundle() pulumi.StringOutput {
	return o.Apply(func(v WebhookClientConfig) *string {
		return v.CaBundle
	}).(pulumi.StringOutput)
}

func (o WebhookClientConfigOutput) Service() ServiceReferenceOutput {
	return o.Apply(func(v WebhookClientConfig) *ServiceReference {
		return v.Service
	}).(ServiceReferenceOutput)
}

func (o WebhookClientConfigOutput) Url() pulumi.StringOutput {
	return o.Apply(func(v WebhookClientConfig) *string {
		return v.Url
	}).(pulumi.StringOutput)
}

