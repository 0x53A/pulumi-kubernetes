// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list
// ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are
	// specified, any action requested against one of the enumerated resources in any API group will be
	// allowed.  "*" means all.
	ApiGroups []string `pulumi:"apiGroups"`

	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means
	// that everything is allowed.  "*" means all.
	ResourceNames []string `pulumi:"resourceNames"`

	// Resources is a list of resources this rule applies to.  "*" means all in the specified
	// apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources []string `pulumi:"resources"`

	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete,
	// proxy.  "*" means all.
	Verbs []string `pulumi:"verbs"`

}

var _ResourceRuleType = reflect.TypeOf((*ResourceRule)(nil)).Elem()

// ResourceRuleInput represents an input type that resolves to a ResourceRule.
type ResourceRuleInput interface {
	ElementType() reflect.Type

	ToResourceRuleOutput() ResourceRuleOutput
	ToResourceRuleOutputWithContext(ctx context.Context) ResourceRuleOutput
}

// ResourceRuleArgs is a ResourceRuleInput whose fields are all Input types.
type ResourceRuleArgs struct {
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete,
	// proxy.  "*" means all.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`

	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are
	// specified, any action requested against one of the enumerated resources in any API group will be
	// allowed.  "*" means all.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`

	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means
	// that everything is allowed.  "*" means all.
	ResourceNames pulumi.StringArrayInput `pulumi:"resourceNames"`

	// Resources is a list of resources this rule applies to.  "*" means all in the specified
	// apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources pulumi.StringArrayInput `pulumi:"resources"`

}

func (a ResourceRuleArgs) ElementType() reflect.Type {
	return _ResourceRuleType
}

func (a ResourceRuleArgs) ToResourceRuleOutput() ResourceRuleOutput {
	return pulumi.ToOutput(a).(ResourceRuleOutput)
}

func (a ResourceRuleArgs) ToResourceRuleOutputWithContext(ctx context.Context) ResourceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ResourceRuleOutput)
}

// ResourceRuleOutput is an output type that resolves to a Input.
type ResourceRuleOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ResourceRuleOutput{}) }

func (ResourceRuleOutput) ElementType() reflect.Type {
	return _ResourceRuleType
}

func (o ResourceRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.Apply(func(v ResourceRule) []string {
		return v.ApiGroups
	}).(pulumi.StringArrayOutput)
}

func (o ResourceRuleOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.Apply(func(v ResourceRule) []string {
		return v.ResourceNames
	}).(pulumi.StringArrayOutput)
}

func (o ResourceRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.Apply(func(v ResourceRule) []string {
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

func (o ResourceRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.Apply(func(v ResourceRule) []string {
		return v.Verbs
	}).(pulumi.StringArrayOutput)
}

var _ResourceRuleArrayType = reflect.TypeOf((*[]ResourceRule)(nil)).Elem()

type ResourceRuleArrayInput interface {
	ElementType() reflect.Type

	ToResourceRuleArrayOutput() ResourceRuleArrayOutput
	ToResourceRuleArrayOutputWithContext(ctx context.Context) ResourceRuleArrayOutput
}

type ResourceRuleArray []ResourceRuleInput

func (a ResourceRuleArray) ElementType() reflect.Type {
	return _ResourceRuleArrayType
}

func (a ResourceRuleArray) ToResourceRuleArrayOutput() ResourceRuleArrayOutput {
	return pulumi.ToOutput(a).(ResourceRuleArrayOutput)
}

func (a ResourceRuleArray) ToResourceRuleArrayOutputWithContext(ctx context.Context) ResourceRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ResourceRuleArrayOutput)
}

type ResourceRuleArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(ResourceRuleArrayOutput{}) }

func (ResourceRuleArrayOutput) ElementType() reflect.Type {
	return _ResourceRuleArrayType
}

func (o ResourceRuleArrayOutput) Index(i pulumi.IntInput) ResourceRuleOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ResourceRule {
		return vs[0].([]ResourceRule)[vs[1].(int)]
	}).(ResourceRuleOutput)
}
