// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// SubjectAccessReviewStatus
type SubjectAccessReviewStatus struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed bool `pulumi:"allowed"`

	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is
	// false and denied is false, then the authorizer has no opinion on whether to authorize the
	// action. Denied may not be true if Allowed is true.
	Denied *bool `pulumi:"denied"`

	// EvaluationError is an indication that some error occurred during the authorization check. It is
	// entirely possible to get an error and be able to continue determine authorization status in
	// spite of it. For instance, RBAC can be missing a role, but enough roles are still present and
	// bound to reason about the request.
	EvaluationError *string `pulumi:"evaluationError"`

	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason *string `pulumi:"reason"`

}

var _SubjectAccessReviewStatusType = reflect.TypeOf((*SubjectAccessReviewStatus)(nil)).Elem()

// SubjectAccessReviewStatusInput represents an input type that resolves to a SubjectAccessReviewStatus.
type SubjectAccessReviewStatusInput interface {
	ElementType() reflect.Type

	ToSubjectAccessReviewStatusOutput() SubjectAccessReviewStatusOutput
	ToSubjectAccessReviewStatusOutputWithContext(ctx context.Context) SubjectAccessReviewStatusOutput
}

// SubjectAccessReviewStatusArgs is a SubjectAccessReviewStatusInput whose fields are all Input types.
type SubjectAccessReviewStatusArgs struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed pulumi.BoolInput `pulumi:"allowed"`

	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is
	// false and denied is false, then the authorizer has no opinion on whether to authorize the
	// action. Denied may not be true if Allowed is true.
	Denied pulumi.BoolInput `pulumi:"denied"`

	// EvaluationError is an indication that some error occurred during the authorization check. It is
	// entirely possible to get an error and be able to continue determine authorization status in
	// spite of it. For instance, RBAC can be missing a role, but enough roles are still present and
	// bound to reason about the request.
	EvaluationError pulumi.StringInput `pulumi:"evaluationError"`

	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason pulumi.StringInput `pulumi:"reason"`

}

func (a SubjectAccessReviewStatusArgs) ElementType() reflect.Type {
	return _SubjectAccessReviewStatusType
}

func (a SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusOutput() SubjectAccessReviewStatusOutput {
	return pulumi.ToOutput(a).(SubjectAccessReviewStatusOutput)
}

func (a SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusOutputWithContext(ctx context.Context) SubjectAccessReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SubjectAccessReviewStatusOutput)
}

// SubjectAccessReviewStatusOutput is an output type that resolves to a Input.
type SubjectAccessReviewStatusOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(SubjectAccessReviewStatusOutput{}) }

func (SubjectAccessReviewStatusOutput) ElementType() reflect.Type {
	return _SubjectAccessReviewStatusType
}

func (o SubjectAccessReviewStatusOutput) Allowed() pulumi.BoolOutput {
	return o.Apply(func(v SubjectAccessReviewStatus) bool {
		return v.Allowed
	}).(pulumi.BoolOutput)
}

func (o SubjectAccessReviewStatusOutput) Denied() pulumi.BoolOutput {
	return o.Apply(func(v SubjectAccessReviewStatus) *bool {
		return v.Denied
	}).(pulumi.BoolOutput)
}

func (o SubjectAccessReviewStatusOutput) EvaluationError() pulumi.StringOutput {
	return o.Apply(func(v SubjectAccessReviewStatus) *string {
		return v.EvaluationError
	}).(pulumi.StringOutput)
}

func (o SubjectAccessReviewStatusOutput) Reason() pulumi.StringOutput {
	return o.Apply(func(v SubjectAccessReviewStatus) *string {
		return v.Reason
	}).(pulumi.StringOutput)
}

