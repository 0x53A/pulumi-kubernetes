// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	coreV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/core/v1"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in
// the system.
type Event struct {
	pulumi.CustomResourceState

	// What action was taken/failed regarding to the regarding object.
	Action pulumi.StringOutput `pulumi:"action"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedCount pulumi.IntOutput `pulumi:"deprecatedCount"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedFirstTimestamp pulumi.StringOutput `pulumi:"deprecatedFirstTimestamp"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedLastTimestamp pulumi.StringOutput `pulumi:"deprecatedLastTimestamp"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedSource coreV1.EventSourceOutput `pulumi:"deprecatedSource"`

	// Required. Time when this Event was first observed.
	EventTime pulumi.StringOutput `pulumi:"eventTime"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Optional. A human-readable description of the status of this operation. Maximal length of the
	// note is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note pulumi.StringOutput `pulumi:"note"`

	// Why the action was taken.
	Reason pulumi.StringOutput `pulumi:"reason"`

	// The object this Event is about. In most cases it's an Object reporting controller implements.
	// E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on
	// some changes in a ReplicaSet object.
	Regarding coreV1.ObjectReferenceOutput `pulumi:"regarding"`

	// Optional secondary object for more complex actions. E.g. when regarding object triggers a
	// creation or deletion of related object.
	Related coreV1.ObjectReferenceOutput `pulumi:"related"`

	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingController pulumi.StringOutput `pulumi:"reportingController"`

	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance pulumi.StringOutput `pulumi:"reportingInstance"`

	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series EventSeriesOutput `pulumi:"series"`

	// Type of this event (Normal, Warning), new types could be added in the future.
	Type pulumi.StringOutput `pulumi:"type"`

}

// EventArgs is the set of arguments needed to create a Event resource.
type EventArgs struct {
	// Required. Time when this Event was first observed.
	EventTime pulumi.StringInput `pulumi:"eventTime"`

	// What action was taken/failed regarding to the regarding object.
	Action pulumi.StringInput `pulumi:"action"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedCount pulumi.IntInput `pulumi:"deprecatedCount"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedFirstTimestamp pulumi.StringInput `pulumi:"deprecatedFirstTimestamp"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedLastTimestamp pulumi.StringInput `pulumi:"deprecatedLastTimestamp"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedSource coreV1.EventSourceInput `pulumi:"deprecatedSource"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Optional. A human-readable description of the status of this operation. Maximal length of the
	// note is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note pulumi.StringInput `pulumi:"note"`

	// Why the action was taken.
	Reason pulumi.StringInput `pulumi:"reason"`

	// The object this Event is about. In most cases it's an Object reporting controller implements.
	// E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on
	// some changes in a ReplicaSet object.
	Regarding coreV1.ObjectReferenceInput `pulumi:"regarding"`

	// Optional secondary object for more complex actions. E.g. when regarding object triggers a
	// creation or deletion of related object.
	Related coreV1.ObjectReferenceInput `pulumi:"related"`

	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingController pulumi.StringInput `pulumi:"reportingController"`

	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance pulumi.StringInput `pulumi:"reportingInstance"`

	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series EventSeriesInput `pulumi:"series"`

	// Type of this event (Normal, Warning), new types could be added in the future.
	Type pulumi.StringInput `pulumi:"type"`

}

// NewEvent creates a Event resource with the given unique name, arguments, and options.
func NewEvent(ctx *pulumi.Context, name string, args *EventArgs, opts ...pulumi.ResourceOption) (*Event, error) {
	inputs := map[string]pulumi.Input{}
	if args == nil || args.EventTime == nil {
		return nil, errors.New("missing required argument 'EventTime'")
	}
	if args != nil {
		args.ApiVersion = pulumi.String("events.k8s.io/v1beta1")
		args.Kind = pulumi.String("Event")
		inputs["eventTime"] = args.EventTime.ToStringOutput()
		if i := args.Action; i != nil {
			inputs["action"] = i.ToStringOutput()
		}
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.DeprecatedCount; i != nil {
			inputs["deprecatedCount"] = i.ToIntOutput()
		}
		if i := args.DeprecatedFirstTimestamp; i != nil {
			inputs["deprecatedFirstTimestamp"] = i.ToStringOutput()
		}
		if i := args.DeprecatedLastTimestamp; i != nil {
			inputs["deprecatedLastTimestamp"] = i.ToStringOutput()
		}
		if i := args.DeprecatedSource; i != nil {
			inputs["deprecatedSource"] = i.ToEventSourceOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Note; i != nil {
			inputs["note"] = i.ToStringOutput()
		}
		if i := args.Reason; i != nil {
			inputs["reason"] = i.ToStringOutput()
		}
		if i := args.Regarding; i != nil {
			inputs["regarding"] = i.ToObjectReferenceOutput()
		}
		if i := args.Related; i != nil {
			inputs["related"] = i.ToObjectReferenceOutput()
		}
		if i := args.ReportingController; i != nil {
			inputs["reportingController"] = i.ToStringOutput()
		}
		if i := args.ReportingInstance; i != nil {
			inputs["reportingInstance"] = i.ToStringOutput()
		}
		if i := args.Series; i != nil {
			inputs["series"] = i.ToEventSeriesOutput()
		}
		if i := args.Type; i != nil {
			inputs["type"] = i.ToStringOutput()
		}
	}
	var resource Event
	err := ctx.RegisterResource("kubernetes:events.k8s.io/v1beta1:Event", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvent gets an existing Event resource's state with the given name and ID.
func GetEvent(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Event, error) {
	var resource Event
	err := ctx.ReadResource("kubernetes:events.k8s.io/v1beta1:Event", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in
// the system.
type EventProperty struct {
	// What action was taken/failed regarding to the regarding object.
	Action *string `pulumi:"action"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedCount *int `pulumi:"deprecatedCount"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedFirstTimestamp *string `pulumi:"deprecatedFirstTimestamp"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedLastTimestamp *string `pulumi:"deprecatedLastTimestamp"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedSource *coreV1.EventSource `pulumi:"deprecatedSource"`

	// Required. Time when this Event was first observed.
	EventTime string `pulumi:"eventTime"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Optional. A human-readable description of the status of this operation. Maximal length of the
	// note is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note *string `pulumi:"note"`

	// Why the action was taken.
	Reason *string `pulumi:"reason"`

	// The object this Event is about. In most cases it's an Object reporting controller implements.
	// E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on
	// some changes in a ReplicaSet object.
	Regarding *coreV1.ObjectReference `pulumi:"regarding"`

	// Optional secondary object for more complex actions. E.g. when regarding object triggers a
	// creation or deletion of related object.
	Related *coreV1.ObjectReference `pulumi:"related"`

	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingController *string `pulumi:"reportingController"`

	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `pulumi:"reportingInstance"`

	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series *EventSeries `pulumi:"series"`

	// Type of this event (Normal, Warning), new types could be added in the future.
	Type *string `pulumi:"type"`

}

var _EventPropertyType = reflect.TypeOf((*EventProperty)(nil)).Elem()

// EventPropertyInput represents an input type that resolves to a EventProperty.
type EventPropertyInput interface {
	ElementType() reflect.Type

	ToEventPropertyOutput() EventPropertyOutput
	ToEventPropertyOutputWithContext(ctx context.Context) EventPropertyOutput
}

// EventPropertyArgs is a EventPropertyInput whose fields are all Input types.
type EventPropertyArgs struct {
	// Required. Time when this Event was first observed.
	EventTime pulumi.StringInput `pulumi:"eventTime"`

	// What action was taken/failed regarding to the regarding object.
	Action pulumi.StringInput `pulumi:"action"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedCount pulumi.IntInput `pulumi:"deprecatedCount"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedFirstTimestamp pulumi.StringInput `pulumi:"deprecatedFirstTimestamp"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedLastTimestamp pulumi.StringInput `pulumi:"deprecatedLastTimestamp"`

	// Deprecated field assuring backward compatibility with core.v1 Event type
	DeprecatedSource coreV1.EventSourceInput `pulumi:"deprecatedSource"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Optional. A human-readable description of the status of this operation. Maximal length of the
	// note is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note pulumi.StringInput `pulumi:"note"`

	// Why the action was taken.
	Reason pulumi.StringInput `pulumi:"reason"`

	// The object this Event is about. In most cases it's an Object reporting controller implements.
	// E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on
	// some changes in a ReplicaSet object.
	Regarding coreV1.ObjectReferenceInput `pulumi:"regarding"`

	// Optional secondary object for more complex actions. E.g. when regarding object triggers a
	// creation or deletion of related object.
	Related coreV1.ObjectReferenceInput `pulumi:"related"`

	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingController pulumi.StringInput `pulumi:"reportingController"`

	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance pulumi.StringInput `pulumi:"reportingInstance"`

	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series EventSeriesInput `pulumi:"series"`

	// Type of this event (Normal, Warning), new types could be added in the future.
	Type pulumi.StringInput `pulumi:"type"`

}

func (a EventPropertyArgs) ElementType() reflect.Type {
	return _EventPropertyType
}

func (a EventPropertyArgs) ToEventPropertyOutput() EventPropertyOutput {
	return pulumi.ToOutput(a).(EventPropertyOutput)
}

func (a EventPropertyArgs) ToEventPropertyOutputWithContext(ctx context.Context) EventPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EventPropertyOutput)
}

// EventPropertyOutput is an output type that resolves to a Input.
type EventPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(EventPropertyOutput{}) }

func (EventPropertyOutput) ElementType() reflect.Type {
	return _EventPropertyType
}

func (o EventPropertyOutput) Action() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.Action
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) DeprecatedCount() pulumi.IntOutput {
	return o.Apply(func(v EventProperty) *int {
		return v.DeprecatedCount
	}).(pulumi.IntOutput)
}

func (o EventPropertyOutput) DeprecatedFirstTimestamp() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.DeprecatedFirstTimestamp
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) DeprecatedLastTimestamp() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.DeprecatedLastTimestamp
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) DeprecatedSource() coreV1.EventSourceOutput {
	return o.Apply(func(v EventProperty) *coreV1.EventSource {
		return v.DeprecatedSource
	}).(coreV1.EventSourceOutput)
}

func (o EventPropertyOutput) EventTime() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) string {
		return v.EventTime
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v EventProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o EventPropertyOutput) Note() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.Note
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) Reason() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.Reason
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) Regarding() coreV1.ObjectReferenceOutput {
	return o.Apply(func(v EventProperty) *coreV1.ObjectReference {
		return v.Regarding
	}).(coreV1.ObjectReferenceOutput)
}

func (o EventPropertyOutput) Related() coreV1.ObjectReferenceOutput {
	return o.Apply(func(v EventProperty) *coreV1.ObjectReference {
		return v.Related
	}).(coreV1.ObjectReferenceOutput)
}

func (o EventPropertyOutput) ReportingController() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.ReportingController
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) ReportingInstance() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.ReportingInstance
	}).(pulumi.StringOutput)
}

func (o EventPropertyOutput) Series() EventSeriesOutput {
	return o.Apply(func(v EventProperty) *EventSeries {
		return v.Series
	}).(EventSeriesOutput)
}

func (o EventPropertyOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v EventProperty) *string {
		return v.Type
	}).(pulumi.StringOutput)
}

var _EventPropertyArrayType = reflect.TypeOf((*[]EventProperty)(nil)).Elem()

type EventPropertyArrayInput interface {
	ElementType() reflect.Type

	ToEventPropertyArrayOutput() EventPropertyArrayOutput
	ToEventPropertyArrayOutputWithContext(ctx context.Context) EventPropertyArrayOutput
}

type EventPropertyArray []EventPropertyInput

func (a EventPropertyArray) ElementType() reflect.Type {
	return _EventPropertyArrayType
}

func (a EventPropertyArray) ToEventPropertyArrayOutput() EventPropertyArrayOutput {
	return pulumi.ToOutput(a).(EventPropertyArrayOutput)
}

func (a EventPropertyArray) ToEventPropertyArrayOutputWithContext(ctx context.Context) EventPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EventPropertyArrayOutput)
}

type EventPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(EventPropertyArrayOutput{}) }

func (EventPropertyArrayOutput) ElementType() reflect.Type {
	return _EventPropertyArrayType
}

func (o EventPropertyArrayOutput) Index(i pulumi.IntInput) EventPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) EventProperty {
		return vs[0].([]EventProperty)[vs[1].(int)]
	}).(EventPropertyOutput)
}
