// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to
// use. It requires the path prefix to be defined.
type AllowedHostPath struct {
	// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing
	// slashes are trimmed when validating the path prefix with a host path.
	// 
	// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or
	// `/etc/foo`
	PathPrefix *string `pulumi:"pathPrefix"`

	// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are
	// readOnly.
	ReadOnly *bool `pulumi:"readOnly"`

}

var _AllowedHostPathType = reflect.TypeOf((*AllowedHostPath)(nil)).Elem()

// AllowedHostPathInput represents an input type that resolves to a AllowedHostPath.
type AllowedHostPathInput interface {
	ElementType() reflect.Type

	ToAllowedHostPathOutput() AllowedHostPathOutput
	ToAllowedHostPathOutputWithContext(ctx context.Context) AllowedHostPathOutput
}

// AllowedHostPathArgs is a AllowedHostPathInput whose fields are all Input types.
type AllowedHostPathArgs struct {
	// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing
	// slashes are trimmed when validating the path prefix with a host path.
	// 
	// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or
	// `/etc/foo`
	PathPrefix pulumi.StringInput `pulumi:"pathPrefix"`

	// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are
	// readOnly.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`

}

func (a AllowedHostPathArgs) ElementType() reflect.Type {
	return _AllowedHostPathType
}

func (a AllowedHostPathArgs) ToAllowedHostPathOutput() AllowedHostPathOutput {
	return pulumi.ToOutput(a).(AllowedHostPathOutput)
}

func (a AllowedHostPathArgs) ToAllowedHostPathOutputWithContext(ctx context.Context) AllowedHostPathOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AllowedHostPathOutput)
}

// AllowedHostPathOutput is an output type that resolves to a Input.
type AllowedHostPathOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(AllowedHostPathOutput{}) }

func (AllowedHostPathOutput) ElementType() reflect.Type {
	return _AllowedHostPathType
}

func (o AllowedHostPathOutput) PathPrefix() pulumi.StringOutput {
	return o.Apply(func(v AllowedHostPath) *string {
		return v.PathPrefix
	}).(pulumi.StringOutput)
}

func (o AllowedHostPathOutput) ReadOnly() pulumi.BoolOutput {
	return o.Apply(func(v AllowedHostPath) *bool {
		return v.ReadOnly
	}).(pulumi.BoolOutput)
}

var _AllowedHostPathArrayType = reflect.TypeOf((*[]AllowedHostPath)(nil)).Elem()

type AllowedHostPathArrayInput interface {
	ElementType() reflect.Type

	ToAllowedHostPathArrayOutput() AllowedHostPathArrayOutput
	ToAllowedHostPathArrayOutputWithContext(ctx context.Context) AllowedHostPathArrayOutput
}

type AllowedHostPathArray []AllowedHostPathInput

func (a AllowedHostPathArray) ElementType() reflect.Type {
	return _AllowedHostPathArrayType
}

func (a AllowedHostPathArray) ToAllowedHostPathArrayOutput() AllowedHostPathArrayOutput {
	return pulumi.ToOutput(a).(AllowedHostPathArrayOutput)
}

func (a AllowedHostPathArray) ToAllowedHostPathArrayOutputWithContext(ctx context.Context) AllowedHostPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AllowedHostPathArrayOutput)
}

type AllowedHostPathArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(AllowedHostPathArrayOutput{}) }

func (AllowedHostPathArrayOutput) ElementType() reflect.Type {
	return _AllowedHostPathArrayType
}

func (o AllowedHostPathArrayOutput) Index(i pulumi.IntInput) AllowedHostPathOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) AllowedHostPath {
		return vs[0].([]AllowedHostPath)[vs[1].(int)]
	}).(AllowedHostPathOutput)
}
