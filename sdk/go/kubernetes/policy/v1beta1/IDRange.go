// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// IDRange provides a min/max of an allowed range of IDs.
type IDRange struct {
	// max is the end of the range, inclusive.
	Max int `pulumi:"max"`

	// min is the start of the range, inclusive.
	Min int `pulumi:"min"`

}

var _IDRangeType = reflect.TypeOf((*IDRange)(nil)).Elem()

// IDRangeInput represents an input type that resolves to a IDRange.
type IDRangeInput interface {
	ElementType() reflect.Type

	ToIDRangeOutput() IDRangeOutput
	ToIDRangeOutputWithContext(ctx context.Context) IDRangeOutput
}

// IDRangeArgs is a IDRangeInput whose fields are all Input types.
type IDRangeArgs struct {
	// max is the end of the range, inclusive.
	Max pulumi.IntInput `pulumi:"max"`

	// min is the start of the range, inclusive.
	Min pulumi.IntInput `pulumi:"min"`

}

func (a IDRangeArgs) ElementType() reflect.Type {
	return _IDRangeType
}

func (a IDRangeArgs) ToIDRangeOutput() IDRangeOutput {
	return pulumi.ToOutput(a).(IDRangeOutput)
}

func (a IDRangeArgs) ToIDRangeOutputWithContext(ctx context.Context) IDRangeOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IDRangeOutput)
}

// IDRangeOutput is an output type that resolves to a Input.
type IDRangeOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(IDRangeOutput{}) }

func (IDRangeOutput) ElementType() reflect.Type {
	return _IDRangeType
}

func (o IDRangeOutput) Max() pulumi.IntOutput {
	return o.Apply(func(v IDRange) int {
		return v.Max
	}).(pulumi.IntOutput)
}

func (o IDRangeOutput) Min() pulumi.IntOutput {
	return o.Apply(func(v IDRange) int {
		return v.Min
	}).(pulumi.IntOutput)
}

var _IDRangeArrayType = reflect.TypeOf((*[]IDRange)(nil)).Elem()

type IDRangeArrayInput interface {
	ElementType() reflect.Type

	ToIDRangeArrayOutput() IDRangeArrayOutput
	ToIDRangeArrayOutputWithContext(ctx context.Context) IDRangeArrayOutput
}

type IDRangeArray []IDRangeInput

func (a IDRangeArray) ElementType() reflect.Type {
	return _IDRangeArrayType
}

func (a IDRangeArray) ToIDRangeArrayOutput() IDRangeArrayOutput {
	return pulumi.ToOutput(a).(IDRangeArrayOutput)
}

func (a IDRangeArray) ToIDRangeArrayOutputWithContext(ctx context.Context) IDRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IDRangeArrayOutput)
}

type IDRangeArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(IDRangeArrayOutput{}) }

func (IDRangeArrayOutput) ElementType() reflect.Type {
	return _IDRangeArrayType
}

func (o IDRangeArrayOutput) Index(i pulumi.IntInput) IDRangeOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) IDRange {
		return vs[0].([]IDRange)[vs[1].(int)]
	}).(IDRangeOutput)
}
