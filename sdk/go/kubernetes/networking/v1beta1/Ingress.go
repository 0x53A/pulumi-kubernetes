// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by
// a backend. An Ingress can be configured to give services externally-reachable urls, load balance
// traffic, terminate SSL, offer name based virtual hosting etc.
// 
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
// 
// 1.  Ingress object exists.
// 2.  Endpoint objects exist with matching names for each Ingress path (except when Service
//     type is ExternalName).
// 3.  Ingress entry exists for '.status.loadBalancer.ingress'.
// 
// If the Ingress has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type Ingress struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaOutput `pulumi:"metadata"`

	// Spec is the desired state of the Ingress. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IngressSpecOutput `pulumi:"spec"`

	// Status is the current state of the Ingress. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status IngressStatusOutput `pulumi:"status"`

}

// IngressArgs is the set of arguments needed to create a Ingress resource.
type IngressArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec is the desired state of the Ingress. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IngressSpecInput `pulumi:"spec"`

}

// NewIngress creates a Ingress resource with the given unique name, arguments, and options.
func NewIngress(ctx *pulumi.Context, name string, args *IngressArgs, opts ...pulumi.ResourceOption) (*Ingress, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		args.ApiVersion = pulumi.String("networking.k8s.io/v1beta1")
		args.Kind = pulumi.String("Ingress")
		if i := args.ApiVersion; i != nil {
			inputs["apiVersion"] = i.ToStringOutput()
		}
		if i := args.Kind; i != nil {
			inputs["kind"] = i.ToStringOutput()
		}
		if i := args.Metadata; i != nil {
			inputs["metadata"] = i.ToObjectMetaOutput()
		}
		if i := args.Spec; i != nil {
			inputs["spec"] = i.ToIngressSpecOutput()
		}
	}
	var resource Ingress
	err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1beta1:Ingress", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngress gets an existing Ingress resource's state with the given name and ID.
func GetIngress(ctx *pulumi.Context, name string, id pulumi.IDInput, opts ...pulumi.ResourceOption) (*Ingress, error) {
	var resource Ingress
	err := ctx.ReadResource("kubernetes:networking.k8s.io/v1beta1:Ingress", name, id, nil, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by
// a backend. An Ingress can be configured to give services externally-reachable urls, load balance
// traffic, terminate SSL, offer name based virtual hosting etc.
type IngressProperty struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metaV1.ObjectMeta `pulumi:"metadata"`

	// Spec is the desired state of the Ingress. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *IngressSpec `pulumi:"spec"`

	// Status is the current state of the Ingress. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status IngressStatus `pulumi:"status"`

}

var _IngressPropertyType = reflect.TypeOf((*IngressProperty)(nil)).Elem()

// IngressPropertyInput represents an input type that resolves to a IngressProperty.
type IngressPropertyInput interface {
	ElementType() reflect.Type

	ToIngressPropertyOutput() IngressPropertyOutput
	ToIngressPropertyOutputWithContext(ctx context.Context) IngressPropertyOutput
}

// IngressPropertyArgs is a IngressPropertyInput whose fields are all Input types.
type IngressPropertyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
	// info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`

	// Standard object's metadata. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metaV1.ObjectMetaInput `pulumi:"metadata"`

	// Spec is the desired state of the Ingress. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IngressSpecInput `pulumi:"spec"`

}

func (a IngressPropertyArgs) ElementType() reflect.Type {
	return _IngressPropertyType
}

func (a IngressPropertyArgs) ToIngressPropertyOutput() IngressPropertyOutput {
	return pulumi.ToOutput(a).(IngressPropertyOutput)
}

func (a IngressPropertyArgs) ToIngressPropertyOutputWithContext(ctx context.Context) IngressPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IngressPropertyOutput)
}

// IngressPropertyOutput is an output type that resolves to a Input.
type IngressPropertyOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(IngressPropertyOutput{}) }

func (IngressPropertyOutput) ElementType() reflect.Type {
	return _IngressPropertyType
}

func (o IngressPropertyOutput) ApiVersion() pulumi.StringOutput {
	return o.Apply(func(v IngressProperty) *string {
		return v.ApiVersion
	}).(pulumi.StringOutput)
}

func (o IngressPropertyOutput) Kind() pulumi.StringOutput {
	return o.Apply(func(v IngressProperty) *string {
		return v.Kind
	}).(pulumi.StringOutput)
}

func (o IngressPropertyOutput) Metadata() metaV1.ObjectMetaOutput {
	return o.Apply(func(v IngressProperty) *metaV1.ObjectMeta {
		return v.Metadata
	}).(metaV1.ObjectMetaOutput)
}

func (o IngressPropertyOutput) Spec() IngressSpecOutput {
	return o.Apply(func(v IngressProperty) *IngressSpec {
		return v.Spec
	}).(IngressSpecOutput)
}

func (o IngressPropertyOutput) Status() IngressStatusOutput {
	return o.Apply(func(v IngressProperty) IngressStatus {
		return v.Status
	}).(IngressStatusOutput)
}

var _IngressPropertyArrayType = reflect.TypeOf((*[]IngressProperty)(nil)).Elem()

type IngressPropertyArrayInput interface {
	ElementType() reflect.Type

	ToIngressPropertyArrayOutput() IngressPropertyArrayOutput
	ToIngressPropertyArrayOutputWithContext(ctx context.Context) IngressPropertyArrayOutput
}

type IngressPropertyArray []IngressPropertyInput

func (a IngressPropertyArray) ElementType() reflect.Type {
	return _IngressPropertyArrayType
}

func (a IngressPropertyArray) ToIngressPropertyArrayOutput() IngressPropertyArrayOutput {
	return pulumi.ToOutput(a).(IngressPropertyArrayOutput)
}

func (a IngressPropertyArray) ToIngressPropertyArrayOutputWithContext(ctx context.Context) IngressPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IngressPropertyArrayOutput)
}

type IngressPropertyArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(IngressPropertyArrayOutput{}) }

func (IngressPropertyArrayOutput) ElementType() reflect.Type {
	return _IngressPropertyArrayType
}

func (o IngressPropertyArrayOutput) Index(i pulumi.IntInput) IngressPropertyOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) IngressProperty {
		return vs[0].([]IngressProperty)[vs[1].(int)]
	}).(IngressPropertyOutput)
}
