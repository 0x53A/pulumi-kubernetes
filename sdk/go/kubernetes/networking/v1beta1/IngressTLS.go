// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// IngressTLS describes the transport layer security associated with an Ingress.
type IngressTLS struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match
	// the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer
	// controller fulfilling this Ingress, if left unspecified.
	Hosts []string `pulumi:"hosts"`

	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left
	// optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener
	// conflicts with the "Host" header field used by an IngressRule, the SNI host is used for
	// termination and value of the Host header is used for routing.
	SecretName *string `pulumi:"secretName"`

}

var _IngressTLSType = reflect.TypeOf((*IngressTLS)(nil)).Elem()

// IngressTLSInput represents an input type that resolves to a IngressTLS.
type IngressTLSInput interface {
	ElementType() reflect.Type

	ToIngressTLSOutput() IngressTLSOutput
	ToIngressTLSOutputWithContext(ctx context.Context) IngressTLSOutput
}

// IngressTLSArgs is a IngressTLSInput whose fields are all Input types.
type IngressTLSArgs struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match
	// the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer
	// controller fulfilling this Ingress, if left unspecified.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`

	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left
	// optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener
	// conflicts with the "Host" header field used by an IngressRule, the SNI host is used for
	// termination and value of the Host header is used for routing.
	SecretName pulumi.StringInput `pulumi:"secretName"`

}

func (a IngressTLSArgs) ElementType() reflect.Type {
	return _IngressTLSType
}

func (a IngressTLSArgs) ToIngressTLSOutput() IngressTLSOutput {
	return pulumi.ToOutput(a).(IngressTLSOutput)
}

func (a IngressTLSArgs) ToIngressTLSOutputWithContext(ctx context.Context) IngressTLSOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IngressTLSOutput)
}

// IngressTLSOutput is an output type that resolves to a Input.
type IngressTLSOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(IngressTLSOutput{}) }

func (IngressTLSOutput) ElementType() reflect.Type {
	return _IngressTLSType
}

func (o IngressTLSOutput) Hosts() pulumi.StringArrayOutput {
	return o.Apply(func(v IngressTLS) []string {
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

func (o IngressTLSOutput) SecretName() pulumi.StringOutput {
	return o.Apply(func(v IngressTLS) *string {
		return v.SecretName
	}).(pulumi.StringOutput)
}

var _IngressTLSArrayType = reflect.TypeOf((*[]IngressTLS)(nil)).Elem()

type IngressTLSArrayInput interface {
	ElementType() reflect.Type

	ToIngressTLSArrayOutput() IngressTLSArrayOutput
	ToIngressTLSArrayOutputWithContext(ctx context.Context) IngressTLSArrayOutput
}

type IngressTLSArray []IngressTLSInput

func (a IngressTLSArray) ElementType() reflect.Type {
	return _IngressTLSArrayType
}

func (a IngressTLSArray) ToIngressTLSArrayOutput() IngressTLSArrayOutput {
	return pulumi.ToOutput(a).(IngressTLSArrayOutput)
}

func (a IngressTLSArray) ToIngressTLSArrayOutputWithContext(ctx context.Context) IngressTLSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IngressTLSArrayOutput)
}

type IngressTLSArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(IngressTLSArrayOutput{}) }

func (IngressTLSArrayOutput) ElementType() reflect.Type {
	return _IngressTLSArrayType
}

func (o IngressTLSArrayOutput) Index(i pulumi.IntInput) IngressTLSOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) IngressTLS {
		return vs[0].([]IngressTLS)[vs[1].(int)]
	}).(IngressTLSOutput)
}
