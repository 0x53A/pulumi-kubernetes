// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	metaV1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
)

// NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are
// allowed
type NetworkPolicyPeer struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other
	// fields can be.
	IpBlock *IPBlock `pulumi:"ipBlock"`

	// Selects Namespaces using cluster-scoped labels. This field follows standard label selector
	// semantics; if present but empty, it selects all namespaces.
	// 
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching
	// PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in
	// the Namespaces selected by NamespaceSelector.
	NamespaceSelector *metaV1.LabelSelector `pulumi:"namespaceSelector"`

	// This is a label selector which selects Pods. This field follows standard label selector
	// semantics; if present but empty, it selects all pods.
	// 
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods
	// matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the
	// Pods matching PodSelector in the policy's own Namespace.
	PodSelector *metaV1.LabelSelector `pulumi:"podSelector"`

}

var _NetworkPolicyPeerType = reflect.TypeOf((*NetworkPolicyPeer)(nil)).Elem()

// NetworkPolicyPeerInput represents an input type that resolves to a NetworkPolicyPeer.
type NetworkPolicyPeerInput interface {
	ElementType() reflect.Type

	ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput
	ToNetworkPolicyPeerOutputWithContext(ctx context.Context) NetworkPolicyPeerOutput
}

// NetworkPolicyPeerArgs is a NetworkPolicyPeerInput whose fields are all Input types.
type NetworkPolicyPeerArgs struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other
	// fields can be.
	IpBlock IPBlockInput `pulumi:"ipBlock"`

	// Selects Namespaces using cluster-scoped labels. This field follows standard label selector
	// semantics; if present but empty, it selects all namespaces.
	// 
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching
	// PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in
	// the Namespaces selected by NamespaceSelector.
	NamespaceSelector metaV1.LabelSelectorInput `pulumi:"namespaceSelector"`

	// This is a label selector which selects Pods. This field follows standard label selector
	// semantics; if present but empty, it selects all pods.
	// 
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods
	// matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the
	// Pods matching PodSelector in the policy's own Namespace.
	PodSelector metaV1.LabelSelectorInput `pulumi:"podSelector"`

}

func (a NetworkPolicyPeerArgs) ElementType() reflect.Type {
	return _NetworkPolicyPeerType
}

func (a NetworkPolicyPeerArgs) ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput {
	return pulumi.ToOutput(a).(NetworkPolicyPeerOutput)
}

func (a NetworkPolicyPeerArgs) ToNetworkPolicyPeerOutputWithContext(ctx context.Context) NetworkPolicyPeerOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkPolicyPeerOutput)
}

// NetworkPolicyPeerOutput is an output type that resolves to a Input.
type NetworkPolicyPeerOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NetworkPolicyPeerOutput{}) }

func (NetworkPolicyPeerOutput) ElementType() reflect.Type {
	return _NetworkPolicyPeerType
}

func (o NetworkPolicyPeerOutput) IpBlock() IPBlockOutput {
	return o.Apply(func(v NetworkPolicyPeer) *IPBlock {
		return v.IpBlock
	}).(IPBlockOutput)
}

func (o NetworkPolicyPeerOutput) NamespaceSelector() metaV1.LabelSelectorOutput {
	return o.Apply(func(v NetworkPolicyPeer) *metaV1.LabelSelector {
		return v.NamespaceSelector
	}).(metaV1.LabelSelectorOutput)
}

func (o NetworkPolicyPeerOutput) PodSelector() metaV1.LabelSelectorOutput {
	return o.Apply(func(v NetworkPolicyPeer) *metaV1.LabelSelector {
		return v.PodSelector
	}).(metaV1.LabelSelectorOutput)
}

var _NetworkPolicyPeerArrayType = reflect.TypeOf((*[]NetworkPolicyPeer)(nil)).Elem()

type NetworkPolicyPeerArrayInput interface {
	ElementType() reflect.Type

	ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput
	ToNetworkPolicyPeerArrayOutputWithContext(ctx context.Context) NetworkPolicyPeerArrayOutput
}

type NetworkPolicyPeerArray []NetworkPolicyPeerInput

func (a NetworkPolicyPeerArray) ElementType() reflect.Type {
	return _NetworkPolicyPeerArrayType
}

func (a NetworkPolicyPeerArray) ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput {
	return pulumi.ToOutput(a).(NetworkPolicyPeerArrayOutput)
}

func (a NetworkPolicyPeerArray) ToNetworkPolicyPeerArrayOutputWithContext(ctx context.Context) NetworkPolicyPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkPolicyPeerArrayOutput)
}

type NetworkPolicyPeerArrayOutput struct { *pulumi.OutputState }

func init() { pulumi.RegisterOutputType(NetworkPolicyPeerArrayOutput{}) }

func (NetworkPolicyPeerArrayOutput) ElementType() reflect.Type {
	return _NetworkPolicyPeerArrayType
}

func (o NetworkPolicyPeerArrayOutput) Index(i pulumi.IntInput) NetworkPolicyPeerOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NetworkPolicyPeer {
		return vs[0].([]NetworkPolicyPeer)[vs[1].(int)]
	}).(NetworkPolicyPeerOutput)
}
