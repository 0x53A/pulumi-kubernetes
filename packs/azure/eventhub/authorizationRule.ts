// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class AuthorizationRule extends lumi.NamedResource implements AuthorizationRuleArgs {
    public readonly eventhubName: string;
    public readonly listen?: boolean;
    public readonly location: string;
    public readonly manage?: boolean;
    public readonly namespaceName: string;
    public readonly primaryConnectionString?: string;
    public readonly primaryKey?: string;
    public readonly resourceGroupName: string;
    public readonly secondaryConnectionString?: string;
    public readonly secondaryKey?: string;
    public readonly send?: boolean;

    constructor(name: string, args: AuthorizationRuleArgs) {
        super(name);
        if (args.eventhubName === undefined) {
            throw new Error("Property argument 'eventhubName' is required, but was missing");
        }
        this.eventhubName = args.eventhubName;
        this.listen = args.listen;
        if (args.location === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        this.manage = args.manage;
        if (args.namespaceName === undefined) {
            throw new Error("Property argument 'namespaceName' is required, but was missing");
        }
        this.namespaceName = args.namespaceName;
        if (args.primaryConnectionString === undefined) {
            throw new Error("Property argument 'primaryConnectionString' is required, but was missing");
        }
        this.primaryConnectionString = args.primaryConnectionString;
        if (args.primaryKey === undefined) {
            throw new Error("Property argument 'primaryKey' is required, but was missing");
        }
        this.primaryKey = args.primaryKey;
        if (args.resourceGroupName === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        if (args.secondaryConnectionString === undefined) {
            throw new Error("Property argument 'secondaryConnectionString' is required, but was missing");
        }
        this.secondaryConnectionString = args.secondaryConnectionString;
        if (args.secondaryKey === undefined) {
            throw new Error("Property argument 'secondaryKey' is required, but was missing");
        }
        this.secondaryKey = args.secondaryKey;
        this.send = args.send;
    }
}

export interface AuthorizationRuleArgs {
    readonly eventhubName: string;
    readonly listen?: boolean;
    readonly location: string;
    readonly manage?: boolean;
    readonly namespaceName: string;
    readonly primaryConnectionString?: string;
    readonly primaryKey?: string;
    readonly resourceGroupName: string;
    readonly secondaryConnectionString?: string;
    readonly secondaryKey?: string;
    readonly send?: boolean;
}

