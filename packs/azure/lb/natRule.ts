// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class NatRule extends lumi.NamedResource implements NatRuleArgs {
    public readonly backendIpConfigurationId?: string;
    public readonly backendPort: number;
    public readonly frontendIpConfigurationId?: string;
    public readonly frontendIpConfigurationName: string;
    public readonly frontendPort: number;
    public readonly loadbalancerId: string;
    public readonly location?: string;
    public readonly natRuleName?: string;
    public readonly protocol: string;
    public readonly resourceGroupName: string;

    constructor(name: string, args: NatRuleArgs) {
        super(name);
        this.backendIpConfigurationId = args.backendIpConfigurationId;
        if (args.backendPort === undefined) {
            throw new Error("Property argument 'backendPort' is required, but was missing");
        }
        this.backendPort = args.backendPort;
        this.frontendIpConfigurationId = args.frontendIpConfigurationId;
        if (args.frontendIpConfigurationName === undefined) {
            throw new Error("Property argument 'frontendIpConfigurationName' is required, but was missing");
        }
        this.frontendIpConfigurationName = args.frontendIpConfigurationName;
        if (args.frontendPort === undefined) {
            throw new Error("Property argument 'frontendPort' is required, but was missing");
        }
        this.frontendPort = args.frontendPort;
        if (args.loadbalancerId === undefined) {
            throw new Error("Property argument 'loadbalancerId' is required, but was missing");
        }
        this.loadbalancerId = args.loadbalancerId;
        this.location = args.location;
        this.natRuleName = args.natRuleName;
        if (args.protocol === undefined) {
            throw new Error("Property argument 'protocol' is required, but was missing");
        }
        this.protocol = args.protocol;
        if (args.resourceGroupName === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
    }
}

export interface NatRuleArgs {
    readonly backendIpConfigurationId?: string;
    readonly backendPort: number;
    readonly frontendIpConfigurationId?: string;
    readonly frontendIpConfigurationName: string;
    readonly frontendPort: number;
    readonly loadbalancerId: string;
    readonly location?: string;
    readonly natRuleName?: string;
    readonly protocol: string;
    readonly resourceGroupName: string;
}

