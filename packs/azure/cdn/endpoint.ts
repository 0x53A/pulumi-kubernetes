// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class Endpoint extends lumi.NamedResource implements EndpointArgs {
    public readonly contentTypesToCompress?: string[];
    public readonly hostName?: string;
    public readonly isCompressionEnabled?: boolean;
    public readonly isHttpAllowed?: boolean;
    public readonly isHttpsAllowed?: boolean;
    public readonly location: string;
    public readonly _name: string;
    public readonly origin: { hostName: string, httpPort?: number, httpsPort?: number, _name: string }[];
    public readonly originHostHeader?: string;
    public readonly originPath?: string;
    public readonly profileName: string;
    public readonly querystringCachingBehaviour?: string;
    public readonly resourceGroupName: string;
    public readonly tags?: {[key: string]: any};

    constructor(name: string, args: EndpointArgs) {
        super(name);
        this.contentTypesToCompress = args.contentTypesToCompress;
        this.hostName = args.hostName;
        this.isCompressionEnabled = args.isCompressionEnabled;
        this.isHttpAllowed = args.isHttpAllowed;
        this.isHttpsAllowed = args.isHttpsAllowed;
        this.location = args.location;
        this._name = args._name;
        this.origin = args.origin;
        this.originHostHeader = args.originHostHeader;
        this.originPath = args.originPath;
        this.profileName = args.profileName;
        this.querystringCachingBehaviour = args.querystringCachingBehaviour;
        this.resourceGroupName = args.resourceGroupName;
        this.tags = args.tags;
    }
}

export interface EndpointArgs {
    readonly contentTypesToCompress?: string[];
    readonly hostName?: string;
    readonly isCompressionEnabled?: boolean;
    readonly isHttpAllowed?: boolean;
    readonly isHttpsAllowed?: boolean;
    readonly location: string;
    readonly _name: string;
    readonly origin: { hostName: string, httpPort?: number, httpsPort?: number, _name: string }[];
    readonly originHostHeader?: string;
    readonly originPath?: string;
    readonly profileName: string;
    readonly querystringCachingBehaviour?: string;
    readonly resourceGroupName: string;
    readonly tags?: {[key: string]: any};
}

