// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class KeyVault extends lumi.NamedResource implements KeyVaultArgs {
    public readonly accessPolicy?: { keyPermissions: string[], objectId: string, secretPermissions: string[], tenantId: string }[];
    public readonly enabledForDeployment?: boolean;
    public readonly enabledForDiskEncryption?: boolean;
    public readonly enabledForTemplateDeployment?: boolean;
    public readonly location: string;
    public readonly keyVaultName?: string;
    public readonly resourceGroupName: string;
    public readonly sku: { name: string }[];
    public readonly tags?: {[key: string]: any};
    public readonly tenantId: string;
    public readonly vaultUri?: string;

    constructor(name: string, args: KeyVaultArgs) {
        super(name);
        this.accessPolicy = args.accessPolicy;
        this.enabledForDeployment = args.enabledForDeployment;
        this.enabledForDiskEncryption = args.enabledForDiskEncryption;
        this.enabledForTemplateDeployment = args.enabledForTemplateDeployment;
        if (args.location === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        this.keyVaultName = args.keyVaultName;
        if (args.resourceGroupName === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        if (args.sku === undefined) {
            throw new Error("Property argument 'sku' is required, but was missing");
        }
        this.sku = args.sku;
        this.tags = args.tags;
        if (args.tenantId === undefined) {
            throw new Error("Property argument 'tenantId' is required, but was missing");
        }
        this.tenantId = args.tenantId;
        this.vaultUri = args.vaultUri;
    }
}

export interface KeyVaultArgs {
    readonly accessPolicy?: { keyPermissions: string[], objectId: string, secretPermissions: string[], tenantId: string }[];
    readonly enabledForDeployment?: boolean;
    readonly enabledForDiskEncryption?: boolean;
    readonly enabledForTemplateDeployment?: boolean;
    readonly location: string;
    readonly keyVaultName?: string;
    readonly resourceGroupName: string;
    readonly sku: { name: string }[];
    readonly tags?: {[key: string]: any};
    readonly tenantId: string;
    readonly vaultUri?: string;
}

