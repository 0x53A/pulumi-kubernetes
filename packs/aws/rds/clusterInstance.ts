// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class ClusterInstance extends lumi.NamedResource implements ClusterInstanceArgs {
    public readonly applyImmediately?: boolean;
    public readonly autoMinorVersionUpgrade?: boolean;
    public readonly clusterIdentifier: string;
    public readonly dbParameterGroupName?: string;
    public readonly dbSubnetGroupName?: string;
    public readonly endpoint?: string;
    public readonly identifier?: string;
    public readonly identifierPrefix?: string;
    public readonly instanceClass: string;
    public readonly kmsKeyId?: string;
    public readonly monitoringInterval?: number;
    public readonly monitoringRoleArn?: string;
    public readonly port?: number;
    public readonly preferredBackupWindow?: string;
    public readonly preferredMaintenanceWindow?: string;
    public readonly promotionTier?: number;
    public readonly publiclyAccessible?: boolean;
    public readonly storageEncrypted?: boolean;
    public readonly tags?: {[key: string]: any};
    public readonly writer?: boolean;

    constructor(name: string, args: ClusterInstanceArgs) {
        super(name);
        this.applyImmediately = args.applyImmediately;
        this.autoMinorVersionUpgrade = args.autoMinorVersionUpgrade;
        if (args.clusterIdentifier === undefined) {
            throw new Error("Property argument 'clusterIdentifier' is required, but was missing");
        }
        this.clusterIdentifier = args.clusterIdentifier;
        this.dbParameterGroupName = args.dbParameterGroupName;
        this.dbSubnetGroupName = args.dbSubnetGroupName;
        if (args.endpoint === undefined) {
            throw new Error("Property argument 'endpoint' is required, but was missing");
        }
        this.endpoint = args.endpoint;
        this.identifier = args.identifier;
        this.identifierPrefix = args.identifierPrefix;
        if (args.instanceClass === undefined) {
            throw new Error("Property argument 'instanceClass' is required, but was missing");
        }
        this.instanceClass = args.instanceClass;
        if (args.kmsKeyId === undefined) {
            throw new Error("Property argument 'kmsKeyId' is required, but was missing");
        }
        this.kmsKeyId = args.kmsKeyId;
        this.monitoringInterval = args.monitoringInterval;
        this.monitoringRoleArn = args.monitoringRoleArn;
        if (args.port === undefined) {
            throw new Error("Property argument 'port' is required, but was missing");
        }
        this.port = args.port;
        this.preferredBackupWindow = args.preferredBackupWindow;
        this.preferredMaintenanceWindow = args.preferredMaintenanceWindow;
        this.promotionTier = args.promotionTier;
        this.publiclyAccessible = args.publiclyAccessible;
        if (args.storageEncrypted === undefined) {
            throw new Error("Property argument 'storageEncrypted' is required, but was missing");
        }
        this.storageEncrypted = args.storageEncrypted;
        this.tags = args.tags;
        if (args.writer === undefined) {
            throw new Error("Property argument 'writer' is required, but was missing");
        }
        this.writer = args.writer;
    }
}

export interface ClusterInstanceArgs {
    readonly applyImmediately?: boolean;
    readonly autoMinorVersionUpgrade?: boolean;
    readonly clusterIdentifier: string;
    readonly dbParameterGroupName?: string;
    readonly dbSubnetGroupName?: string;
    readonly endpoint?: string;
    readonly identifier?: string;
    readonly identifierPrefix?: string;
    readonly instanceClass: string;
    readonly kmsKeyId?: string;
    readonly monitoringInterval?: number;
    readonly monitoringRoleArn?: string;
    readonly port?: number;
    readonly preferredBackupWindow?: string;
    readonly preferredMaintenanceWindow?: string;
    readonly promotionTier?: number;
    readonly publiclyAccessible?: boolean;
    readonly storageEncrypted?: boolean;
    readonly tags?: {[key: string]: any};
    readonly writer?: boolean;
}

