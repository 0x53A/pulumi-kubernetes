// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class Key extends lumi.NamedResource implements KeyArgs {
    public readonly arn?: string;
    public readonly deletionWindowInDays?: number;
    public readonly description?: string;
    public readonly enableKeyRotation?: boolean;
    public readonly isEnabled?: boolean;
    public readonly keyId?: string;
    public readonly keyUsage?: string;
    public readonly policy?: string;
    public readonly tags?: {[key: string]: any};

    constructor(name: string, args: KeyArgs) {
        super(name);
        if (args.arn === undefined) {
            throw new Error("Property argument 'arn' is required, but was missing");
        }
        this.arn = args.arn;
        this.deletionWindowInDays = args.deletionWindowInDays;
        this.description = args.description;
        this.enableKeyRotation = args.enableKeyRotation;
        this.isEnabled = args.isEnabled;
        if (args.keyId === undefined) {
            throw new Error("Property argument 'keyId' is required, but was missing");
        }
        this.keyId = args.keyId;
        this.keyUsage = args.keyUsage;
        this.policy = args.policy;
        this.tags = args.tags;
    }
}

export interface KeyArgs {
    readonly arn?: string;
    readonly deletionWindowInDays?: number;
    readonly description?: string;
    readonly enableKeyRotation?: boolean;
    readonly isEnabled?: boolean;
    readonly keyId?: string;
    readonly keyUsage?: string;
    readonly policy?: string;
    readonly tags?: {[key: string]: any};
}

