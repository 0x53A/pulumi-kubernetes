// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class LoadBalancer extends lumi.NamedResource implements LoadBalancerArgs {
    public readonly accessLogs?: { bucket: string, enabled?: boolean, prefix?: string }[];
    public readonly arn?: string;
    public readonly arnSuffix?: string;
    public readonly dnsName?: string;
    public readonly enableDeletionProtection?: boolean;
    public readonly idleTimeout?: number;
    public readonly internal?: boolean;
    public readonly ipAddressType?: string;
    public readonly namePrefix?: string;
    public readonly securityGroups?: string[];
    public readonly subnets: string[];
    public readonly tags?: {[key: string]: any};
    public readonly vpcId?: string;
    public readonly zoneId?: string;

    constructor(name: string, args: LoadBalancerArgs) {
        super(name);
        this.accessLogs = args.accessLogs;
        if (args.arn === undefined) {
            throw new Error("Property argument 'arn' is required, but was missing");
        }
        this.arn = args.arn;
        if (args.arnSuffix === undefined) {
            throw new Error("Property argument 'arnSuffix' is required, but was missing");
        }
        this.arnSuffix = args.arnSuffix;
        if (args.dnsName === undefined) {
            throw new Error("Property argument 'dnsName' is required, but was missing");
        }
        this.dnsName = args.dnsName;
        this.enableDeletionProtection = args.enableDeletionProtection;
        this.idleTimeout = args.idleTimeout;
        this.internal = args.internal;
        this.ipAddressType = args.ipAddressType;
        this.namePrefix = args.namePrefix;
        this.securityGroups = args.securityGroups;
        if (args.subnets === undefined) {
            throw new Error("Property argument 'subnets' is required, but was missing");
        }
        this.subnets = args.subnets;
        this.tags = args.tags;
        if (args.vpcId === undefined) {
            throw new Error("Property argument 'vpcId' is required, but was missing");
        }
        this.vpcId = args.vpcId;
        if (args.zoneId === undefined) {
            throw new Error("Property argument 'zoneId' is required, but was missing");
        }
        this.zoneId = args.zoneId;
    }
}

export interface LoadBalancerArgs {
    readonly accessLogs?: { bucket: string, enabled?: boolean, prefix?: string }[];
    readonly arn?: string;
    readonly arnSuffix?: string;
    readonly dnsName?: string;
    readonly enableDeletionProtection?: boolean;
    readonly idleTimeout?: number;
    readonly internal?: boolean;
    readonly ipAddressType?: string;
    readonly namePrefix?: string;
    readonly securityGroups?: string[];
    readonly subnets: string[];
    readonly tags?: {[key: string]: any};
    readonly vpcId?: string;
    readonly zoneId?: string;
}

