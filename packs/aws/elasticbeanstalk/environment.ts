// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class Environment extends lumi.NamedResource implements EnvironmentArgs {
    public readonly allSettings?: { _name: string, namespace: string, resource?: string, value: string }[];
    public readonly application: string;
    public readonly autoscalingGroups?: string[];
    public readonly cname?: string;
    public readonly cnamePrefix?: string;
    public readonly description?: string;
    public readonly instances?: string[];
    public readonly launchConfigurations?: string[];
    public readonly loadBalancers?: string[];
    public readonly _name: string;
    public readonly pollInterval?: string;
    public readonly queues?: string[];
    public readonly setting?: { _name: string, namespace: string, resource?: string, value: string }[];
    public readonly solutionStackName?: string;
    public readonly tags?: {[key: string]: any};
    public readonly templateName?: string;
    public readonly tier?: string;
    public readonly triggers?: string[];
    public readonly versionLabel?: string;
    public readonly waitForReadyTimeout?: string;

    constructor(name: string, args: EnvironmentArgs) {
        super(name);
        this.allSettings = args.allSettings;
        this.application = args.application;
        this.autoscalingGroups = args.autoscalingGroups;
        this.cname = args.cname;
        this.cnamePrefix = args.cnamePrefix;
        this.description = args.description;
        this.instances = args.instances;
        this.launchConfigurations = args.launchConfigurations;
        this.loadBalancers = args.loadBalancers;
        this._name = args._name;
        this.pollInterval = args.pollInterval;
        this.queues = args.queues;
        this.setting = args.setting;
        this.solutionStackName = args.solutionStackName;
        this.tags = args.tags;
        this.templateName = args.templateName;
        this.tier = args.tier;
        this.triggers = args.triggers;
        this.versionLabel = args.versionLabel;
        this.waitForReadyTimeout = args.waitForReadyTimeout;
    }
}

export interface EnvironmentArgs {
    readonly allSettings?: { _name: string, namespace: string, resource?: string, value: string }[];
    readonly application: string;
    readonly autoscalingGroups?: string[];
    readonly cname?: string;
    readonly cnamePrefix?: string;
    readonly description?: string;
    readonly instances?: string[];
    readonly launchConfigurations?: string[];
    readonly loadBalancers?: string[];
    readonly _name: string;
    readonly pollInterval?: string;
    readonly queues?: string[];
    readonly setting?: { _name: string, namespace: string, resource?: string, value: string }[];
    readonly solutionStackName?: string;
    readonly tags?: {[key: string]: any};
    readonly templateName?: string;
    readonly tier?: string;
    readonly triggers?: string[];
    readonly versionLabel?: string;
    readonly waitForReadyTimeout?: string;
}

