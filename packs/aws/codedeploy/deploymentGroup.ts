// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class DeploymentGroup extends lumi.NamedResource implements DeploymentGroupArgs {
    public readonly alarmConfiguration?: { alarms?: string[], enabled?: boolean, ignorePollAlarmFailure?: boolean }[];
    public readonly appName: string;
    public readonly autoRollbackConfiguration?: { enabled?: boolean, events?: string[] }[];
    public readonly autoscalingGroups?: string[];
    public readonly deploymentConfigName?: string;
    public readonly deploymentGroupName: string;
    public readonly ec2TagFilter?: { key?: string, type?: string, value?: string }[];
    public readonly onPremisesInstanceTagFilter?: { key?: string, type?: string, value?: string }[];
    public readonly serviceRoleArn: string;
    public readonly triggerConfiguration?: { triggerEvents: string[], triggerName: string, triggerTargetArn: string }[];

    constructor(name: string, args: DeploymentGroupArgs) {
        super(name);
        this.alarmConfiguration = args.alarmConfiguration;
        this.appName = args.appName;
        this.autoRollbackConfiguration = args.autoRollbackConfiguration;
        this.autoscalingGroups = args.autoscalingGroups;
        this.deploymentConfigName = args.deploymentConfigName;
        this.deploymentGroupName = args.deploymentGroupName;
        this.ec2TagFilter = args.ec2TagFilter;
        this.onPremisesInstanceTagFilter = args.onPremisesInstanceTagFilter;
        this.serviceRoleArn = args.serviceRoleArn;
        this.triggerConfiguration = args.triggerConfiguration;
    }
}

export interface DeploymentGroupArgs {
    readonly alarmConfiguration?: { alarms?: string[], enabled?: boolean, ignorePollAlarmFailure?: boolean }[];
    readonly appName: string;
    readonly autoRollbackConfiguration?: { enabled?: boolean, events?: string[] }[];
    readonly autoscalingGroups?: string[];
    readonly deploymentConfigName?: string;
    readonly deploymentGroupName: string;
    readonly ec2TagFilter?: { key?: string, type?: string, value?: string }[];
    readonly onPremisesInstanceTagFilter?: { key?: string, type?: string, value?: string }[];
    readonly serviceRoleArn: string;
    readonly triggerConfiguration?: { triggerEvents: string[], triggerName: string, triggerTargetArn: string }[];
}

