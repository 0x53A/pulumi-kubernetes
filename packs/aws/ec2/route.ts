// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class Route extends lumi.NamedResource implements RouteArgs {
    public readonly destinationCidrBlock?: string;
    public readonly destinationIpv6CidrBlock?: string;
    public readonly destinationPrefixListId?: string;
    public readonly egressOnlyGatewayId?: string;
    public readonly gatewayId?: string;
    public readonly instanceId?: string;
    public readonly instanceOwnerId?: string;
    public readonly natGatewayId?: string;
    public readonly networkInterfaceId?: string;
    public readonly origin?: string;
    public readonly routeTableId: string;
    public readonly state?: string;
    public readonly vpcPeeringConnectionId?: string;

    constructor(name: string, args: RouteArgs) {
        super(name);
        this.destinationCidrBlock = args.destinationCidrBlock;
        this.destinationIpv6CidrBlock = args.destinationIpv6CidrBlock;
        if (args.destinationPrefixListId === undefined) {
            throw new Error("Property argument 'destinationPrefixListId' is required, but was missing");
        }
        this.destinationPrefixListId = args.destinationPrefixListId;
        this.egressOnlyGatewayId = args.egressOnlyGatewayId;
        this.gatewayId = args.gatewayId;
        this.instanceId = args.instanceId;
        if (args.instanceOwnerId === undefined) {
            throw new Error("Property argument 'instanceOwnerId' is required, but was missing");
        }
        this.instanceOwnerId = args.instanceOwnerId;
        this.natGatewayId = args.natGatewayId;
        this.networkInterfaceId = args.networkInterfaceId;
        if (args.origin === undefined) {
            throw new Error("Property argument 'origin' is required, but was missing");
        }
        this.origin = args.origin;
        if (args.routeTableId === undefined) {
            throw new Error("Property argument 'routeTableId' is required, but was missing");
        }
        this.routeTableId = args.routeTableId;
        if (args.state === undefined) {
            throw new Error("Property argument 'state' is required, but was missing");
        }
        this.state = args.state;
        this.vpcPeeringConnectionId = args.vpcPeeringConnectionId;
    }
}

export interface RouteArgs {
    readonly destinationCidrBlock?: string;
    readonly destinationIpv6CidrBlock?: string;
    readonly destinationPrefixListId?: string;
    readonly egressOnlyGatewayId?: string;
    readonly gatewayId?: string;
    readonly instanceId?: string;
    readonly instanceOwnerId?: string;
    readonly natGatewayId?: string;
    readonly networkInterfaceId?: string;
    readonly origin?: string;
    readonly routeTableId: string;
    readonly state?: string;
    readonly vpcPeeringConnectionId?: string;
}

