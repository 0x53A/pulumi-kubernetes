// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class Project extends lumi.NamedResource implements ProjectArgs {
    public readonly artifacts: { location?: string, namespaceType?: string, packaging?: string, path?: string, type: string }[];
    public readonly buildTimeout?: number;
    public readonly description?: string;
    public readonly encryptionKey?: string;
    public readonly environment: { computeType: string, environmentVariable?: { value: string }[], image: string, privilegedMode?: boolean, type: string }[];
    public readonly serviceRole?: string;
    public readonly source: { auth?: { resource?: string, type: string }[], buildspec?: string, location?: string, type: string }[];
    public readonly tags?: {[key: string]: any};

    constructor(name: string, args: ProjectArgs) {
        super(name);
        if (args.artifacts === undefined) {
            throw new Error("Property argument 'artifacts' is required, but was missing");
        }
        this.artifacts = args.artifacts;
        this.buildTimeout = args.buildTimeout;
        this.description = args.description;
        this.encryptionKey = args.encryptionKey;
        if (args.environment === undefined) {
            throw new Error("Property argument 'environment' is required, but was missing");
        }
        this.environment = args.environment;
        this.serviceRole = args.serviceRole;
        if (args.source === undefined) {
            throw new Error("Property argument 'source' is required, but was missing");
        }
        this.source = args.source;
        this.tags = args.tags;
    }
}

export interface ProjectArgs {
    readonly artifacts: { location?: string, namespaceType?: string, packaging?: string, path?: string, type: string }[];
    readonly buildTimeout?: number;
    readonly description?: string;
    readonly encryptionKey?: string;
    readonly environment: { computeType: string, environmentVariable?: { value: string }[], image: string, privilegedMode?: boolean, type: string }[];
    readonly serviceRole?: string;
    readonly source: { auth?: { resource?: string, type: string }[], buildspec?: string, location?: string, type: string }[];
    readonly tags?: {[key: string]: any};
}

