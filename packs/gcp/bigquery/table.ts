// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export class Table extends lumi.NamedResource implements TableArgs {
    public readonly creationTime?: number;
    public readonly datasetId: string;
    public readonly description?: string;
    public readonly etag?: string;
    public readonly expirationTime?: number;
    public readonly friendlyName?: string;
    public readonly labels?: {[key: string]: string};
    public readonly lastModifiedTime?: number;
    public readonly location?: string;
    public readonly numBytes?: number;
    public readonly numLongTermBytes?: number;
    public readonly numRows?: number;
    public readonly project?: string;
    public readonly schema?: string;
    public readonly selfLink?: string;
    public readonly tableId: string;
    public readonly timePartitioning?: { expirationMs?: number, type: string }[];
    public readonly type?: string;

    constructor(name: string, args: TableArgs) {
        super(name);
        if (args.creationTime === undefined) {
            throw new Error("Property argument 'creationTime' is required, but was missing");
        }
        this.creationTime = args.creationTime;
        if (args.datasetId === undefined) {
            throw new Error("Property argument 'datasetId' is required, but was missing");
        }
        this.datasetId = args.datasetId;
        this.description = args.description;
        if (args.etag === undefined) {
            throw new Error("Property argument 'etag' is required, but was missing");
        }
        this.etag = args.etag;
        this.expirationTime = args.expirationTime;
        this.friendlyName = args.friendlyName;
        this.labels = args.labels;
        if (args.lastModifiedTime === undefined) {
            throw new Error("Property argument 'lastModifiedTime' is required, but was missing");
        }
        this.lastModifiedTime = args.lastModifiedTime;
        if (args.location === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        if (args.numBytes === undefined) {
            throw new Error("Property argument 'numBytes' is required, but was missing");
        }
        this.numBytes = args.numBytes;
        if (args.numLongTermBytes === undefined) {
            throw new Error("Property argument 'numLongTermBytes' is required, but was missing");
        }
        this.numLongTermBytes = args.numLongTermBytes;
        if (args.numRows === undefined) {
            throw new Error("Property argument 'numRows' is required, but was missing");
        }
        this.numRows = args.numRows;
        this.project = args.project;
        this.schema = args.schema;
        if (args.selfLink === undefined) {
            throw new Error("Property argument 'selfLink' is required, but was missing");
        }
        this.selfLink = args.selfLink;
        if (args.tableId === undefined) {
            throw new Error("Property argument 'tableId' is required, but was missing");
        }
        this.tableId = args.tableId;
        this.timePartitioning = args.timePartitioning;
        if (args.type === undefined) {
            throw new Error("Property argument 'type' is required, but was missing");
        }
        this.type = args.type;
    }
}

export interface TableArgs {
    readonly creationTime?: number;
    readonly datasetId: string;
    readonly description?: string;
    readonly etag?: string;
    readonly expirationTime?: number;
    readonly friendlyName?: string;
    readonly labels?: {[key: string]: string};
    readonly lastModifiedTime?: number;
    readonly location?: string;
    readonly numBytes?: number;
    readonly numLongTermBytes?: number;
    readonly numRows?: number;
    readonly project?: string;
    readonly schema?: string;
    readonly selfLink?: string;
    readonly tableId: string;
    readonly timePartitioning?: { expirationMs?: number, type: string }[];
    readonly type?: string;
}

